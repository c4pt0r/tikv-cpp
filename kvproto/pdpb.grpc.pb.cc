// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pdpb.proto

#include "pdpb.pb.h"
#include "pdpb.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace pdpb {

static const char* PD_method_names[] = {
  "/pdpb.PD/GetMembers",
  "/pdpb.PD/Tso",
  "/pdpb.PD/Bootstrap",
  "/pdpb.PD/IsBootstrapped",
  "/pdpb.PD/AllocID",
  "/pdpb.PD/GetStore",
  "/pdpb.PD/PutStore",
  "/pdpb.PD/GetAllStores",
  "/pdpb.PD/StoreHeartbeat",
  "/pdpb.PD/RegionHeartbeat",
  "/pdpb.PD/GetRegion",
  "/pdpb.PD/GetPrevRegion",
  "/pdpb.PD/GetRegionByID",
  "/pdpb.PD/AskSplit",
  "/pdpb.PD/ReportSplit",
  "/pdpb.PD/GetClusterConfig",
  "/pdpb.PD/PutClusterConfig",
  "/pdpb.PD/ScatterRegion",
  "/pdpb.PD/GetGCSafePoint",
  "/pdpb.PD/UpdateGCSafePoint",
};

std::unique_ptr< PD::Stub> PD::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PD::Stub> stub(new PD::Stub(channel));
  return stub;
}

PD::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetMembers_(PD_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Tso_(PD_method_names[1], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Bootstrap_(PD_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsBootstrapped_(PD_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AllocID_(PD_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStore_(PD_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PutStore_(PD_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllStores_(PD_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StoreHeartbeat_(PD_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegionHeartbeat_(PD_method_names[9], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_GetRegion_(PD_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPrevRegion_(PD_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRegionByID_(PD_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AskSplit_(PD_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReportSplit_(PD_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetClusterConfig_(PD_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PutClusterConfig_(PD_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ScatterRegion_(PD_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGCSafePoint_(PD_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateGCSafePoint_(PD_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PD::Stub::GetMembers(::grpc::ClientContext* context, const ::pdpb::GetMembersRequest& request, ::pdpb::GetMembersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMembers_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pdpb::GetMembersResponse>* PD::Stub::AsyncGetMembersRaw(::grpc::ClientContext* context, const ::pdpb::GetMembersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::GetMembersResponse>::Create(channel_.get(), cq, rpcmethod_GetMembers_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pdpb::GetMembersResponse>* PD::Stub::PrepareAsyncGetMembersRaw(::grpc::ClientContext* context, const ::pdpb::GetMembersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::GetMembersResponse>::Create(channel_.get(), cq, rpcmethod_GetMembers_, context, request, false);
}

::grpc::ClientReaderWriter< ::pdpb::TsoRequest, ::pdpb::TsoResponse>* PD::Stub::TsoRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::pdpb::TsoRequest, ::pdpb::TsoResponse>::Create(channel_.get(), rpcmethod_Tso_, context);
}

::grpc::ClientAsyncReaderWriter< ::pdpb::TsoRequest, ::pdpb::TsoResponse>* PD::Stub::AsyncTsoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::pdpb::TsoRequest, ::pdpb::TsoResponse>::Create(channel_.get(), cq, rpcmethod_Tso_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::pdpb::TsoRequest, ::pdpb::TsoResponse>* PD::Stub::PrepareAsyncTsoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::pdpb::TsoRequest, ::pdpb::TsoResponse>::Create(channel_.get(), cq, rpcmethod_Tso_, context, false, nullptr);
}

::grpc::Status PD::Stub::Bootstrap(::grpc::ClientContext* context, const ::pdpb::BootstrapRequest& request, ::pdpb::BootstrapResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Bootstrap_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pdpb::BootstrapResponse>* PD::Stub::AsyncBootstrapRaw(::grpc::ClientContext* context, const ::pdpb::BootstrapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::BootstrapResponse>::Create(channel_.get(), cq, rpcmethod_Bootstrap_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pdpb::BootstrapResponse>* PD::Stub::PrepareAsyncBootstrapRaw(::grpc::ClientContext* context, const ::pdpb::BootstrapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::BootstrapResponse>::Create(channel_.get(), cq, rpcmethod_Bootstrap_, context, request, false);
}

::grpc::Status PD::Stub::IsBootstrapped(::grpc::ClientContext* context, const ::pdpb::IsBootstrappedRequest& request, ::pdpb::IsBootstrappedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_IsBootstrapped_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pdpb::IsBootstrappedResponse>* PD::Stub::AsyncIsBootstrappedRaw(::grpc::ClientContext* context, const ::pdpb::IsBootstrappedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::IsBootstrappedResponse>::Create(channel_.get(), cq, rpcmethod_IsBootstrapped_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pdpb::IsBootstrappedResponse>* PD::Stub::PrepareAsyncIsBootstrappedRaw(::grpc::ClientContext* context, const ::pdpb::IsBootstrappedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::IsBootstrappedResponse>::Create(channel_.get(), cq, rpcmethod_IsBootstrapped_, context, request, false);
}

::grpc::Status PD::Stub::AllocID(::grpc::ClientContext* context, const ::pdpb::AllocIDRequest& request, ::pdpb::AllocIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AllocID_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pdpb::AllocIDResponse>* PD::Stub::AsyncAllocIDRaw(::grpc::ClientContext* context, const ::pdpb::AllocIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::AllocIDResponse>::Create(channel_.get(), cq, rpcmethod_AllocID_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pdpb::AllocIDResponse>* PD::Stub::PrepareAsyncAllocIDRaw(::grpc::ClientContext* context, const ::pdpb::AllocIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::AllocIDResponse>::Create(channel_.get(), cq, rpcmethod_AllocID_, context, request, false);
}

::grpc::Status PD::Stub::GetStore(::grpc::ClientContext* context, const ::pdpb::GetStoreRequest& request, ::pdpb::GetStoreResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetStore_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pdpb::GetStoreResponse>* PD::Stub::AsyncGetStoreRaw(::grpc::ClientContext* context, const ::pdpb::GetStoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::GetStoreResponse>::Create(channel_.get(), cq, rpcmethod_GetStore_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pdpb::GetStoreResponse>* PD::Stub::PrepareAsyncGetStoreRaw(::grpc::ClientContext* context, const ::pdpb::GetStoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::GetStoreResponse>::Create(channel_.get(), cq, rpcmethod_GetStore_, context, request, false);
}

::grpc::Status PD::Stub::PutStore(::grpc::ClientContext* context, const ::pdpb::PutStoreRequest& request, ::pdpb::PutStoreResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PutStore_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pdpb::PutStoreResponse>* PD::Stub::AsyncPutStoreRaw(::grpc::ClientContext* context, const ::pdpb::PutStoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::PutStoreResponse>::Create(channel_.get(), cq, rpcmethod_PutStore_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pdpb::PutStoreResponse>* PD::Stub::PrepareAsyncPutStoreRaw(::grpc::ClientContext* context, const ::pdpb::PutStoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::PutStoreResponse>::Create(channel_.get(), cq, rpcmethod_PutStore_, context, request, false);
}

::grpc::Status PD::Stub::GetAllStores(::grpc::ClientContext* context, const ::pdpb::GetAllStoresRequest& request, ::pdpb::GetAllStoresResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAllStores_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pdpb::GetAllStoresResponse>* PD::Stub::AsyncGetAllStoresRaw(::grpc::ClientContext* context, const ::pdpb::GetAllStoresRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::GetAllStoresResponse>::Create(channel_.get(), cq, rpcmethod_GetAllStores_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pdpb::GetAllStoresResponse>* PD::Stub::PrepareAsyncGetAllStoresRaw(::grpc::ClientContext* context, const ::pdpb::GetAllStoresRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::GetAllStoresResponse>::Create(channel_.get(), cq, rpcmethod_GetAllStores_, context, request, false);
}

::grpc::Status PD::Stub::StoreHeartbeat(::grpc::ClientContext* context, const ::pdpb::StoreHeartbeatRequest& request, ::pdpb::StoreHeartbeatResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StoreHeartbeat_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pdpb::StoreHeartbeatResponse>* PD::Stub::AsyncStoreHeartbeatRaw(::grpc::ClientContext* context, const ::pdpb::StoreHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::StoreHeartbeatResponse>::Create(channel_.get(), cq, rpcmethod_StoreHeartbeat_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pdpb::StoreHeartbeatResponse>* PD::Stub::PrepareAsyncStoreHeartbeatRaw(::grpc::ClientContext* context, const ::pdpb::StoreHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::StoreHeartbeatResponse>::Create(channel_.get(), cq, rpcmethod_StoreHeartbeat_, context, request, false);
}

::grpc::ClientReaderWriter< ::pdpb::RegionHeartbeatRequest, ::pdpb::RegionHeartbeatResponse>* PD::Stub::RegionHeartbeatRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::pdpb::RegionHeartbeatRequest, ::pdpb::RegionHeartbeatResponse>::Create(channel_.get(), rpcmethod_RegionHeartbeat_, context);
}

::grpc::ClientAsyncReaderWriter< ::pdpb::RegionHeartbeatRequest, ::pdpb::RegionHeartbeatResponse>* PD::Stub::AsyncRegionHeartbeatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::pdpb::RegionHeartbeatRequest, ::pdpb::RegionHeartbeatResponse>::Create(channel_.get(), cq, rpcmethod_RegionHeartbeat_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::pdpb::RegionHeartbeatRequest, ::pdpb::RegionHeartbeatResponse>* PD::Stub::PrepareAsyncRegionHeartbeatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::pdpb::RegionHeartbeatRequest, ::pdpb::RegionHeartbeatResponse>::Create(channel_.get(), cq, rpcmethod_RegionHeartbeat_, context, false, nullptr);
}

::grpc::Status PD::Stub::GetRegion(::grpc::ClientContext* context, const ::pdpb::GetRegionRequest& request, ::pdpb::GetRegionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRegion_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pdpb::GetRegionResponse>* PD::Stub::AsyncGetRegionRaw(::grpc::ClientContext* context, const ::pdpb::GetRegionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::GetRegionResponse>::Create(channel_.get(), cq, rpcmethod_GetRegion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pdpb::GetRegionResponse>* PD::Stub::PrepareAsyncGetRegionRaw(::grpc::ClientContext* context, const ::pdpb::GetRegionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::GetRegionResponse>::Create(channel_.get(), cq, rpcmethod_GetRegion_, context, request, false);
}

::grpc::Status PD::Stub::GetPrevRegion(::grpc::ClientContext* context, const ::pdpb::GetRegionRequest& request, ::pdpb::GetRegionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPrevRegion_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pdpb::GetRegionResponse>* PD::Stub::AsyncGetPrevRegionRaw(::grpc::ClientContext* context, const ::pdpb::GetRegionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::GetRegionResponse>::Create(channel_.get(), cq, rpcmethod_GetPrevRegion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pdpb::GetRegionResponse>* PD::Stub::PrepareAsyncGetPrevRegionRaw(::grpc::ClientContext* context, const ::pdpb::GetRegionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::GetRegionResponse>::Create(channel_.get(), cq, rpcmethod_GetPrevRegion_, context, request, false);
}

::grpc::Status PD::Stub::GetRegionByID(::grpc::ClientContext* context, const ::pdpb::GetRegionByIDRequest& request, ::pdpb::GetRegionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRegionByID_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pdpb::GetRegionResponse>* PD::Stub::AsyncGetRegionByIDRaw(::grpc::ClientContext* context, const ::pdpb::GetRegionByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::GetRegionResponse>::Create(channel_.get(), cq, rpcmethod_GetRegionByID_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pdpb::GetRegionResponse>* PD::Stub::PrepareAsyncGetRegionByIDRaw(::grpc::ClientContext* context, const ::pdpb::GetRegionByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::GetRegionResponse>::Create(channel_.get(), cq, rpcmethod_GetRegionByID_, context, request, false);
}

::grpc::Status PD::Stub::AskSplit(::grpc::ClientContext* context, const ::pdpb::AskSplitRequest& request, ::pdpb::AskSplitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AskSplit_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pdpb::AskSplitResponse>* PD::Stub::AsyncAskSplitRaw(::grpc::ClientContext* context, const ::pdpb::AskSplitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::AskSplitResponse>::Create(channel_.get(), cq, rpcmethod_AskSplit_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pdpb::AskSplitResponse>* PD::Stub::PrepareAsyncAskSplitRaw(::grpc::ClientContext* context, const ::pdpb::AskSplitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::AskSplitResponse>::Create(channel_.get(), cq, rpcmethod_AskSplit_, context, request, false);
}

::grpc::Status PD::Stub::ReportSplit(::grpc::ClientContext* context, const ::pdpb::ReportSplitRequest& request, ::pdpb::ReportSplitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReportSplit_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pdpb::ReportSplitResponse>* PD::Stub::AsyncReportSplitRaw(::grpc::ClientContext* context, const ::pdpb::ReportSplitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::ReportSplitResponse>::Create(channel_.get(), cq, rpcmethod_ReportSplit_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pdpb::ReportSplitResponse>* PD::Stub::PrepareAsyncReportSplitRaw(::grpc::ClientContext* context, const ::pdpb::ReportSplitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::ReportSplitResponse>::Create(channel_.get(), cq, rpcmethod_ReportSplit_, context, request, false);
}

::grpc::Status PD::Stub::GetClusterConfig(::grpc::ClientContext* context, const ::pdpb::GetClusterConfigRequest& request, ::pdpb::GetClusterConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetClusterConfig_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pdpb::GetClusterConfigResponse>* PD::Stub::AsyncGetClusterConfigRaw(::grpc::ClientContext* context, const ::pdpb::GetClusterConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::GetClusterConfigResponse>::Create(channel_.get(), cq, rpcmethod_GetClusterConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pdpb::GetClusterConfigResponse>* PD::Stub::PrepareAsyncGetClusterConfigRaw(::grpc::ClientContext* context, const ::pdpb::GetClusterConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::GetClusterConfigResponse>::Create(channel_.get(), cq, rpcmethod_GetClusterConfig_, context, request, false);
}

::grpc::Status PD::Stub::PutClusterConfig(::grpc::ClientContext* context, const ::pdpb::PutClusterConfigRequest& request, ::pdpb::PutClusterConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PutClusterConfig_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pdpb::PutClusterConfigResponse>* PD::Stub::AsyncPutClusterConfigRaw(::grpc::ClientContext* context, const ::pdpb::PutClusterConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::PutClusterConfigResponse>::Create(channel_.get(), cq, rpcmethod_PutClusterConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pdpb::PutClusterConfigResponse>* PD::Stub::PrepareAsyncPutClusterConfigRaw(::grpc::ClientContext* context, const ::pdpb::PutClusterConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::PutClusterConfigResponse>::Create(channel_.get(), cq, rpcmethod_PutClusterConfig_, context, request, false);
}

::grpc::Status PD::Stub::ScatterRegion(::grpc::ClientContext* context, const ::pdpb::ScatterRegionRequest& request, ::pdpb::ScatterRegionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ScatterRegion_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pdpb::ScatterRegionResponse>* PD::Stub::AsyncScatterRegionRaw(::grpc::ClientContext* context, const ::pdpb::ScatterRegionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::ScatterRegionResponse>::Create(channel_.get(), cq, rpcmethod_ScatterRegion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pdpb::ScatterRegionResponse>* PD::Stub::PrepareAsyncScatterRegionRaw(::grpc::ClientContext* context, const ::pdpb::ScatterRegionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::ScatterRegionResponse>::Create(channel_.get(), cq, rpcmethod_ScatterRegion_, context, request, false);
}

::grpc::Status PD::Stub::GetGCSafePoint(::grpc::ClientContext* context, const ::pdpb::GetGCSafePointRequest& request, ::pdpb::GetGCSafePointResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetGCSafePoint_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pdpb::GetGCSafePointResponse>* PD::Stub::AsyncGetGCSafePointRaw(::grpc::ClientContext* context, const ::pdpb::GetGCSafePointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::GetGCSafePointResponse>::Create(channel_.get(), cq, rpcmethod_GetGCSafePoint_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pdpb::GetGCSafePointResponse>* PD::Stub::PrepareAsyncGetGCSafePointRaw(::grpc::ClientContext* context, const ::pdpb::GetGCSafePointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::GetGCSafePointResponse>::Create(channel_.get(), cq, rpcmethod_GetGCSafePoint_, context, request, false);
}

::grpc::Status PD::Stub::UpdateGCSafePoint(::grpc::ClientContext* context, const ::pdpb::UpdateGCSafePointRequest& request, ::pdpb::UpdateGCSafePointResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateGCSafePoint_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pdpb::UpdateGCSafePointResponse>* PD::Stub::AsyncUpdateGCSafePointRaw(::grpc::ClientContext* context, const ::pdpb::UpdateGCSafePointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::UpdateGCSafePointResponse>::Create(channel_.get(), cq, rpcmethod_UpdateGCSafePoint_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pdpb::UpdateGCSafePointResponse>* PD::Stub::PrepareAsyncUpdateGCSafePointRaw(::grpc::ClientContext* context, const ::pdpb::UpdateGCSafePointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pdpb::UpdateGCSafePointResponse>::Create(channel_.get(), cq, rpcmethod_UpdateGCSafePoint_, context, request, false);
}

PD::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PD_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PD::Service, ::pdpb::GetMembersRequest, ::pdpb::GetMembersResponse>(
          std::mem_fn(&PD::Service::GetMembers), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PD_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< PD::Service, ::pdpb::TsoRequest, ::pdpb::TsoResponse>(
          std::mem_fn(&PD::Service::Tso), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PD_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PD::Service, ::pdpb::BootstrapRequest, ::pdpb::BootstrapResponse>(
          std::mem_fn(&PD::Service::Bootstrap), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PD_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PD::Service, ::pdpb::IsBootstrappedRequest, ::pdpb::IsBootstrappedResponse>(
          std::mem_fn(&PD::Service::IsBootstrapped), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PD_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PD::Service, ::pdpb::AllocIDRequest, ::pdpb::AllocIDResponse>(
          std::mem_fn(&PD::Service::AllocID), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PD_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PD::Service, ::pdpb::GetStoreRequest, ::pdpb::GetStoreResponse>(
          std::mem_fn(&PD::Service::GetStore), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PD_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PD::Service, ::pdpb::PutStoreRequest, ::pdpb::PutStoreResponse>(
          std::mem_fn(&PD::Service::PutStore), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PD_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PD::Service, ::pdpb::GetAllStoresRequest, ::pdpb::GetAllStoresResponse>(
          std::mem_fn(&PD::Service::GetAllStores), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PD_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PD::Service, ::pdpb::StoreHeartbeatRequest, ::pdpb::StoreHeartbeatResponse>(
          std::mem_fn(&PD::Service::StoreHeartbeat), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PD_method_names[9],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< PD::Service, ::pdpb::RegionHeartbeatRequest, ::pdpb::RegionHeartbeatResponse>(
          std::mem_fn(&PD::Service::RegionHeartbeat), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PD_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PD::Service, ::pdpb::GetRegionRequest, ::pdpb::GetRegionResponse>(
          std::mem_fn(&PD::Service::GetRegion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PD_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PD::Service, ::pdpb::GetRegionRequest, ::pdpb::GetRegionResponse>(
          std::mem_fn(&PD::Service::GetPrevRegion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PD_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PD::Service, ::pdpb::GetRegionByIDRequest, ::pdpb::GetRegionResponse>(
          std::mem_fn(&PD::Service::GetRegionByID), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PD_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PD::Service, ::pdpb::AskSplitRequest, ::pdpb::AskSplitResponse>(
          std::mem_fn(&PD::Service::AskSplit), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PD_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PD::Service, ::pdpb::ReportSplitRequest, ::pdpb::ReportSplitResponse>(
          std::mem_fn(&PD::Service::ReportSplit), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PD_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PD::Service, ::pdpb::GetClusterConfigRequest, ::pdpb::GetClusterConfigResponse>(
          std::mem_fn(&PD::Service::GetClusterConfig), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PD_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PD::Service, ::pdpb::PutClusterConfigRequest, ::pdpb::PutClusterConfigResponse>(
          std::mem_fn(&PD::Service::PutClusterConfig), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PD_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PD::Service, ::pdpb::ScatterRegionRequest, ::pdpb::ScatterRegionResponse>(
          std::mem_fn(&PD::Service::ScatterRegion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PD_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PD::Service, ::pdpb::GetGCSafePointRequest, ::pdpb::GetGCSafePointResponse>(
          std::mem_fn(&PD::Service::GetGCSafePoint), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PD_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PD::Service, ::pdpb::UpdateGCSafePointRequest, ::pdpb::UpdateGCSafePointResponse>(
          std::mem_fn(&PD::Service::UpdateGCSafePoint), this)));
}

PD::Service::~Service() {
}

::grpc::Status PD::Service::GetMembers(::grpc::ServerContext* context, const ::pdpb::GetMembersRequest* request, ::pdpb::GetMembersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PD::Service::Tso(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::pdpb::TsoResponse, ::pdpb::TsoRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PD::Service::Bootstrap(::grpc::ServerContext* context, const ::pdpb::BootstrapRequest* request, ::pdpb::BootstrapResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PD::Service::IsBootstrapped(::grpc::ServerContext* context, const ::pdpb::IsBootstrappedRequest* request, ::pdpb::IsBootstrappedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PD::Service::AllocID(::grpc::ServerContext* context, const ::pdpb::AllocIDRequest* request, ::pdpb::AllocIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PD::Service::GetStore(::grpc::ServerContext* context, const ::pdpb::GetStoreRequest* request, ::pdpb::GetStoreResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PD::Service::PutStore(::grpc::ServerContext* context, const ::pdpb::PutStoreRequest* request, ::pdpb::PutStoreResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PD::Service::GetAllStores(::grpc::ServerContext* context, const ::pdpb::GetAllStoresRequest* request, ::pdpb::GetAllStoresResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PD::Service::StoreHeartbeat(::grpc::ServerContext* context, const ::pdpb::StoreHeartbeatRequest* request, ::pdpb::StoreHeartbeatResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PD::Service::RegionHeartbeat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::pdpb::RegionHeartbeatResponse, ::pdpb::RegionHeartbeatRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PD::Service::GetRegion(::grpc::ServerContext* context, const ::pdpb::GetRegionRequest* request, ::pdpb::GetRegionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PD::Service::GetPrevRegion(::grpc::ServerContext* context, const ::pdpb::GetRegionRequest* request, ::pdpb::GetRegionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PD::Service::GetRegionByID(::grpc::ServerContext* context, const ::pdpb::GetRegionByIDRequest* request, ::pdpb::GetRegionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PD::Service::AskSplit(::grpc::ServerContext* context, const ::pdpb::AskSplitRequest* request, ::pdpb::AskSplitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PD::Service::ReportSplit(::grpc::ServerContext* context, const ::pdpb::ReportSplitRequest* request, ::pdpb::ReportSplitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PD::Service::GetClusterConfig(::grpc::ServerContext* context, const ::pdpb::GetClusterConfigRequest* request, ::pdpb::GetClusterConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PD::Service::PutClusterConfig(::grpc::ServerContext* context, const ::pdpb::PutClusterConfigRequest* request, ::pdpb::PutClusterConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PD::Service::ScatterRegion(::grpc::ServerContext* context, const ::pdpb::ScatterRegionRequest* request, ::pdpb::ScatterRegionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PD::Service::GetGCSafePoint(::grpc::ServerContext* context, const ::pdpb::GetGCSafePointRequest* request, ::pdpb::GetGCSafePointResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PD::Service::UpdateGCSafePoint(::grpc::ServerContext* context, const ::pdpb::UpdateGCSafePointRequest* request, ::pdpb::UpdateGCSafePointResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pdpb

