// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tikvpb.proto
#ifndef GRPC_tikvpb_2eproto__INCLUDED
#define GRPC_tikvpb_2eproto__INCLUDED

#include "tikvpb.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace tikvpb {

// Serve as a distributed kv database.
class Tikv final {
 public:
  static constexpr char const* service_full_name() {
    return "tikvpb.Tikv";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // KV commands with mvcc/txn supported.
    virtual ::grpc::Status KvGet(::grpc::ClientContext* context, const ::kvrpcpb::GetRequest& request, ::kvrpcpb::GetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::GetResponse>> AsyncKvGet(::grpc::ClientContext* context, const ::kvrpcpb::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::GetResponse>>(AsyncKvGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::GetResponse>> PrepareAsyncKvGet(::grpc::ClientContext* context, const ::kvrpcpb::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::GetResponse>>(PrepareAsyncKvGetRaw(context, request, cq));
    }
    virtual ::grpc::Status KvScan(::grpc::ClientContext* context, const ::kvrpcpb::ScanRequest& request, ::kvrpcpb::ScanResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::ScanResponse>> AsyncKvScan(::grpc::ClientContext* context, const ::kvrpcpb::ScanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::ScanResponse>>(AsyncKvScanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::ScanResponse>> PrepareAsyncKvScan(::grpc::ClientContext* context, const ::kvrpcpb::ScanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::ScanResponse>>(PrepareAsyncKvScanRaw(context, request, cq));
    }
    virtual ::grpc::Status KvPrewrite(::grpc::ClientContext* context, const ::kvrpcpb::PrewriteRequest& request, ::kvrpcpb::PrewriteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::PrewriteResponse>> AsyncKvPrewrite(::grpc::ClientContext* context, const ::kvrpcpb::PrewriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::PrewriteResponse>>(AsyncKvPrewriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::PrewriteResponse>> PrepareAsyncKvPrewrite(::grpc::ClientContext* context, const ::kvrpcpb::PrewriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::PrewriteResponse>>(PrepareAsyncKvPrewriteRaw(context, request, cq));
    }
    virtual ::grpc::Status KvCommit(::grpc::ClientContext* context, const ::kvrpcpb::CommitRequest& request, ::kvrpcpb::CommitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::CommitResponse>> AsyncKvCommit(::grpc::ClientContext* context, const ::kvrpcpb::CommitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::CommitResponse>>(AsyncKvCommitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::CommitResponse>> PrepareAsyncKvCommit(::grpc::ClientContext* context, const ::kvrpcpb::CommitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::CommitResponse>>(PrepareAsyncKvCommitRaw(context, request, cq));
    }
    virtual ::grpc::Status KvImport(::grpc::ClientContext* context, const ::kvrpcpb::ImportRequest& request, ::kvrpcpb::ImportResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::ImportResponse>> AsyncKvImport(::grpc::ClientContext* context, const ::kvrpcpb::ImportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::ImportResponse>>(AsyncKvImportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::ImportResponse>> PrepareAsyncKvImport(::grpc::ClientContext* context, const ::kvrpcpb::ImportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::ImportResponse>>(PrepareAsyncKvImportRaw(context, request, cq));
    }
    virtual ::grpc::Status KvCleanup(::grpc::ClientContext* context, const ::kvrpcpb::CleanupRequest& request, ::kvrpcpb::CleanupResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::CleanupResponse>> AsyncKvCleanup(::grpc::ClientContext* context, const ::kvrpcpb::CleanupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::CleanupResponse>>(AsyncKvCleanupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::CleanupResponse>> PrepareAsyncKvCleanup(::grpc::ClientContext* context, const ::kvrpcpb::CleanupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::CleanupResponse>>(PrepareAsyncKvCleanupRaw(context, request, cq));
    }
    virtual ::grpc::Status KvBatchGet(::grpc::ClientContext* context, const ::kvrpcpb::BatchGetRequest& request, ::kvrpcpb::BatchGetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::BatchGetResponse>> AsyncKvBatchGet(::grpc::ClientContext* context, const ::kvrpcpb::BatchGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::BatchGetResponse>>(AsyncKvBatchGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::BatchGetResponse>> PrepareAsyncKvBatchGet(::grpc::ClientContext* context, const ::kvrpcpb::BatchGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::BatchGetResponse>>(PrepareAsyncKvBatchGetRaw(context, request, cq));
    }
    virtual ::grpc::Status KvBatchRollback(::grpc::ClientContext* context, const ::kvrpcpb::BatchRollbackRequest& request, ::kvrpcpb::BatchRollbackResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::BatchRollbackResponse>> AsyncKvBatchRollback(::grpc::ClientContext* context, const ::kvrpcpb::BatchRollbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::BatchRollbackResponse>>(AsyncKvBatchRollbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::BatchRollbackResponse>> PrepareAsyncKvBatchRollback(::grpc::ClientContext* context, const ::kvrpcpb::BatchRollbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::BatchRollbackResponse>>(PrepareAsyncKvBatchRollbackRaw(context, request, cq));
    }
    virtual ::grpc::Status KvScanLock(::grpc::ClientContext* context, const ::kvrpcpb::ScanLockRequest& request, ::kvrpcpb::ScanLockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::ScanLockResponse>> AsyncKvScanLock(::grpc::ClientContext* context, const ::kvrpcpb::ScanLockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::ScanLockResponse>>(AsyncKvScanLockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::ScanLockResponse>> PrepareAsyncKvScanLock(::grpc::ClientContext* context, const ::kvrpcpb::ScanLockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::ScanLockResponse>>(PrepareAsyncKvScanLockRaw(context, request, cq));
    }
    virtual ::grpc::Status KvResolveLock(::grpc::ClientContext* context, const ::kvrpcpb::ResolveLockRequest& request, ::kvrpcpb::ResolveLockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::ResolveLockResponse>> AsyncKvResolveLock(::grpc::ClientContext* context, const ::kvrpcpb::ResolveLockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::ResolveLockResponse>>(AsyncKvResolveLockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::ResolveLockResponse>> PrepareAsyncKvResolveLock(::grpc::ClientContext* context, const ::kvrpcpb::ResolveLockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::ResolveLockResponse>>(PrepareAsyncKvResolveLockRaw(context, request, cq));
    }
    virtual ::grpc::Status KvGC(::grpc::ClientContext* context, const ::kvrpcpb::GCRequest& request, ::kvrpcpb::GCResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::GCResponse>> AsyncKvGC(::grpc::ClientContext* context, const ::kvrpcpb::GCRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::GCResponse>>(AsyncKvGCRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::GCResponse>> PrepareAsyncKvGC(::grpc::ClientContext* context, const ::kvrpcpb::GCRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::GCResponse>>(PrepareAsyncKvGCRaw(context, request, cq));
    }
    virtual ::grpc::Status KvDeleteRange(::grpc::ClientContext* context, const ::kvrpcpb::DeleteRangeRequest& request, ::kvrpcpb::DeleteRangeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::DeleteRangeResponse>> AsyncKvDeleteRange(::grpc::ClientContext* context, const ::kvrpcpb::DeleteRangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::DeleteRangeResponse>>(AsyncKvDeleteRangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::DeleteRangeResponse>> PrepareAsyncKvDeleteRange(::grpc::ClientContext* context, const ::kvrpcpb::DeleteRangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::DeleteRangeResponse>>(PrepareAsyncKvDeleteRangeRaw(context, request, cq));
    }
    // RawKV commands.
    virtual ::grpc::Status RawGet(::grpc::ClientContext* context, const ::kvrpcpb::RawGetRequest& request, ::kvrpcpb::RawGetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawGetResponse>> AsyncRawGet(::grpc::ClientContext* context, const ::kvrpcpb::RawGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawGetResponse>>(AsyncRawGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawGetResponse>> PrepareAsyncRawGet(::grpc::ClientContext* context, const ::kvrpcpb::RawGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawGetResponse>>(PrepareAsyncRawGetRaw(context, request, cq));
    }
    virtual ::grpc::Status RawBatchGet(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchGetRequest& request, ::kvrpcpb::RawBatchGetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawBatchGetResponse>> AsyncRawBatchGet(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawBatchGetResponse>>(AsyncRawBatchGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawBatchGetResponse>> PrepareAsyncRawBatchGet(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawBatchGetResponse>>(PrepareAsyncRawBatchGetRaw(context, request, cq));
    }
    virtual ::grpc::Status RawPut(::grpc::ClientContext* context, const ::kvrpcpb::RawPutRequest& request, ::kvrpcpb::RawPutResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawPutResponse>> AsyncRawPut(::grpc::ClientContext* context, const ::kvrpcpb::RawPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawPutResponse>>(AsyncRawPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawPutResponse>> PrepareAsyncRawPut(::grpc::ClientContext* context, const ::kvrpcpb::RawPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawPutResponse>>(PrepareAsyncRawPutRaw(context, request, cq));
    }
    virtual ::grpc::Status RawBatchPut(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchPutRequest& request, ::kvrpcpb::RawBatchPutResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawBatchPutResponse>> AsyncRawBatchPut(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawBatchPutResponse>>(AsyncRawBatchPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawBatchPutResponse>> PrepareAsyncRawBatchPut(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawBatchPutResponse>>(PrepareAsyncRawBatchPutRaw(context, request, cq));
    }
    virtual ::grpc::Status RawDelete(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRequest& request, ::kvrpcpb::RawDeleteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawDeleteResponse>> AsyncRawDelete(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawDeleteResponse>>(AsyncRawDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawDeleteResponse>> PrepareAsyncRawDelete(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawDeleteResponse>>(PrepareAsyncRawDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status RawBatchDelete(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchDeleteRequest& request, ::kvrpcpb::RawBatchDeleteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawBatchDeleteResponse>> AsyncRawBatchDelete(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawBatchDeleteResponse>>(AsyncRawBatchDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawBatchDeleteResponse>> PrepareAsyncRawBatchDelete(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawBatchDeleteResponse>>(PrepareAsyncRawBatchDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status RawScan(::grpc::ClientContext* context, const ::kvrpcpb::RawScanRequest& request, ::kvrpcpb::RawScanResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawScanResponse>> AsyncRawScan(::grpc::ClientContext* context, const ::kvrpcpb::RawScanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawScanResponse>>(AsyncRawScanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawScanResponse>> PrepareAsyncRawScan(::grpc::ClientContext* context, const ::kvrpcpb::RawScanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawScanResponse>>(PrepareAsyncRawScanRaw(context, request, cq));
    }
    virtual ::grpc::Status RawDeleteRange(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRangeRequest& request, ::kvrpcpb::RawDeleteRangeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawDeleteRangeResponse>> AsyncRawDeleteRange(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawDeleteRangeResponse>>(AsyncRawDeleteRangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawDeleteRangeResponse>> PrepareAsyncRawDeleteRange(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawDeleteRangeResponse>>(PrepareAsyncRawDeleteRangeRaw(context, request, cq));
    }
    virtual ::grpc::Status RawBatchScan(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchScanRequest& request, ::kvrpcpb::RawBatchScanResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawBatchScanResponse>> AsyncRawBatchScan(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchScanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawBatchScanResponse>>(AsyncRawBatchScanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawBatchScanResponse>> PrepareAsyncRawBatchScan(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchScanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawBatchScanResponse>>(PrepareAsyncRawBatchScanRaw(context, request, cq));
    }
    // SQL push down commands.
    virtual ::grpc::Status Coprocessor(::grpc::ClientContext* context, const ::coprocessor::Request& request, ::coprocessor::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coprocessor::Response>> AsyncCoprocessor(::grpc::ClientContext* context, const ::coprocessor::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coprocessor::Response>>(AsyncCoprocessorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coprocessor::Response>> PrepareAsyncCoprocessor(::grpc::ClientContext* context, const ::coprocessor::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coprocessor::Response>>(PrepareAsyncCoprocessorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::coprocessor::Response>> CoprocessorStream(::grpc::ClientContext* context, const ::coprocessor::Request& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::coprocessor::Response>>(CoprocessorStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::coprocessor::Response>> AsyncCoprocessorStream(::grpc::ClientContext* context, const ::coprocessor::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::coprocessor::Response>>(AsyncCoprocessorStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::coprocessor::Response>> PrepareAsyncCoprocessorStream(::grpc::ClientContext* context, const ::coprocessor::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::coprocessor::Response>>(PrepareAsyncCoprocessorStreamRaw(context, request, cq));
    }
    // Raft commands (tikv <-> tikv).
    std::unique_ptr< ::grpc::ClientWriterInterface< ::raft_serverpb::RaftMessage>> Raft(::grpc::ClientContext* context, ::raft_serverpb::Done* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::raft_serverpb::RaftMessage>>(RaftRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::raft_serverpb::RaftMessage>> AsyncRaft(::grpc::ClientContext* context, ::raft_serverpb::Done* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::raft_serverpb::RaftMessage>>(AsyncRaftRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::raft_serverpb::RaftMessage>> PrepareAsyncRaft(::grpc::ClientContext* context, ::raft_serverpb::Done* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::raft_serverpb::RaftMessage>>(PrepareAsyncRaftRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::raft_serverpb::SnapshotChunk>> Snapshot(::grpc::ClientContext* context, ::raft_serverpb::Done* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::raft_serverpb::SnapshotChunk>>(SnapshotRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::raft_serverpb::SnapshotChunk>> AsyncSnapshot(::grpc::ClientContext* context, ::raft_serverpb::Done* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::raft_serverpb::SnapshotChunk>>(AsyncSnapshotRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::raft_serverpb::SnapshotChunk>> PrepareAsyncSnapshot(::grpc::ClientContext* context, ::raft_serverpb::Done* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::raft_serverpb::SnapshotChunk>>(PrepareAsyncSnapshotRaw(context, response, cq));
    }
    // Region commands.
    virtual ::grpc::Status SplitRegion(::grpc::ClientContext* context, const ::kvrpcpb::SplitRegionRequest& request, ::kvrpcpb::SplitRegionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::SplitRegionResponse>> AsyncSplitRegion(::grpc::ClientContext* context, const ::kvrpcpb::SplitRegionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::SplitRegionResponse>>(AsyncSplitRegionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::SplitRegionResponse>> PrepareAsyncSplitRegion(::grpc::ClientContext* context, const ::kvrpcpb::SplitRegionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::SplitRegionResponse>>(PrepareAsyncSplitRegionRaw(context, request, cq));
    }
    // transaction debugger commands.
    virtual ::grpc::Status MvccGetByKey(::grpc::ClientContext* context, const ::kvrpcpb::MvccGetByKeyRequest& request, ::kvrpcpb::MvccGetByKeyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::MvccGetByKeyResponse>> AsyncMvccGetByKey(::grpc::ClientContext* context, const ::kvrpcpb::MvccGetByKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::MvccGetByKeyResponse>>(AsyncMvccGetByKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::MvccGetByKeyResponse>> PrepareAsyncMvccGetByKey(::grpc::ClientContext* context, const ::kvrpcpb::MvccGetByKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::MvccGetByKeyResponse>>(PrepareAsyncMvccGetByKeyRaw(context, request, cq));
    }
    virtual ::grpc::Status MvccGetByStartTs(::grpc::ClientContext* context, const ::kvrpcpb::MvccGetByStartTsRequest& request, ::kvrpcpb::MvccGetByStartTsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::MvccGetByStartTsResponse>> AsyncMvccGetByStartTs(::grpc::ClientContext* context, const ::kvrpcpb::MvccGetByStartTsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::MvccGetByStartTsResponse>>(AsyncMvccGetByStartTsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::MvccGetByStartTsResponse>> PrepareAsyncMvccGetByStartTs(::grpc::ClientContext* context, const ::kvrpcpb::MvccGetByStartTsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::MvccGetByStartTsResponse>>(PrepareAsyncMvccGetByStartTsRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::GetResponse>* AsyncKvGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::GetResponse>* PrepareAsyncKvGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::ScanResponse>* AsyncKvScanRaw(::grpc::ClientContext* context, const ::kvrpcpb::ScanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::ScanResponse>* PrepareAsyncKvScanRaw(::grpc::ClientContext* context, const ::kvrpcpb::ScanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::PrewriteResponse>* AsyncKvPrewriteRaw(::grpc::ClientContext* context, const ::kvrpcpb::PrewriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::PrewriteResponse>* PrepareAsyncKvPrewriteRaw(::grpc::ClientContext* context, const ::kvrpcpb::PrewriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::CommitResponse>* AsyncKvCommitRaw(::grpc::ClientContext* context, const ::kvrpcpb::CommitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::CommitResponse>* PrepareAsyncKvCommitRaw(::grpc::ClientContext* context, const ::kvrpcpb::CommitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::ImportResponse>* AsyncKvImportRaw(::grpc::ClientContext* context, const ::kvrpcpb::ImportRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::ImportResponse>* PrepareAsyncKvImportRaw(::grpc::ClientContext* context, const ::kvrpcpb::ImportRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::CleanupResponse>* AsyncKvCleanupRaw(::grpc::ClientContext* context, const ::kvrpcpb::CleanupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::CleanupResponse>* PrepareAsyncKvCleanupRaw(::grpc::ClientContext* context, const ::kvrpcpb::CleanupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::BatchGetResponse>* AsyncKvBatchGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::BatchGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::BatchGetResponse>* PrepareAsyncKvBatchGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::BatchGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::BatchRollbackResponse>* AsyncKvBatchRollbackRaw(::grpc::ClientContext* context, const ::kvrpcpb::BatchRollbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::BatchRollbackResponse>* PrepareAsyncKvBatchRollbackRaw(::grpc::ClientContext* context, const ::kvrpcpb::BatchRollbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::ScanLockResponse>* AsyncKvScanLockRaw(::grpc::ClientContext* context, const ::kvrpcpb::ScanLockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::ScanLockResponse>* PrepareAsyncKvScanLockRaw(::grpc::ClientContext* context, const ::kvrpcpb::ScanLockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::ResolveLockResponse>* AsyncKvResolveLockRaw(::grpc::ClientContext* context, const ::kvrpcpb::ResolveLockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::ResolveLockResponse>* PrepareAsyncKvResolveLockRaw(::grpc::ClientContext* context, const ::kvrpcpb::ResolveLockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::GCResponse>* AsyncKvGCRaw(::grpc::ClientContext* context, const ::kvrpcpb::GCRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::GCResponse>* PrepareAsyncKvGCRaw(::grpc::ClientContext* context, const ::kvrpcpb::GCRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::DeleteRangeResponse>* AsyncKvDeleteRangeRaw(::grpc::ClientContext* context, const ::kvrpcpb::DeleteRangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::DeleteRangeResponse>* PrepareAsyncKvDeleteRangeRaw(::grpc::ClientContext* context, const ::kvrpcpb::DeleteRangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawGetResponse>* AsyncRawGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawGetResponse>* PrepareAsyncRawGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawBatchGetResponse>* AsyncRawBatchGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawBatchGetResponse>* PrepareAsyncRawBatchGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawPutResponse>* AsyncRawPutRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawPutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawPutResponse>* PrepareAsyncRawPutRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawPutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawBatchPutResponse>* AsyncRawBatchPutRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchPutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawBatchPutResponse>* PrepareAsyncRawBatchPutRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchPutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawDeleteResponse>* AsyncRawDeleteRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawDeleteResponse>* PrepareAsyncRawDeleteRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawBatchDeleteResponse>* AsyncRawBatchDeleteRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawBatchDeleteResponse>* PrepareAsyncRawBatchDeleteRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchDeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawScanResponse>* AsyncRawScanRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawScanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawScanResponse>* PrepareAsyncRawScanRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawScanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawDeleteRangeResponse>* AsyncRawDeleteRangeRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawDeleteRangeResponse>* PrepareAsyncRawDeleteRangeRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawBatchScanResponse>* AsyncRawBatchScanRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchScanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::RawBatchScanResponse>* PrepareAsyncRawBatchScanRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchScanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::coprocessor::Response>* AsyncCoprocessorRaw(::grpc::ClientContext* context, const ::coprocessor::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::coprocessor::Response>* PrepareAsyncCoprocessorRaw(::grpc::ClientContext* context, const ::coprocessor::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::coprocessor::Response>* CoprocessorStreamRaw(::grpc::ClientContext* context, const ::coprocessor::Request& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::coprocessor::Response>* AsyncCoprocessorStreamRaw(::grpc::ClientContext* context, const ::coprocessor::Request& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::coprocessor::Response>* PrepareAsyncCoprocessorStreamRaw(::grpc::ClientContext* context, const ::coprocessor::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::raft_serverpb::RaftMessage>* RaftRaw(::grpc::ClientContext* context, ::raft_serverpb::Done* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::raft_serverpb::RaftMessage>* AsyncRaftRaw(::grpc::ClientContext* context, ::raft_serverpb::Done* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::raft_serverpb::RaftMessage>* PrepareAsyncRaftRaw(::grpc::ClientContext* context, ::raft_serverpb::Done* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::raft_serverpb::SnapshotChunk>* SnapshotRaw(::grpc::ClientContext* context, ::raft_serverpb::Done* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::raft_serverpb::SnapshotChunk>* AsyncSnapshotRaw(::grpc::ClientContext* context, ::raft_serverpb::Done* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::raft_serverpb::SnapshotChunk>* PrepareAsyncSnapshotRaw(::grpc::ClientContext* context, ::raft_serverpb::Done* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::SplitRegionResponse>* AsyncSplitRegionRaw(::grpc::ClientContext* context, const ::kvrpcpb::SplitRegionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::SplitRegionResponse>* PrepareAsyncSplitRegionRaw(::grpc::ClientContext* context, const ::kvrpcpb::SplitRegionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::MvccGetByKeyResponse>* AsyncMvccGetByKeyRaw(::grpc::ClientContext* context, const ::kvrpcpb::MvccGetByKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::MvccGetByKeyResponse>* PrepareAsyncMvccGetByKeyRaw(::grpc::ClientContext* context, const ::kvrpcpb::MvccGetByKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::MvccGetByStartTsResponse>* AsyncMvccGetByStartTsRaw(::grpc::ClientContext* context, const ::kvrpcpb::MvccGetByStartTsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::kvrpcpb::MvccGetByStartTsResponse>* PrepareAsyncMvccGetByStartTsRaw(::grpc::ClientContext* context, const ::kvrpcpb::MvccGetByStartTsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status KvGet(::grpc::ClientContext* context, const ::kvrpcpb::GetRequest& request, ::kvrpcpb::GetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::GetResponse>> AsyncKvGet(::grpc::ClientContext* context, const ::kvrpcpb::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::GetResponse>>(AsyncKvGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::GetResponse>> PrepareAsyncKvGet(::grpc::ClientContext* context, const ::kvrpcpb::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::GetResponse>>(PrepareAsyncKvGetRaw(context, request, cq));
    }
    ::grpc::Status KvScan(::grpc::ClientContext* context, const ::kvrpcpb::ScanRequest& request, ::kvrpcpb::ScanResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::ScanResponse>> AsyncKvScan(::grpc::ClientContext* context, const ::kvrpcpb::ScanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::ScanResponse>>(AsyncKvScanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::ScanResponse>> PrepareAsyncKvScan(::grpc::ClientContext* context, const ::kvrpcpb::ScanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::ScanResponse>>(PrepareAsyncKvScanRaw(context, request, cq));
    }
    ::grpc::Status KvPrewrite(::grpc::ClientContext* context, const ::kvrpcpb::PrewriteRequest& request, ::kvrpcpb::PrewriteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::PrewriteResponse>> AsyncKvPrewrite(::grpc::ClientContext* context, const ::kvrpcpb::PrewriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::PrewriteResponse>>(AsyncKvPrewriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::PrewriteResponse>> PrepareAsyncKvPrewrite(::grpc::ClientContext* context, const ::kvrpcpb::PrewriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::PrewriteResponse>>(PrepareAsyncKvPrewriteRaw(context, request, cq));
    }
    ::grpc::Status KvCommit(::grpc::ClientContext* context, const ::kvrpcpb::CommitRequest& request, ::kvrpcpb::CommitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::CommitResponse>> AsyncKvCommit(::grpc::ClientContext* context, const ::kvrpcpb::CommitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::CommitResponse>>(AsyncKvCommitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::CommitResponse>> PrepareAsyncKvCommit(::grpc::ClientContext* context, const ::kvrpcpb::CommitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::CommitResponse>>(PrepareAsyncKvCommitRaw(context, request, cq));
    }
    ::grpc::Status KvImport(::grpc::ClientContext* context, const ::kvrpcpb::ImportRequest& request, ::kvrpcpb::ImportResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::ImportResponse>> AsyncKvImport(::grpc::ClientContext* context, const ::kvrpcpb::ImportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::ImportResponse>>(AsyncKvImportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::ImportResponse>> PrepareAsyncKvImport(::grpc::ClientContext* context, const ::kvrpcpb::ImportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::ImportResponse>>(PrepareAsyncKvImportRaw(context, request, cq));
    }
    ::grpc::Status KvCleanup(::grpc::ClientContext* context, const ::kvrpcpb::CleanupRequest& request, ::kvrpcpb::CleanupResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::CleanupResponse>> AsyncKvCleanup(::grpc::ClientContext* context, const ::kvrpcpb::CleanupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::CleanupResponse>>(AsyncKvCleanupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::CleanupResponse>> PrepareAsyncKvCleanup(::grpc::ClientContext* context, const ::kvrpcpb::CleanupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::CleanupResponse>>(PrepareAsyncKvCleanupRaw(context, request, cq));
    }
    ::grpc::Status KvBatchGet(::grpc::ClientContext* context, const ::kvrpcpb::BatchGetRequest& request, ::kvrpcpb::BatchGetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::BatchGetResponse>> AsyncKvBatchGet(::grpc::ClientContext* context, const ::kvrpcpb::BatchGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::BatchGetResponse>>(AsyncKvBatchGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::BatchGetResponse>> PrepareAsyncKvBatchGet(::grpc::ClientContext* context, const ::kvrpcpb::BatchGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::BatchGetResponse>>(PrepareAsyncKvBatchGetRaw(context, request, cq));
    }
    ::grpc::Status KvBatchRollback(::grpc::ClientContext* context, const ::kvrpcpb::BatchRollbackRequest& request, ::kvrpcpb::BatchRollbackResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::BatchRollbackResponse>> AsyncKvBatchRollback(::grpc::ClientContext* context, const ::kvrpcpb::BatchRollbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::BatchRollbackResponse>>(AsyncKvBatchRollbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::BatchRollbackResponse>> PrepareAsyncKvBatchRollback(::grpc::ClientContext* context, const ::kvrpcpb::BatchRollbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::BatchRollbackResponse>>(PrepareAsyncKvBatchRollbackRaw(context, request, cq));
    }
    ::grpc::Status KvScanLock(::grpc::ClientContext* context, const ::kvrpcpb::ScanLockRequest& request, ::kvrpcpb::ScanLockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::ScanLockResponse>> AsyncKvScanLock(::grpc::ClientContext* context, const ::kvrpcpb::ScanLockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::ScanLockResponse>>(AsyncKvScanLockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::ScanLockResponse>> PrepareAsyncKvScanLock(::grpc::ClientContext* context, const ::kvrpcpb::ScanLockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::ScanLockResponse>>(PrepareAsyncKvScanLockRaw(context, request, cq));
    }
    ::grpc::Status KvResolveLock(::grpc::ClientContext* context, const ::kvrpcpb::ResolveLockRequest& request, ::kvrpcpb::ResolveLockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::ResolveLockResponse>> AsyncKvResolveLock(::grpc::ClientContext* context, const ::kvrpcpb::ResolveLockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::ResolveLockResponse>>(AsyncKvResolveLockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::ResolveLockResponse>> PrepareAsyncKvResolveLock(::grpc::ClientContext* context, const ::kvrpcpb::ResolveLockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::ResolveLockResponse>>(PrepareAsyncKvResolveLockRaw(context, request, cq));
    }
    ::grpc::Status KvGC(::grpc::ClientContext* context, const ::kvrpcpb::GCRequest& request, ::kvrpcpb::GCResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::GCResponse>> AsyncKvGC(::grpc::ClientContext* context, const ::kvrpcpb::GCRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::GCResponse>>(AsyncKvGCRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::GCResponse>> PrepareAsyncKvGC(::grpc::ClientContext* context, const ::kvrpcpb::GCRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::GCResponse>>(PrepareAsyncKvGCRaw(context, request, cq));
    }
    ::grpc::Status KvDeleteRange(::grpc::ClientContext* context, const ::kvrpcpb::DeleteRangeRequest& request, ::kvrpcpb::DeleteRangeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::DeleteRangeResponse>> AsyncKvDeleteRange(::grpc::ClientContext* context, const ::kvrpcpb::DeleteRangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::DeleteRangeResponse>>(AsyncKvDeleteRangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::DeleteRangeResponse>> PrepareAsyncKvDeleteRange(::grpc::ClientContext* context, const ::kvrpcpb::DeleteRangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::DeleteRangeResponse>>(PrepareAsyncKvDeleteRangeRaw(context, request, cq));
    }
    ::grpc::Status RawGet(::grpc::ClientContext* context, const ::kvrpcpb::RawGetRequest& request, ::kvrpcpb::RawGetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawGetResponse>> AsyncRawGet(::grpc::ClientContext* context, const ::kvrpcpb::RawGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawGetResponse>>(AsyncRawGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawGetResponse>> PrepareAsyncRawGet(::grpc::ClientContext* context, const ::kvrpcpb::RawGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawGetResponse>>(PrepareAsyncRawGetRaw(context, request, cq));
    }
    ::grpc::Status RawBatchGet(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchGetRequest& request, ::kvrpcpb::RawBatchGetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchGetResponse>> AsyncRawBatchGet(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchGetResponse>>(AsyncRawBatchGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchGetResponse>> PrepareAsyncRawBatchGet(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchGetResponse>>(PrepareAsyncRawBatchGetRaw(context, request, cq));
    }
    ::grpc::Status RawPut(::grpc::ClientContext* context, const ::kvrpcpb::RawPutRequest& request, ::kvrpcpb::RawPutResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawPutResponse>> AsyncRawPut(::grpc::ClientContext* context, const ::kvrpcpb::RawPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawPutResponse>>(AsyncRawPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawPutResponse>> PrepareAsyncRawPut(::grpc::ClientContext* context, const ::kvrpcpb::RawPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawPutResponse>>(PrepareAsyncRawPutRaw(context, request, cq));
    }
    ::grpc::Status RawBatchPut(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchPutRequest& request, ::kvrpcpb::RawBatchPutResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchPutResponse>> AsyncRawBatchPut(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchPutResponse>>(AsyncRawBatchPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchPutResponse>> PrepareAsyncRawBatchPut(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchPutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchPutResponse>>(PrepareAsyncRawBatchPutRaw(context, request, cq));
    }
    ::grpc::Status RawDelete(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRequest& request, ::kvrpcpb::RawDeleteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawDeleteResponse>> AsyncRawDelete(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawDeleteResponse>>(AsyncRawDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawDeleteResponse>> PrepareAsyncRawDelete(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawDeleteResponse>>(PrepareAsyncRawDeleteRaw(context, request, cq));
    }
    ::grpc::Status RawBatchDelete(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchDeleteRequest& request, ::kvrpcpb::RawBatchDeleteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchDeleteResponse>> AsyncRawBatchDelete(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchDeleteResponse>>(AsyncRawBatchDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchDeleteResponse>> PrepareAsyncRawBatchDelete(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchDeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchDeleteResponse>>(PrepareAsyncRawBatchDeleteRaw(context, request, cq));
    }
    ::grpc::Status RawScan(::grpc::ClientContext* context, const ::kvrpcpb::RawScanRequest& request, ::kvrpcpb::RawScanResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawScanResponse>> AsyncRawScan(::grpc::ClientContext* context, const ::kvrpcpb::RawScanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawScanResponse>>(AsyncRawScanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawScanResponse>> PrepareAsyncRawScan(::grpc::ClientContext* context, const ::kvrpcpb::RawScanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawScanResponse>>(PrepareAsyncRawScanRaw(context, request, cq));
    }
    ::grpc::Status RawDeleteRange(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRangeRequest& request, ::kvrpcpb::RawDeleteRangeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawDeleteRangeResponse>> AsyncRawDeleteRange(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawDeleteRangeResponse>>(AsyncRawDeleteRangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawDeleteRangeResponse>> PrepareAsyncRawDeleteRange(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawDeleteRangeResponse>>(PrepareAsyncRawDeleteRangeRaw(context, request, cq));
    }
    ::grpc::Status RawBatchScan(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchScanRequest& request, ::kvrpcpb::RawBatchScanResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchScanResponse>> AsyncRawBatchScan(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchScanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchScanResponse>>(AsyncRawBatchScanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchScanResponse>> PrepareAsyncRawBatchScan(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchScanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchScanResponse>>(PrepareAsyncRawBatchScanRaw(context, request, cq));
    }
    ::grpc::Status Coprocessor(::grpc::ClientContext* context, const ::coprocessor::Request& request, ::coprocessor::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coprocessor::Response>> AsyncCoprocessor(::grpc::ClientContext* context, const ::coprocessor::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coprocessor::Response>>(AsyncCoprocessorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coprocessor::Response>> PrepareAsyncCoprocessor(::grpc::ClientContext* context, const ::coprocessor::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coprocessor::Response>>(PrepareAsyncCoprocessorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::coprocessor::Response>> CoprocessorStream(::grpc::ClientContext* context, const ::coprocessor::Request& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::coprocessor::Response>>(CoprocessorStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::coprocessor::Response>> AsyncCoprocessorStream(::grpc::ClientContext* context, const ::coprocessor::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::coprocessor::Response>>(AsyncCoprocessorStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::coprocessor::Response>> PrepareAsyncCoprocessorStream(::grpc::ClientContext* context, const ::coprocessor::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::coprocessor::Response>>(PrepareAsyncCoprocessorStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::raft_serverpb::RaftMessage>> Raft(::grpc::ClientContext* context, ::raft_serverpb::Done* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::raft_serverpb::RaftMessage>>(RaftRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::raft_serverpb::RaftMessage>> AsyncRaft(::grpc::ClientContext* context, ::raft_serverpb::Done* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::raft_serverpb::RaftMessage>>(AsyncRaftRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::raft_serverpb::RaftMessage>> PrepareAsyncRaft(::grpc::ClientContext* context, ::raft_serverpb::Done* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::raft_serverpb::RaftMessage>>(PrepareAsyncRaftRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::raft_serverpb::SnapshotChunk>> Snapshot(::grpc::ClientContext* context, ::raft_serverpb::Done* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::raft_serverpb::SnapshotChunk>>(SnapshotRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::raft_serverpb::SnapshotChunk>> AsyncSnapshot(::grpc::ClientContext* context, ::raft_serverpb::Done* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::raft_serverpb::SnapshotChunk>>(AsyncSnapshotRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::raft_serverpb::SnapshotChunk>> PrepareAsyncSnapshot(::grpc::ClientContext* context, ::raft_serverpb::Done* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::raft_serverpb::SnapshotChunk>>(PrepareAsyncSnapshotRaw(context, response, cq));
    }
    ::grpc::Status SplitRegion(::grpc::ClientContext* context, const ::kvrpcpb::SplitRegionRequest& request, ::kvrpcpb::SplitRegionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::SplitRegionResponse>> AsyncSplitRegion(::grpc::ClientContext* context, const ::kvrpcpb::SplitRegionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::SplitRegionResponse>>(AsyncSplitRegionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::SplitRegionResponse>> PrepareAsyncSplitRegion(::grpc::ClientContext* context, const ::kvrpcpb::SplitRegionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::SplitRegionResponse>>(PrepareAsyncSplitRegionRaw(context, request, cq));
    }
    ::grpc::Status MvccGetByKey(::grpc::ClientContext* context, const ::kvrpcpb::MvccGetByKeyRequest& request, ::kvrpcpb::MvccGetByKeyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::MvccGetByKeyResponse>> AsyncMvccGetByKey(::grpc::ClientContext* context, const ::kvrpcpb::MvccGetByKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::MvccGetByKeyResponse>>(AsyncMvccGetByKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::MvccGetByKeyResponse>> PrepareAsyncMvccGetByKey(::grpc::ClientContext* context, const ::kvrpcpb::MvccGetByKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::MvccGetByKeyResponse>>(PrepareAsyncMvccGetByKeyRaw(context, request, cq));
    }
    ::grpc::Status MvccGetByStartTs(::grpc::ClientContext* context, const ::kvrpcpb::MvccGetByStartTsRequest& request, ::kvrpcpb::MvccGetByStartTsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::MvccGetByStartTsResponse>> AsyncMvccGetByStartTs(::grpc::ClientContext* context, const ::kvrpcpb::MvccGetByStartTsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::MvccGetByStartTsResponse>>(AsyncMvccGetByStartTsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::MvccGetByStartTsResponse>> PrepareAsyncMvccGetByStartTs(::grpc::ClientContext* context, const ::kvrpcpb::MvccGetByStartTsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::kvrpcpb::MvccGetByStartTsResponse>>(PrepareAsyncMvccGetByStartTsRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::GetResponse>* AsyncKvGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::GetResponse>* PrepareAsyncKvGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::ScanResponse>* AsyncKvScanRaw(::grpc::ClientContext* context, const ::kvrpcpb::ScanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::ScanResponse>* PrepareAsyncKvScanRaw(::grpc::ClientContext* context, const ::kvrpcpb::ScanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::PrewriteResponse>* AsyncKvPrewriteRaw(::grpc::ClientContext* context, const ::kvrpcpb::PrewriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::PrewriteResponse>* PrepareAsyncKvPrewriteRaw(::grpc::ClientContext* context, const ::kvrpcpb::PrewriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::CommitResponse>* AsyncKvCommitRaw(::grpc::ClientContext* context, const ::kvrpcpb::CommitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::CommitResponse>* PrepareAsyncKvCommitRaw(::grpc::ClientContext* context, const ::kvrpcpb::CommitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::ImportResponse>* AsyncKvImportRaw(::grpc::ClientContext* context, const ::kvrpcpb::ImportRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::ImportResponse>* PrepareAsyncKvImportRaw(::grpc::ClientContext* context, const ::kvrpcpb::ImportRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::CleanupResponse>* AsyncKvCleanupRaw(::grpc::ClientContext* context, const ::kvrpcpb::CleanupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::CleanupResponse>* PrepareAsyncKvCleanupRaw(::grpc::ClientContext* context, const ::kvrpcpb::CleanupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::BatchGetResponse>* AsyncKvBatchGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::BatchGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::BatchGetResponse>* PrepareAsyncKvBatchGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::BatchGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::BatchRollbackResponse>* AsyncKvBatchRollbackRaw(::grpc::ClientContext* context, const ::kvrpcpb::BatchRollbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::BatchRollbackResponse>* PrepareAsyncKvBatchRollbackRaw(::grpc::ClientContext* context, const ::kvrpcpb::BatchRollbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::ScanLockResponse>* AsyncKvScanLockRaw(::grpc::ClientContext* context, const ::kvrpcpb::ScanLockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::ScanLockResponse>* PrepareAsyncKvScanLockRaw(::grpc::ClientContext* context, const ::kvrpcpb::ScanLockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::ResolveLockResponse>* AsyncKvResolveLockRaw(::grpc::ClientContext* context, const ::kvrpcpb::ResolveLockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::ResolveLockResponse>* PrepareAsyncKvResolveLockRaw(::grpc::ClientContext* context, const ::kvrpcpb::ResolveLockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::GCResponse>* AsyncKvGCRaw(::grpc::ClientContext* context, const ::kvrpcpb::GCRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::GCResponse>* PrepareAsyncKvGCRaw(::grpc::ClientContext* context, const ::kvrpcpb::GCRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::DeleteRangeResponse>* AsyncKvDeleteRangeRaw(::grpc::ClientContext* context, const ::kvrpcpb::DeleteRangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::DeleteRangeResponse>* PrepareAsyncKvDeleteRangeRaw(::grpc::ClientContext* context, const ::kvrpcpb::DeleteRangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawGetResponse>* AsyncRawGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawGetResponse>* PrepareAsyncRawGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchGetResponse>* AsyncRawBatchGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchGetResponse>* PrepareAsyncRawBatchGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawPutResponse>* AsyncRawPutRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawPutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawPutResponse>* PrepareAsyncRawPutRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawPutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchPutResponse>* AsyncRawBatchPutRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchPutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchPutResponse>* PrepareAsyncRawBatchPutRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchPutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawDeleteResponse>* AsyncRawDeleteRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawDeleteResponse>* PrepareAsyncRawDeleteRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchDeleteResponse>* AsyncRawBatchDeleteRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchDeleteResponse>* PrepareAsyncRawBatchDeleteRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchDeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawScanResponse>* AsyncRawScanRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawScanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawScanResponse>* PrepareAsyncRawScanRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawScanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawDeleteRangeResponse>* AsyncRawDeleteRangeRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawDeleteRangeResponse>* PrepareAsyncRawDeleteRangeRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchScanResponse>* AsyncRawBatchScanRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchScanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchScanResponse>* PrepareAsyncRawBatchScanRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchScanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::coprocessor::Response>* AsyncCoprocessorRaw(::grpc::ClientContext* context, const ::coprocessor::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::coprocessor::Response>* PrepareAsyncCoprocessorRaw(::grpc::ClientContext* context, const ::coprocessor::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::coprocessor::Response>* CoprocessorStreamRaw(::grpc::ClientContext* context, const ::coprocessor::Request& request) override;
    ::grpc::ClientAsyncReader< ::coprocessor::Response>* AsyncCoprocessorStreamRaw(::grpc::ClientContext* context, const ::coprocessor::Request& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::coprocessor::Response>* PrepareAsyncCoprocessorStreamRaw(::grpc::ClientContext* context, const ::coprocessor::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::raft_serverpb::RaftMessage>* RaftRaw(::grpc::ClientContext* context, ::raft_serverpb::Done* response) override;
    ::grpc::ClientAsyncWriter< ::raft_serverpb::RaftMessage>* AsyncRaftRaw(::grpc::ClientContext* context, ::raft_serverpb::Done* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::raft_serverpb::RaftMessage>* PrepareAsyncRaftRaw(::grpc::ClientContext* context, ::raft_serverpb::Done* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::raft_serverpb::SnapshotChunk>* SnapshotRaw(::grpc::ClientContext* context, ::raft_serverpb::Done* response) override;
    ::grpc::ClientAsyncWriter< ::raft_serverpb::SnapshotChunk>* AsyncSnapshotRaw(::grpc::ClientContext* context, ::raft_serverpb::Done* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::raft_serverpb::SnapshotChunk>* PrepareAsyncSnapshotRaw(::grpc::ClientContext* context, ::raft_serverpb::Done* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::SplitRegionResponse>* AsyncSplitRegionRaw(::grpc::ClientContext* context, const ::kvrpcpb::SplitRegionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::SplitRegionResponse>* PrepareAsyncSplitRegionRaw(::grpc::ClientContext* context, const ::kvrpcpb::SplitRegionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::MvccGetByKeyResponse>* AsyncMvccGetByKeyRaw(::grpc::ClientContext* context, const ::kvrpcpb::MvccGetByKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::MvccGetByKeyResponse>* PrepareAsyncMvccGetByKeyRaw(::grpc::ClientContext* context, const ::kvrpcpb::MvccGetByKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::MvccGetByStartTsResponse>* AsyncMvccGetByStartTsRaw(::grpc::ClientContext* context, const ::kvrpcpb::MvccGetByStartTsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::kvrpcpb::MvccGetByStartTsResponse>* PrepareAsyncMvccGetByStartTsRaw(::grpc::ClientContext* context, const ::kvrpcpb::MvccGetByStartTsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_KvGet_;
    const ::grpc::internal::RpcMethod rpcmethod_KvScan_;
    const ::grpc::internal::RpcMethod rpcmethod_KvPrewrite_;
    const ::grpc::internal::RpcMethod rpcmethod_KvCommit_;
    const ::grpc::internal::RpcMethod rpcmethod_KvImport_;
    const ::grpc::internal::RpcMethod rpcmethod_KvCleanup_;
    const ::grpc::internal::RpcMethod rpcmethod_KvBatchGet_;
    const ::grpc::internal::RpcMethod rpcmethod_KvBatchRollback_;
    const ::grpc::internal::RpcMethod rpcmethod_KvScanLock_;
    const ::grpc::internal::RpcMethod rpcmethod_KvResolveLock_;
    const ::grpc::internal::RpcMethod rpcmethod_KvGC_;
    const ::grpc::internal::RpcMethod rpcmethod_KvDeleteRange_;
    const ::grpc::internal::RpcMethod rpcmethod_RawGet_;
    const ::grpc::internal::RpcMethod rpcmethod_RawBatchGet_;
    const ::grpc::internal::RpcMethod rpcmethod_RawPut_;
    const ::grpc::internal::RpcMethod rpcmethod_RawBatchPut_;
    const ::grpc::internal::RpcMethod rpcmethod_RawDelete_;
    const ::grpc::internal::RpcMethod rpcmethod_RawBatchDelete_;
    const ::grpc::internal::RpcMethod rpcmethod_RawScan_;
    const ::grpc::internal::RpcMethod rpcmethod_RawDeleteRange_;
    const ::grpc::internal::RpcMethod rpcmethod_RawBatchScan_;
    const ::grpc::internal::RpcMethod rpcmethod_Coprocessor_;
    const ::grpc::internal::RpcMethod rpcmethod_CoprocessorStream_;
    const ::grpc::internal::RpcMethod rpcmethod_Raft_;
    const ::grpc::internal::RpcMethod rpcmethod_Snapshot_;
    const ::grpc::internal::RpcMethod rpcmethod_SplitRegion_;
    const ::grpc::internal::RpcMethod rpcmethod_MvccGetByKey_;
    const ::grpc::internal::RpcMethod rpcmethod_MvccGetByStartTs_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // KV commands with mvcc/txn supported.
    virtual ::grpc::Status KvGet(::grpc::ServerContext* context, const ::kvrpcpb::GetRequest* request, ::kvrpcpb::GetResponse* response);
    virtual ::grpc::Status KvScan(::grpc::ServerContext* context, const ::kvrpcpb::ScanRequest* request, ::kvrpcpb::ScanResponse* response);
    virtual ::grpc::Status KvPrewrite(::grpc::ServerContext* context, const ::kvrpcpb::PrewriteRequest* request, ::kvrpcpb::PrewriteResponse* response);
    virtual ::grpc::Status KvCommit(::grpc::ServerContext* context, const ::kvrpcpb::CommitRequest* request, ::kvrpcpb::CommitResponse* response);
    virtual ::grpc::Status KvImport(::grpc::ServerContext* context, const ::kvrpcpb::ImportRequest* request, ::kvrpcpb::ImportResponse* response);
    virtual ::grpc::Status KvCleanup(::grpc::ServerContext* context, const ::kvrpcpb::CleanupRequest* request, ::kvrpcpb::CleanupResponse* response);
    virtual ::grpc::Status KvBatchGet(::grpc::ServerContext* context, const ::kvrpcpb::BatchGetRequest* request, ::kvrpcpb::BatchGetResponse* response);
    virtual ::grpc::Status KvBatchRollback(::grpc::ServerContext* context, const ::kvrpcpb::BatchRollbackRequest* request, ::kvrpcpb::BatchRollbackResponse* response);
    virtual ::grpc::Status KvScanLock(::grpc::ServerContext* context, const ::kvrpcpb::ScanLockRequest* request, ::kvrpcpb::ScanLockResponse* response);
    virtual ::grpc::Status KvResolveLock(::grpc::ServerContext* context, const ::kvrpcpb::ResolveLockRequest* request, ::kvrpcpb::ResolveLockResponse* response);
    virtual ::grpc::Status KvGC(::grpc::ServerContext* context, const ::kvrpcpb::GCRequest* request, ::kvrpcpb::GCResponse* response);
    virtual ::grpc::Status KvDeleteRange(::grpc::ServerContext* context, const ::kvrpcpb::DeleteRangeRequest* request, ::kvrpcpb::DeleteRangeResponse* response);
    // RawKV commands.
    virtual ::grpc::Status RawGet(::grpc::ServerContext* context, const ::kvrpcpb::RawGetRequest* request, ::kvrpcpb::RawGetResponse* response);
    virtual ::grpc::Status RawBatchGet(::grpc::ServerContext* context, const ::kvrpcpb::RawBatchGetRequest* request, ::kvrpcpb::RawBatchGetResponse* response);
    virtual ::grpc::Status RawPut(::grpc::ServerContext* context, const ::kvrpcpb::RawPutRequest* request, ::kvrpcpb::RawPutResponse* response);
    virtual ::grpc::Status RawBatchPut(::grpc::ServerContext* context, const ::kvrpcpb::RawBatchPutRequest* request, ::kvrpcpb::RawBatchPutResponse* response);
    virtual ::grpc::Status RawDelete(::grpc::ServerContext* context, const ::kvrpcpb::RawDeleteRequest* request, ::kvrpcpb::RawDeleteResponse* response);
    virtual ::grpc::Status RawBatchDelete(::grpc::ServerContext* context, const ::kvrpcpb::RawBatchDeleteRequest* request, ::kvrpcpb::RawBatchDeleteResponse* response);
    virtual ::grpc::Status RawScan(::grpc::ServerContext* context, const ::kvrpcpb::RawScanRequest* request, ::kvrpcpb::RawScanResponse* response);
    virtual ::grpc::Status RawDeleteRange(::grpc::ServerContext* context, const ::kvrpcpb::RawDeleteRangeRequest* request, ::kvrpcpb::RawDeleteRangeResponse* response);
    virtual ::grpc::Status RawBatchScan(::grpc::ServerContext* context, const ::kvrpcpb::RawBatchScanRequest* request, ::kvrpcpb::RawBatchScanResponse* response);
    // SQL push down commands.
    virtual ::grpc::Status Coprocessor(::grpc::ServerContext* context, const ::coprocessor::Request* request, ::coprocessor::Response* response);
    virtual ::grpc::Status CoprocessorStream(::grpc::ServerContext* context, const ::coprocessor::Request* request, ::grpc::ServerWriter< ::coprocessor::Response>* writer);
    // Raft commands (tikv <-> tikv).
    virtual ::grpc::Status Raft(::grpc::ServerContext* context, ::grpc::ServerReader< ::raft_serverpb::RaftMessage>* reader, ::raft_serverpb::Done* response);
    virtual ::grpc::Status Snapshot(::grpc::ServerContext* context, ::grpc::ServerReader< ::raft_serverpb::SnapshotChunk>* reader, ::raft_serverpb::Done* response);
    // Region commands.
    virtual ::grpc::Status SplitRegion(::grpc::ServerContext* context, const ::kvrpcpb::SplitRegionRequest* request, ::kvrpcpb::SplitRegionResponse* response);
    // transaction debugger commands.
    virtual ::grpc::Status MvccGetByKey(::grpc::ServerContext* context, const ::kvrpcpb::MvccGetByKeyRequest* request, ::kvrpcpb::MvccGetByKeyResponse* response);
    virtual ::grpc::Status MvccGetByStartTs(::grpc::ServerContext* context, const ::kvrpcpb::MvccGetByStartTsRequest* request, ::kvrpcpb::MvccGetByStartTsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_KvGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_KvGet() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_KvGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvGet(::grpc::ServerContext* context, const ::kvrpcpb::GetRequest* request, ::kvrpcpb::GetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKvGet(::grpc::ServerContext* context, ::kvrpcpb::GetRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvrpcpb::GetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_KvScan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_KvScan() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_KvScan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvScan(::grpc::ServerContext* context, const ::kvrpcpb::ScanRequest* request, ::kvrpcpb::ScanResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKvScan(::grpc::ServerContext* context, ::kvrpcpb::ScanRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvrpcpb::ScanResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_KvPrewrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_KvPrewrite() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_KvPrewrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvPrewrite(::grpc::ServerContext* context, const ::kvrpcpb::PrewriteRequest* request, ::kvrpcpb::PrewriteResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKvPrewrite(::grpc::ServerContext* context, ::kvrpcpb::PrewriteRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvrpcpb::PrewriteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_KvCommit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_KvCommit() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_KvCommit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvCommit(::grpc::ServerContext* context, const ::kvrpcpb::CommitRequest* request, ::kvrpcpb::CommitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKvCommit(::grpc::ServerContext* context, ::kvrpcpb::CommitRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvrpcpb::CommitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_KvImport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_KvImport() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_KvImport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvImport(::grpc::ServerContext* context, const ::kvrpcpb::ImportRequest* request, ::kvrpcpb::ImportResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKvImport(::grpc::ServerContext* context, ::kvrpcpb::ImportRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvrpcpb::ImportResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_KvCleanup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_KvCleanup() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_KvCleanup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvCleanup(::grpc::ServerContext* context, const ::kvrpcpb::CleanupRequest* request, ::kvrpcpb::CleanupResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKvCleanup(::grpc::ServerContext* context, ::kvrpcpb::CleanupRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvrpcpb::CleanupResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_KvBatchGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_KvBatchGet() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_KvBatchGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvBatchGet(::grpc::ServerContext* context, const ::kvrpcpb::BatchGetRequest* request, ::kvrpcpb::BatchGetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKvBatchGet(::grpc::ServerContext* context, ::kvrpcpb::BatchGetRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvrpcpb::BatchGetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_KvBatchRollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_KvBatchRollback() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_KvBatchRollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvBatchRollback(::grpc::ServerContext* context, const ::kvrpcpb::BatchRollbackRequest* request, ::kvrpcpb::BatchRollbackResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKvBatchRollback(::grpc::ServerContext* context, ::kvrpcpb::BatchRollbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvrpcpb::BatchRollbackResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_KvScanLock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_KvScanLock() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_KvScanLock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvScanLock(::grpc::ServerContext* context, const ::kvrpcpb::ScanLockRequest* request, ::kvrpcpb::ScanLockResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKvScanLock(::grpc::ServerContext* context, ::kvrpcpb::ScanLockRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvrpcpb::ScanLockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_KvResolveLock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_KvResolveLock() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_KvResolveLock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvResolveLock(::grpc::ServerContext* context, const ::kvrpcpb::ResolveLockRequest* request, ::kvrpcpb::ResolveLockResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKvResolveLock(::grpc::ServerContext* context, ::kvrpcpb::ResolveLockRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvrpcpb::ResolveLockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_KvGC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_KvGC() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_KvGC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvGC(::grpc::ServerContext* context, const ::kvrpcpb::GCRequest* request, ::kvrpcpb::GCResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKvGC(::grpc::ServerContext* context, ::kvrpcpb::GCRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvrpcpb::GCResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_KvDeleteRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_KvDeleteRange() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_KvDeleteRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvDeleteRange(::grpc::ServerContext* context, const ::kvrpcpb::DeleteRangeRequest* request, ::kvrpcpb::DeleteRangeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKvDeleteRange(::grpc::ServerContext* context, ::kvrpcpb::DeleteRangeRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvrpcpb::DeleteRangeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RawGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RawGet() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_RawGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawGet(::grpc::ServerContext* context, const ::kvrpcpb::RawGetRequest* request, ::kvrpcpb::RawGetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRawGet(::grpc::ServerContext* context, ::kvrpcpb::RawGetRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvrpcpb::RawGetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RawBatchGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RawBatchGet() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_RawBatchGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawBatchGet(::grpc::ServerContext* context, const ::kvrpcpb::RawBatchGetRequest* request, ::kvrpcpb::RawBatchGetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRawBatchGet(::grpc::ServerContext* context, ::kvrpcpb::RawBatchGetRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvrpcpb::RawBatchGetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RawPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RawPut() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_RawPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawPut(::grpc::ServerContext* context, const ::kvrpcpb::RawPutRequest* request, ::kvrpcpb::RawPutResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRawPut(::grpc::ServerContext* context, ::kvrpcpb::RawPutRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvrpcpb::RawPutResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RawBatchPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RawBatchPut() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_RawBatchPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawBatchPut(::grpc::ServerContext* context, const ::kvrpcpb::RawBatchPutRequest* request, ::kvrpcpb::RawBatchPutResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRawBatchPut(::grpc::ServerContext* context, ::kvrpcpb::RawBatchPutRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvrpcpb::RawBatchPutResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RawDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RawDelete() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_RawDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawDelete(::grpc::ServerContext* context, const ::kvrpcpb::RawDeleteRequest* request, ::kvrpcpb::RawDeleteResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRawDelete(::grpc::ServerContext* context, ::kvrpcpb::RawDeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvrpcpb::RawDeleteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RawBatchDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RawBatchDelete() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_RawBatchDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawBatchDelete(::grpc::ServerContext* context, const ::kvrpcpb::RawBatchDeleteRequest* request, ::kvrpcpb::RawBatchDeleteResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRawBatchDelete(::grpc::ServerContext* context, ::kvrpcpb::RawBatchDeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvrpcpb::RawBatchDeleteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RawScan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RawScan() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_RawScan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawScan(::grpc::ServerContext* context, const ::kvrpcpb::RawScanRequest* request, ::kvrpcpb::RawScanResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRawScan(::grpc::ServerContext* context, ::kvrpcpb::RawScanRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvrpcpb::RawScanResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RawDeleteRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RawDeleteRange() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_RawDeleteRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawDeleteRange(::grpc::ServerContext* context, const ::kvrpcpb::RawDeleteRangeRequest* request, ::kvrpcpb::RawDeleteRangeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRawDeleteRange(::grpc::ServerContext* context, ::kvrpcpb::RawDeleteRangeRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvrpcpb::RawDeleteRangeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RawBatchScan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RawBatchScan() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_RawBatchScan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawBatchScan(::grpc::ServerContext* context, const ::kvrpcpb::RawBatchScanRequest* request, ::kvrpcpb::RawBatchScanResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRawBatchScan(::grpc::ServerContext* context, ::kvrpcpb::RawBatchScanRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvrpcpb::RawBatchScanResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Coprocessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Coprocessor() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_Coprocessor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Coprocessor(::grpc::ServerContext* context, const ::coprocessor::Request* request, ::coprocessor::Response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCoprocessor(::grpc::ServerContext* context, ::coprocessor::Request* request, ::grpc::ServerAsyncResponseWriter< ::coprocessor::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CoprocessorStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CoprocessorStream() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_CoprocessorStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CoprocessorStream(::grpc::ServerContext* context, const ::coprocessor::Request* request, ::grpc::ServerWriter< ::coprocessor::Response>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCoprocessorStream(::grpc::ServerContext* context, ::coprocessor::Request* request, ::grpc::ServerAsyncWriter< ::coprocessor::Response>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(22, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Raft : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Raft() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_Raft() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Raft(::grpc::ServerContext* context, ::grpc::ServerReader< ::raft_serverpb::RaftMessage>* reader, ::raft_serverpb::Done* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRaft(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::raft_serverpb::Done, ::raft_serverpb::RaftMessage>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(23, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Snapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Snapshot() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_Snapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Snapshot(::grpc::ServerContext* context, ::grpc::ServerReader< ::raft_serverpb::SnapshotChunk>* reader, ::raft_serverpb::Done* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSnapshot(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::raft_serverpb::Done, ::raft_serverpb::SnapshotChunk>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(24, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SplitRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SplitRegion() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_SplitRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SplitRegion(::grpc::ServerContext* context, const ::kvrpcpb::SplitRegionRequest* request, ::kvrpcpb::SplitRegionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSplitRegion(::grpc::ServerContext* context, ::kvrpcpb::SplitRegionRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvrpcpb::SplitRegionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MvccGetByKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_MvccGetByKey() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_MvccGetByKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MvccGetByKey(::grpc::ServerContext* context, const ::kvrpcpb::MvccGetByKeyRequest* request, ::kvrpcpb::MvccGetByKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMvccGetByKey(::grpc::ServerContext* context, ::kvrpcpb::MvccGetByKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvrpcpb::MvccGetByKeyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MvccGetByStartTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_MvccGetByStartTs() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_MvccGetByStartTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MvccGetByStartTs(::grpc::ServerContext* context, const ::kvrpcpb::MvccGetByStartTsRequest* request, ::kvrpcpb::MvccGetByStartTsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMvccGetByStartTs(::grpc::ServerContext* context, ::kvrpcpb::MvccGetByStartTsRequest* request, ::grpc::ServerAsyncResponseWriter< ::kvrpcpb::MvccGetByStartTsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_KvGet<WithAsyncMethod_KvScan<WithAsyncMethod_KvPrewrite<WithAsyncMethod_KvCommit<WithAsyncMethod_KvImport<WithAsyncMethod_KvCleanup<WithAsyncMethod_KvBatchGet<WithAsyncMethod_KvBatchRollback<WithAsyncMethod_KvScanLock<WithAsyncMethod_KvResolveLock<WithAsyncMethod_KvGC<WithAsyncMethod_KvDeleteRange<WithAsyncMethod_RawGet<WithAsyncMethod_RawBatchGet<WithAsyncMethod_RawPut<WithAsyncMethod_RawBatchPut<WithAsyncMethod_RawDelete<WithAsyncMethod_RawBatchDelete<WithAsyncMethod_RawScan<WithAsyncMethod_RawDeleteRange<WithAsyncMethod_RawBatchScan<WithAsyncMethod_Coprocessor<WithAsyncMethod_CoprocessorStream<WithAsyncMethod_Raft<WithAsyncMethod_Snapshot<WithAsyncMethod_SplitRegion<WithAsyncMethod_MvccGetByKey<WithAsyncMethod_MvccGetByStartTs<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_KvGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_KvGet() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_KvGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvGet(::grpc::ServerContext* context, const ::kvrpcpb::GetRequest* request, ::kvrpcpb::GetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_KvScan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_KvScan() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_KvScan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvScan(::grpc::ServerContext* context, const ::kvrpcpb::ScanRequest* request, ::kvrpcpb::ScanResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_KvPrewrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_KvPrewrite() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_KvPrewrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvPrewrite(::grpc::ServerContext* context, const ::kvrpcpb::PrewriteRequest* request, ::kvrpcpb::PrewriteResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_KvCommit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_KvCommit() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_KvCommit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvCommit(::grpc::ServerContext* context, const ::kvrpcpb::CommitRequest* request, ::kvrpcpb::CommitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_KvImport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_KvImport() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_KvImport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvImport(::grpc::ServerContext* context, const ::kvrpcpb::ImportRequest* request, ::kvrpcpb::ImportResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_KvCleanup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_KvCleanup() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_KvCleanup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvCleanup(::grpc::ServerContext* context, const ::kvrpcpb::CleanupRequest* request, ::kvrpcpb::CleanupResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_KvBatchGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_KvBatchGet() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_KvBatchGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvBatchGet(::grpc::ServerContext* context, const ::kvrpcpb::BatchGetRequest* request, ::kvrpcpb::BatchGetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_KvBatchRollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_KvBatchRollback() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_KvBatchRollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvBatchRollback(::grpc::ServerContext* context, const ::kvrpcpb::BatchRollbackRequest* request, ::kvrpcpb::BatchRollbackResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_KvScanLock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_KvScanLock() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_KvScanLock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvScanLock(::grpc::ServerContext* context, const ::kvrpcpb::ScanLockRequest* request, ::kvrpcpb::ScanLockResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_KvResolveLock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_KvResolveLock() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_KvResolveLock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvResolveLock(::grpc::ServerContext* context, const ::kvrpcpb::ResolveLockRequest* request, ::kvrpcpb::ResolveLockResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_KvGC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_KvGC() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_KvGC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvGC(::grpc::ServerContext* context, const ::kvrpcpb::GCRequest* request, ::kvrpcpb::GCResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_KvDeleteRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_KvDeleteRange() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_KvDeleteRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvDeleteRange(::grpc::ServerContext* context, const ::kvrpcpb::DeleteRangeRequest* request, ::kvrpcpb::DeleteRangeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RawGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RawGet() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_RawGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawGet(::grpc::ServerContext* context, const ::kvrpcpb::RawGetRequest* request, ::kvrpcpb::RawGetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RawBatchGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RawBatchGet() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_RawBatchGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawBatchGet(::grpc::ServerContext* context, const ::kvrpcpb::RawBatchGetRequest* request, ::kvrpcpb::RawBatchGetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RawPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RawPut() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_RawPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawPut(::grpc::ServerContext* context, const ::kvrpcpb::RawPutRequest* request, ::kvrpcpb::RawPutResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RawBatchPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RawBatchPut() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_RawBatchPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawBatchPut(::grpc::ServerContext* context, const ::kvrpcpb::RawBatchPutRequest* request, ::kvrpcpb::RawBatchPutResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RawDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RawDelete() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_RawDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawDelete(::grpc::ServerContext* context, const ::kvrpcpb::RawDeleteRequest* request, ::kvrpcpb::RawDeleteResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RawBatchDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RawBatchDelete() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_RawBatchDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawBatchDelete(::grpc::ServerContext* context, const ::kvrpcpb::RawBatchDeleteRequest* request, ::kvrpcpb::RawBatchDeleteResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RawScan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RawScan() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_RawScan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawScan(::grpc::ServerContext* context, const ::kvrpcpb::RawScanRequest* request, ::kvrpcpb::RawScanResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RawDeleteRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RawDeleteRange() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_RawDeleteRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawDeleteRange(::grpc::ServerContext* context, const ::kvrpcpb::RawDeleteRangeRequest* request, ::kvrpcpb::RawDeleteRangeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RawBatchScan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RawBatchScan() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_RawBatchScan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawBatchScan(::grpc::ServerContext* context, const ::kvrpcpb::RawBatchScanRequest* request, ::kvrpcpb::RawBatchScanResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Coprocessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Coprocessor() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_Coprocessor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Coprocessor(::grpc::ServerContext* context, const ::coprocessor::Request* request, ::coprocessor::Response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CoprocessorStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CoprocessorStream() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_CoprocessorStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CoprocessorStream(::grpc::ServerContext* context, const ::coprocessor::Request* request, ::grpc::ServerWriter< ::coprocessor::Response>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Raft : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Raft() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_Raft() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Raft(::grpc::ServerContext* context, ::grpc::ServerReader< ::raft_serverpb::RaftMessage>* reader, ::raft_serverpb::Done* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Snapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Snapshot() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_Snapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Snapshot(::grpc::ServerContext* context, ::grpc::ServerReader< ::raft_serverpb::SnapshotChunk>* reader, ::raft_serverpb::Done* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SplitRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SplitRegion() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_SplitRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SplitRegion(::grpc::ServerContext* context, const ::kvrpcpb::SplitRegionRequest* request, ::kvrpcpb::SplitRegionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MvccGetByKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_MvccGetByKey() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_MvccGetByKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MvccGetByKey(::grpc::ServerContext* context, const ::kvrpcpb::MvccGetByKeyRequest* request, ::kvrpcpb::MvccGetByKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MvccGetByStartTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_MvccGetByStartTs() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_MvccGetByStartTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MvccGetByStartTs(::grpc::ServerContext* context, const ::kvrpcpb::MvccGetByStartTsRequest* request, ::kvrpcpb::MvccGetByStartTsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_KvGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_KvGet() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_KvGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvGet(::grpc::ServerContext* context, const ::kvrpcpb::GetRequest* request, ::kvrpcpb::GetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKvGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_KvScan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_KvScan() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_KvScan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvScan(::grpc::ServerContext* context, const ::kvrpcpb::ScanRequest* request, ::kvrpcpb::ScanResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKvScan(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_KvPrewrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_KvPrewrite() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_KvPrewrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvPrewrite(::grpc::ServerContext* context, const ::kvrpcpb::PrewriteRequest* request, ::kvrpcpb::PrewriteResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKvPrewrite(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_KvCommit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_KvCommit() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_KvCommit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvCommit(::grpc::ServerContext* context, const ::kvrpcpb::CommitRequest* request, ::kvrpcpb::CommitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKvCommit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_KvImport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_KvImport() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_KvImport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvImport(::grpc::ServerContext* context, const ::kvrpcpb::ImportRequest* request, ::kvrpcpb::ImportResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKvImport(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_KvCleanup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_KvCleanup() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_KvCleanup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvCleanup(::grpc::ServerContext* context, const ::kvrpcpb::CleanupRequest* request, ::kvrpcpb::CleanupResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKvCleanup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_KvBatchGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_KvBatchGet() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_KvBatchGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvBatchGet(::grpc::ServerContext* context, const ::kvrpcpb::BatchGetRequest* request, ::kvrpcpb::BatchGetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKvBatchGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_KvBatchRollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_KvBatchRollback() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_KvBatchRollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvBatchRollback(::grpc::ServerContext* context, const ::kvrpcpb::BatchRollbackRequest* request, ::kvrpcpb::BatchRollbackResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKvBatchRollback(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_KvScanLock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_KvScanLock() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_KvScanLock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvScanLock(::grpc::ServerContext* context, const ::kvrpcpb::ScanLockRequest* request, ::kvrpcpb::ScanLockResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKvScanLock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_KvResolveLock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_KvResolveLock() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_KvResolveLock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvResolveLock(::grpc::ServerContext* context, const ::kvrpcpb::ResolveLockRequest* request, ::kvrpcpb::ResolveLockResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKvResolveLock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_KvGC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_KvGC() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_KvGC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvGC(::grpc::ServerContext* context, const ::kvrpcpb::GCRequest* request, ::kvrpcpb::GCResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKvGC(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_KvDeleteRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_KvDeleteRange() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_KvDeleteRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KvDeleteRange(::grpc::ServerContext* context, const ::kvrpcpb::DeleteRangeRequest* request, ::kvrpcpb::DeleteRangeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKvDeleteRange(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RawGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RawGet() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_RawGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawGet(::grpc::ServerContext* context, const ::kvrpcpb::RawGetRequest* request, ::kvrpcpb::RawGetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRawGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RawBatchGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RawBatchGet() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_RawBatchGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawBatchGet(::grpc::ServerContext* context, const ::kvrpcpb::RawBatchGetRequest* request, ::kvrpcpb::RawBatchGetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRawBatchGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RawPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RawPut() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_RawPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawPut(::grpc::ServerContext* context, const ::kvrpcpb::RawPutRequest* request, ::kvrpcpb::RawPutResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRawPut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RawBatchPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RawBatchPut() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_RawBatchPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawBatchPut(::grpc::ServerContext* context, const ::kvrpcpb::RawBatchPutRequest* request, ::kvrpcpb::RawBatchPutResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRawBatchPut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RawDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RawDelete() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_RawDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawDelete(::grpc::ServerContext* context, const ::kvrpcpb::RawDeleteRequest* request, ::kvrpcpb::RawDeleteResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRawDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RawBatchDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RawBatchDelete() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_RawBatchDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawBatchDelete(::grpc::ServerContext* context, const ::kvrpcpb::RawBatchDeleteRequest* request, ::kvrpcpb::RawBatchDeleteResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRawBatchDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RawScan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RawScan() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_RawScan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawScan(::grpc::ServerContext* context, const ::kvrpcpb::RawScanRequest* request, ::kvrpcpb::RawScanResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRawScan(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RawDeleteRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RawDeleteRange() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_RawDeleteRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawDeleteRange(::grpc::ServerContext* context, const ::kvrpcpb::RawDeleteRangeRequest* request, ::kvrpcpb::RawDeleteRangeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRawDeleteRange(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RawBatchScan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RawBatchScan() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_RawBatchScan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawBatchScan(::grpc::ServerContext* context, const ::kvrpcpb::RawBatchScanRequest* request, ::kvrpcpb::RawBatchScanResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRawBatchScan(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Coprocessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Coprocessor() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_Coprocessor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Coprocessor(::grpc::ServerContext* context, const ::coprocessor::Request* request, ::coprocessor::Response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCoprocessor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CoprocessorStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CoprocessorStream() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_CoprocessorStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CoprocessorStream(::grpc::ServerContext* context, const ::coprocessor::Request* request, ::grpc::ServerWriter< ::coprocessor::Response>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCoprocessorStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(22, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Raft : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Raft() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_Raft() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Raft(::grpc::ServerContext* context, ::grpc::ServerReader< ::raft_serverpb::RaftMessage>* reader, ::raft_serverpb::Done* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRaft(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(23, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Snapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Snapshot() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_Snapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Snapshot(::grpc::ServerContext* context, ::grpc::ServerReader< ::raft_serverpb::SnapshotChunk>* reader, ::raft_serverpb::Done* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSnapshot(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(24, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SplitRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SplitRegion() {
      ::grpc::Service::MarkMethodRaw(25);
    }
    ~WithRawMethod_SplitRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SplitRegion(::grpc::ServerContext* context, const ::kvrpcpb::SplitRegionRequest* request, ::kvrpcpb::SplitRegionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSplitRegion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MvccGetByKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_MvccGetByKey() {
      ::grpc::Service::MarkMethodRaw(26);
    }
    ~WithRawMethod_MvccGetByKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MvccGetByKey(::grpc::ServerContext* context, const ::kvrpcpb::MvccGetByKeyRequest* request, ::kvrpcpb::MvccGetByKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMvccGetByKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MvccGetByStartTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_MvccGetByStartTs() {
      ::grpc::Service::MarkMethodRaw(27);
    }
    ~WithRawMethod_MvccGetByStartTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MvccGetByStartTs(::grpc::ServerContext* context, const ::kvrpcpb::MvccGetByStartTsRequest* request, ::kvrpcpb::MvccGetByStartTsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMvccGetByStartTs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_KvGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_KvGet() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::kvrpcpb::GetRequest, ::kvrpcpb::GetResponse>(std::bind(&WithStreamedUnaryMethod_KvGet<BaseClass>::StreamedKvGet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_KvGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status KvGet(::grpc::ServerContext* context, const ::kvrpcpb::GetRequest* request, ::kvrpcpb::GetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedKvGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvrpcpb::GetRequest,::kvrpcpb::GetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_KvScan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_KvScan() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::kvrpcpb::ScanRequest, ::kvrpcpb::ScanResponse>(std::bind(&WithStreamedUnaryMethod_KvScan<BaseClass>::StreamedKvScan, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_KvScan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status KvScan(::grpc::ServerContext* context, const ::kvrpcpb::ScanRequest* request, ::kvrpcpb::ScanResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedKvScan(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvrpcpb::ScanRequest,::kvrpcpb::ScanResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_KvPrewrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_KvPrewrite() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::kvrpcpb::PrewriteRequest, ::kvrpcpb::PrewriteResponse>(std::bind(&WithStreamedUnaryMethod_KvPrewrite<BaseClass>::StreamedKvPrewrite, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_KvPrewrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status KvPrewrite(::grpc::ServerContext* context, const ::kvrpcpb::PrewriteRequest* request, ::kvrpcpb::PrewriteResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedKvPrewrite(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvrpcpb::PrewriteRequest,::kvrpcpb::PrewriteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_KvCommit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_KvCommit() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::kvrpcpb::CommitRequest, ::kvrpcpb::CommitResponse>(std::bind(&WithStreamedUnaryMethod_KvCommit<BaseClass>::StreamedKvCommit, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_KvCommit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status KvCommit(::grpc::ServerContext* context, const ::kvrpcpb::CommitRequest* request, ::kvrpcpb::CommitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedKvCommit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvrpcpb::CommitRequest,::kvrpcpb::CommitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_KvImport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_KvImport() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::kvrpcpb::ImportRequest, ::kvrpcpb::ImportResponse>(std::bind(&WithStreamedUnaryMethod_KvImport<BaseClass>::StreamedKvImport, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_KvImport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status KvImport(::grpc::ServerContext* context, const ::kvrpcpb::ImportRequest* request, ::kvrpcpb::ImportResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedKvImport(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvrpcpb::ImportRequest,::kvrpcpb::ImportResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_KvCleanup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_KvCleanup() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::kvrpcpb::CleanupRequest, ::kvrpcpb::CleanupResponse>(std::bind(&WithStreamedUnaryMethod_KvCleanup<BaseClass>::StreamedKvCleanup, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_KvCleanup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status KvCleanup(::grpc::ServerContext* context, const ::kvrpcpb::CleanupRequest* request, ::kvrpcpb::CleanupResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedKvCleanup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvrpcpb::CleanupRequest,::kvrpcpb::CleanupResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_KvBatchGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_KvBatchGet() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::kvrpcpb::BatchGetRequest, ::kvrpcpb::BatchGetResponse>(std::bind(&WithStreamedUnaryMethod_KvBatchGet<BaseClass>::StreamedKvBatchGet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_KvBatchGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status KvBatchGet(::grpc::ServerContext* context, const ::kvrpcpb::BatchGetRequest* request, ::kvrpcpb::BatchGetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedKvBatchGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvrpcpb::BatchGetRequest,::kvrpcpb::BatchGetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_KvBatchRollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_KvBatchRollback() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::kvrpcpb::BatchRollbackRequest, ::kvrpcpb::BatchRollbackResponse>(std::bind(&WithStreamedUnaryMethod_KvBatchRollback<BaseClass>::StreamedKvBatchRollback, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_KvBatchRollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status KvBatchRollback(::grpc::ServerContext* context, const ::kvrpcpb::BatchRollbackRequest* request, ::kvrpcpb::BatchRollbackResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedKvBatchRollback(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvrpcpb::BatchRollbackRequest,::kvrpcpb::BatchRollbackResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_KvScanLock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_KvScanLock() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::kvrpcpb::ScanLockRequest, ::kvrpcpb::ScanLockResponse>(std::bind(&WithStreamedUnaryMethod_KvScanLock<BaseClass>::StreamedKvScanLock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_KvScanLock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status KvScanLock(::grpc::ServerContext* context, const ::kvrpcpb::ScanLockRequest* request, ::kvrpcpb::ScanLockResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedKvScanLock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvrpcpb::ScanLockRequest,::kvrpcpb::ScanLockResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_KvResolveLock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_KvResolveLock() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::kvrpcpb::ResolveLockRequest, ::kvrpcpb::ResolveLockResponse>(std::bind(&WithStreamedUnaryMethod_KvResolveLock<BaseClass>::StreamedKvResolveLock, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_KvResolveLock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status KvResolveLock(::grpc::ServerContext* context, const ::kvrpcpb::ResolveLockRequest* request, ::kvrpcpb::ResolveLockResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedKvResolveLock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvrpcpb::ResolveLockRequest,::kvrpcpb::ResolveLockResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_KvGC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_KvGC() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::kvrpcpb::GCRequest, ::kvrpcpb::GCResponse>(std::bind(&WithStreamedUnaryMethod_KvGC<BaseClass>::StreamedKvGC, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_KvGC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status KvGC(::grpc::ServerContext* context, const ::kvrpcpb::GCRequest* request, ::kvrpcpb::GCResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedKvGC(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvrpcpb::GCRequest,::kvrpcpb::GCResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_KvDeleteRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_KvDeleteRange() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::kvrpcpb::DeleteRangeRequest, ::kvrpcpb::DeleteRangeResponse>(std::bind(&WithStreamedUnaryMethod_KvDeleteRange<BaseClass>::StreamedKvDeleteRange, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_KvDeleteRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status KvDeleteRange(::grpc::ServerContext* context, const ::kvrpcpb::DeleteRangeRequest* request, ::kvrpcpb::DeleteRangeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedKvDeleteRange(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvrpcpb::DeleteRangeRequest,::kvrpcpb::DeleteRangeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RawGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RawGet() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::kvrpcpb::RawGetRequest, ::kvrpcpb::RawGetResponse>(std::bind(&WithStreamedUnaryMethod_RawGet<BaseClass>::StreamedRawGet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RawGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RawGet(::grpc::ServerContext* context, const ::kvrpcpb::RawGetRequest* request, ::kvrpcpb::RawGetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRawGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvrpcpb::RawGetRequest,::kvrpcpb::RawGetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RawBatchGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RawBatchGet() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::kvrpcpb::RawBatchGetRequest, ::kvrpcpb::RawBatchGetResponse>(std::bind(&WithStreamedUnaryMethod_RawBatchGet<BaseClass>::StreamedRawBatchGet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RawBatchGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RawBatchGet(::grpc::ServerContext* context, const ::kvrpcpb::RawBatchGetRequest* request, ::kvrpcpb::RawBatchGetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRawBatchGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvrpcpb::RawBatchGetRequest,::kvrpcpb::RawBatchGetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RawPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RawPut() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::kvrpcpb::RawPutRequest, ::kvrpcpb::RawPutResponse>(std::bind(&WithStreamedUnaryMethod_RawPut<BaseClass>::StreamedRawPut, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RawPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RawPut(::grpc::ServerContext* context, const ::kvrpcpb::RawPutRequest* request, ::kvrpcpb::RawPutResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRawPut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvrpcpb::RawPutRequest,::kvrpcpb::RawPutResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RawBatchPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RawBatchPut() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler< ::kvrpcpb::RawBatchPutRequest, ::kvrpcpb::RawBatchPutResponse>(std::bind(&WithStreamedUnaryMethod_RawBatchPut<BaseClass>::StreamedRawBatchPut, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RawBatchPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RawBatchPut(::grpc::ServerContext* context, const ::kvrpcpb::RawBatchPutRequest* request, ::kvrpcpb::RawBatchPutResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRawBatchPut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvrpcpb::RawBatchPutRequest,::kvrpcpb::RawBatchPutResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RawDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RawDelete() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler< ::kvrpcpb::RawDeleteRequest, ::kvrpcpb::RawDeleteResponse>(std::bind(&WithStreamedUnaryMethod_RawDelete<BaseClass>::StreamedRawDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RawDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RawDelete(::grpc::ServerContext* context, const ::kvrpcpb::RawDeleteRequest* request, ::kvrpcpb::RawDeleteResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRawDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvrpcpb::RawDeleteRequest,::kvrpcpb::RawDeleteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RawBatchDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RawBatchDelete() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler< ::kvrpcpb::RawBatchDeleteRequest, ::kvrpcpb::RawBatchDeleteResponse>(std::bind(&WithStreamedUnaryMethod_RawBatchDelete<BaseClass>::StreamedRawBatchDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RawBatchDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RawBatchDelete(::grpc::ServerContext* context, const ::kvrpcpb::RawBatchDeleteRequest* request, ::kvrpcpb::RawBatchDeleteResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRawBatchDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvrpcpb::RawBatchDeleteRequest,::kvrpcpb::RawBatchDeleteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RawScan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RawScan() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler< ::kvrpcpb::RawScanRequest, ::kvrpcpb::RawScanResponse>(std::bind(&WithStreamedUnaryMethod_RawScan<BaseClass>::StreamedRawScan, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RawScan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RawScan(::grpc::ServerContext* context, const ::kvrpcpb::RawScanRequest* request, ::kvrpcpb::RawScanResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRawScan(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvrpcpb::RawScanRequest,::kvrpcpb::RawScanResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RawDeleteRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RawDeleteRange() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler< ::kvrpcpb::RawDeleteRangeRequest, ::kvrpcpb::RawDeleteRangeResponse>(std::bind(&WithStreamedUnaryMethod_RawDeleteRange<BaseClass>::StreamedRawDeleteRange, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RawDeleteRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RawDeleteRange(::grpc::ServerContext* context, const ::kvrpcpb::RawDeleteRangeRequest* request, ::kvrpcpb::RawDeleteRangeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRawDeleteRange(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvrpcpb::RawDeleteRangeRequest,::kvrpcpb::RawDeleteRangeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RawBatchScan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RawBatchScan() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler< ::kvrpcpb::RawBatchScanRequest, ::kvrpcpb::RawBatchScanResponse>(std::bind(&WithStreamedUnaryMethod_RawBatchScan<BaseClass>::StreamedRawBatchScan, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RawBatchScan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RawBatchScan(::grpc::ServerContext* context, const ::kvrpcpb::RawBatchScanRequest* request, ::kvrpcpb::RawBatchScanResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRawBatchScan(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvrpcpb::RawBatchScanRequest,::kvrpcpb::RawBatchScanResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Coprocessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Coprocessor() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler< ::coprocessor::Request, ::coprocessor::Response>(std::bind(&WithStreamedUnaryMethod_Coprocessor<BaseClass>::StreamedCoprocessor, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Coprocessor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Coprocessor(::grpc::ServerContext* context, const ::coprocessor::Request* request, ::coprocessor::Response* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCoprocessor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::coprocessor::Request,::coprocessor::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SplitRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SplitRegion() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::StreamedUnaryHandler< ::kvrpcpb::SplitRegionRequest, ::kvrpcpb::SplitRegionResponse>(std::bind(&WithStreamedUnaryMethod_SplitRegion<BaseClass>::StreamedSplitRegion, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SplitRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SplitRegion(::grpc::ServerContext* context, const ::kvrpcpb::SplitRegionRequest* request, ::kvrpcpb::SplitRegionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSplitRegion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvrpcpb::SplitRegionRequest,::kvrpcpb::SplitRegionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MvccGetByKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_MvccGetByKey() {
      ::grpc::Service::MarkMethodStreamed(26,
        new ::grpc::internal::StreamedUnaryHandler< ::kvrpcpb::MvccGetByKeyRequest, ::kvrpcpb::MvccGetByKeyResponse>(std::bind(&WithStreamedUnaryMethod_MvccGetByKey<BaseClass>::StreamedMvccGetByKey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_MvccGetByKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MvccGetByKey(::grpc::ServerContext* context, const ::kvrpcpb::MvccGetByKeyRequest* request, ::kvrpcpb::MvccGetByKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMvccGetByKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvrpcpb::MvccGetByKeyRequest,::kvrpcpb::MvccGetByKeyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MvccGetByStartTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_MvccGetByStartTs() {
      ::grpc::Service::MarkMethodStreamed(27,
        new ::grpc::internal::StreamedUnaryHandler< ::kvrpcpb::MvccGetByStartTsRequest, ::kvrpcpb::MvccGetByStartTsResponse>(std::bind(&WithStreamedUnaryMethod_MvccGetByStartTs<BaseClass>::StreamedMvccGetByStartTs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_MvccGetByStartTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MvccGetByStartTs(::grpc::ServerContext* context, const ::kvrpcpb::MvccGetByStartTsRequest* request, ::kvrpcpb::MvccGetByStartTsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMvccGetByStartTs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::kvrpcpb::MvccGetByStartTsRequest,::kvrpcpb::MvccGetByStartTsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_KvGet<WithStreamedUnaryMethod_KvScan<WithStreamedUnaryMethod_KvPrewrite<WithStreamedUnaryMethod_KvCommit<WithStreamedUnaryMethod_KvImport<WithStreamedUnaryMethod_KvCleanup<WithStreamedUnaryMethod_KvBatchGet<WithStreamedUnaryMethod_KvBatchRollback<WithStreamedUnaryMethod_KvScanLock<WithStreamedUnaryMethod_KvResolveLock<WithStreamedUnaryMethod_KvGC<WithStreamedUnaryMethod_KvDeleteRange<WithStreamedUnaryMethod_RawGet<WithStreamedUnaryMethod_RawBatchGet<WithStreamedUnaryMethod_RawPut<WithStreamedUnaryMethod_RawBatchPut<WithStreamedUnaryMethod_RawDelete<WithStreamedUnaryMethod_RawBatchDelete<WithStreamedUnaryMethod_RawScan<WithStreamedUnaryMethod_RawDeleteRange<WithStreamedUnaryMethod_RawBatchScan<WithStreamedUnaryMethod_Coprocessor<WithStreamedUnaryMethod_SplitRegion<WithStreamedUnaryMethod_MvccGetByKey<WithStreamedUnaryMethod_MvccGetByStartTs<Service > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_CoprocessorStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_CoprocessorStream() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::SplitServerStreamingHandler< ::coprocessor::Request, ::coprocessor::Response>(std::bind(&WithSplitStreamingMethod_CoprocessorStream<BaseClass>::StreamedCoprocessorStream, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_CoprocessorStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CoprocessorStream(::grpc::ServerContext* context, const ::coprocessor::Request* request, ::grpc::ServerWriter< ::coprocessor::Response>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedCoprocessorStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::coprocessor::Request,::coprocessor::Response>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_CoprocessorStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_KvGet<WithStreamedUnaryMethod_KvScan<WithStreamedUnaryMethod_KvPrewrite<WithStreamedUnaryMethod_KvCommit<WithStreamedUnaryMethod_KvImport<WithStreamedUnaryMethod_KvCleanup<WithStreamedUnaryMethod_KvBatchGet<WithStreamedUnaryMethod_KvBatchRollback<WithStreamedUnaryMethod_KvScanLock<WithStreamedUnaryMethod_KvResolveLock<WithStreamedUnaryMethod_KvGC<WithStreamedUnaryMethod_KvDeleteRange<WithStreamedUnaryMethod_RawGet<WithStreamedUnaryMethod_RawBatchGet<WithStreamedUnaryMethod_RawPut<WithStreamedUnaryMethod_RawBatchPut<WithStreamedUnaryMethod_RawDelete<WithStreamedUnaryMethod_RawBatchDelete<WithStreamedUnaryMethod_RawScan<WithStreamedUnaryMethod_RawDeleteRange<WithStreamedUnaryMethod_RawBatchScan<WithStreamedUnaryMethod_Coprocessor<WithSplitStreamingMethod_CoprocessorStream<WithStreamedUnaryMethod_SplitRegion<WithStreamedUnaryMethod_MvccGetByKey<WithStreamedUnaryMethod_MvccGetByStartTs<Service > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace tikvpb


#endif  // GRPC_tikvpb_2eproto__INCLUDED
