// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: debugpb.proto
#ifndef GRPC_debugpb_2eproto__INCLUDED
#define GRPC_debugpb_2eproto__INCLUDED

#include "debugpb.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace debugpb {

// Debug service for TiKV.
//
// Errors are defined as follow:
//   - OK: Okay, we are good!
//   - UNKNOWN: For unknown error.
//   - INVALID_ARGUMENT: Something goes wrong within requests.
//   - NOT_FOUND: It is key or region not found, it's based on context, detailed
//                reason can be found in grpc message.
// Note: It bypasses raft layer.
class Debug final {
 public:
  static constexpr char const* service_full_name() {
    return "debugpb.Debug";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Read a value arbitrarily for a key.
    // Note: Server uses key directly w/o any encoding.
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::debugpb::GetRequest& request, ::debugpb::GetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::GetResponse>> AsyncGet(::grpc::ClientContext* context, const ::debugpb::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::GetResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::GetResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::debugpb::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::GetResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    // Read raft info.
    virtual ::grpc::Status RaftLog(::grpc::ClientContext* context, const ::debugpb::RaftLogRequest& request, ::debugpb::RaftLogResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RaftLogResponse>> AsyncRaftLog(::grpc::ClientContext* context, const ::debugpb::RaftLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RaftLogResponse>>(AsyncRaftLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RaftLogResponse>> PrepareAsyncRaftLog(::grpc::ClientContext* context, const ::debugpb::RaftLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RaftLogResponse>>(PrepareAsyncRaftLogRaw(context, request, cq));
    }
    virtual ::grpc::Status RegionInfo(::grpc::ClientContext* context, const ::debugpb::RegionInfoRequest& request, ::debugpb::RegionInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RegionInfoResponse>> AsyncRegionInfo(::grpc::ClientContext* context, const ::debugpb::RegionInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RegionInfoResponse>>(AsyncRegionInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RegionInfoResponse>> PrepareAsyncRegionInfo(::grpc::ClientContext* context, const ::debugpb::RegionInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RegionInfoResponse>>(PrepareAsyncRegionInfoRaw(context, request, cq));
    }
    // Calculate size of a region.
    // Note: DO NOT CALL IT IN PRODUCTION, it's really expensive.
    virtual ::grpc::Status RegionSize(::grpc::ClientContext* context, const ::debugpb::RegionSizeRequest& request, ::debugpb::RegionSizeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RegionSizeResponse>> AsyncRegionSize(::grpc::ClientContext* context, const ::debugpb::RegionSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RegionSizeResponse>>(AsyncRegionSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RegionSizeResponse>> PrepareAsyncRegionSize(::grpc::ClientContext* context, const ::debugpb::RegionSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RegionSizeResponse>>(PrepareAsyncRegionSizeRaw(context, request, cq));
    }
    // Scan a specific range.
    // Note: DO NOT CALL IT IN PRODUCTION, it's really expensive.
    //       Server uses keys directly w/o any encoding.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::debugpb::ScanMvccResponse>> ScanMvcc(::grpc::ClientContext* context, const ::debugpb::ScanMvccRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::debugpb::ScanMvccResponse>>(ScanMvccRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::debugpb::ScanMvccResponse>> AsyncScanMvcc(::grpc::ClientContext* context, const ::debugpb::ScanMvccRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::debugpb::ScanMvccResponse>>(AsyncScanMvccRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::debugpb::ScanMvccResponse>> PrepareAsyncScanMvcc(::grpc::ClientContext* context, const ::debugpb::ScanMvccRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::debugpb::ScanMvccResponse>>(PrepareAsyncScanMvccRaw(context, request, cq));
    }
    // Compact a column family in a specified range.
    // Note: Server uses keys directly w/o any encoding.
    virtual ::grpc::Status Compact(::grpc::ClientContext* context, const ::debugpb::CompactRequest& request, ::debugpb::CompactResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::CompactResponse>> AsyncCompact(::grpc::ClientContext* context, const ::debugpb::CompactRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::CompactResponse>>(AsyncCompactRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::CompactResponse>> PrepareAsyncCompact(::grpc::ClientContext* context, const ::debugpb::CompactRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::CompactResponse>>(PrepareAsyncCompactRaw(context, request, cq));
    }
    // Inject a fail point. Currently, it's only used in tests.
    // Note: DO NOT CALL IT IN PRODUCTION.
    virtual ::grpc::Status InjectFailPoint(::grpc::ClientContext* context, const ::debugpb::InjectFailPointRequest& request, ::debugpb::InjectFailPointResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::InjectFailPointResponse>> AsyncInjectFailPoint(::grpc::ClientContext* context, const ::debugpb::InjectFailPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::InjectFailPointResponse>>(AsyncInjectFailPointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::InjectFailPointResponse>> PrepareAsyncInjectFailPoint(::grpc::ClientContext* context, const ::debugpb::InjectFailPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::InjectFailPointResponse>>(PrepareAsyncInjectFailPointRaw(context, request, cq));
    }
    // Recover from a fail point.
    virtual ::grpc::Status RecoverFailPoint(::grpc::ClientContext* context, const ::debugpb::RecoverFailPointRequest& request, ::debugpb::RecoverFailPointResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RecoverFailPointResponse>> AsyncRecoverFailPoint(::grpc::ClientContext* context, const ::debugpb::RecoverFailPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RecoverFailPointResponse>>(AsyncRecoverFailPointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RecoverFailPointResponse>> PrepareAsyncRecoverFailPoint(::grpc::ClientContext* context, const ::debugpb::RecoverFailPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RecoverFailPointResponse>>(PrepareAsyncRecoverFailPointRaw(context, request, cq));
    }
    // List all fail points.
    virtual ::grpc::Status ListFailPoints(::grpc::ClientContext* context, const ::debugpb::ListFailPointsRequest& request, ::debugpb::ListFailPointsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::ListFailPointsResponse>> AsyncListFailPoints(::grpc::ClientContext* context, const ::debugpb::ListFailPointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::ListFailPointsResponse>>(AsyncListFailPointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::ListFailPointsResponse>> PrepareAsyncListFailPoints(::grpc::ClientContext* context, const ::debugpb::ListFailPointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::ListFailPointsResponse>>(PrepareAsyncListFailPointsRaw(context, request, cq));
    }
    // Get Metrics
    virtual ::grpc::Status GetMetrics(::grpc::ClientContext* context, const ::debugpb::GetMetricsRequest& request, ::debugpb::GetMetricsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::GetMetricsResponse>> AsyncGetMetrics(::grpc::ClientContext* context, const ::debugpb::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::GetMetricsResponse>>(AsyncGetMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::GetMetricsResponse>> PrepareAsyncGetMetrics(::grpc::ClientContext* context, const ::debugpb::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::GetMetricsResponse>>(PrepareAsyncGetMetricsRaw(context, request, cq));
    }
    // Do a consistent check for a region.
    virtual ::grpc::Status CheckRegionConsistency(::grpc::ClientContext* context, const ::debugpb::RegionConsistencyCheckRequest& request, ::debugpb::RegionConsistencyCheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RegionConsistencyCheckResponse>> AsyncCheckRegionConsistency(::grpc::ClientContext* context, const ::debugpb::RegionConsistencyCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RegionConsistencyCheckResponse>>(AsyncCheckRegionConsistencyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RegionConsistencyCheckResponse>> PrepareAsyncCheckRegionConsistency(::grpc::ClientContext* context, const ::debugpb::RegionConsistencyCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RegionConsistencyCheckResponse>>(PrepareAsyncCheckRegionConsistencyRaw(context, request, cq));
    }
    // dynamically modify tikv's config
    virtual ::grpc::Status ModifyTikvConfig(::grpc::ClientContext* context, const ::debugpb::ModifyTikvConfigRequest& request, ::debugpb::ModifyTikvConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::ModifyTikvConfigResponse>> AsyncModifyTikvConfig(::grpc::ClientContext* context, const ::debugpb::ModifyTikvConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::ModifyTikvConfigResponse>>(AsyncModifyTikvConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::ModifyTikvConfigResponse>> PrepareAsyncModifyTikvConfig(::grpc::ClientContext* context, const ::debugpb::ModifyTikvConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::ModifyTikvConfigResponse>>(PrepareAsyncModifyTikvConfigRaw(context, request, cq));
    }
    // Get region properties
    virtual ::grpc::Status GetRegionProperties(::grpc::ClientContext* context, const ::debugpb::GetRegionPropertiesRequest& request, ::debugpb::GetRegionPropertiesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::GetRegionPropertiesResponse>> AsyncGetRegionProperties(::grpc::ClientContext* context, const ::debugpb::GetRegionPropertiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::GetRegionPropertiesResponse>>(AsyncGetRegionPropertiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::GetRegionPropertiesResponse>> PrepareAsyncGetRegionProperties(::grpc::ClientContext* context, const ::debugpb::GetRegionPropertiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::GetRegionPropertiesResponse>>(PrepareAsyncGetRegionPropertiesRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::GetResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::debugpb::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::GetResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::debugpb::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RaftLogResponse>* AsyncRaftLogRaw(::grpc::ClientContext* context, const ::debugpb::RaftLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RaftLogResponse>* PrepareAsyncRaftLogRaw(::grpc::ClientContext* context, const ::debugpb::RaftLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RegionInfoResponse>* AsyncRegionInfoRaw(::grpc::ClientContext* context, const ::debugpb::RegionInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RegionInfoResponse>* PrepareAsyncRegionInfoRaw(::grpc::ClientContext* context, const ::debugpb::RegionInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RegionSizeResponse>* AsyncRegionSizeRaw(::grpc::ClientContext* context, const ::debugpb::RegionSizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RegionSizeResponse>* PrepareAsyncRegionSizeRaw(::grpc::ClientContext* context, const ::debugpb::RegionSizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::debugpb::ScanMvccResponse>* ScanMvccRaw(::grpc::ClientContext* context, const ::debugpb::ScanMvccRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::debugpb::ScanMvccResponse>* AsyncScanMvccRaw(::grpc::ClientContext* context, const ::debugpb::ScanMvccRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::debugpb::ScanMvccResponse>* PrepareAsyncScanMvccRaw(::grpc::ClientContext* context, const ::debugpb::ScanMvccRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::CompactResponse>* AsyncCompactRaw(::grpc::ClientContext* context, const ::debugpb::CompactRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::CompactResponse>* PrepareAsyncCompactRaw(::grpc::ClientContext* context, const ::debugpb::CompactRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::InjectFailPointResponse>* AsyncInjectFailPointRaw(::grpc::ClientContext* context, const ::debugpb::InjectFailPointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::InjectFailPointResponse>* PrepareAsyncInjectFailPointRaw(::grpc::ClientContext* context, const ::debugpb::InjectFailPointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RecoverFailPointResponse>* AsyncRecoverFailPointRaw(::grpc::ClientContext* context, const ::debugpb::RecoverFailPointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RecoverFailPointResponse>* PrepareAsyncRecoverFailPointRaw(::grpc::ClientContext* context, const ::debugpb::RecoverFailPointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::ListFailPointsResponse>* AsyncListFailPointsRaw(::grpc::ClientContext* context, const ::debugpb::ListFailPointsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::ListFailPointsResponse>* PrepareAsyncListFailPointsRaw(::grpc::ClientContext* context, const ::debugpb::ListFailPointsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::GetMetricsResponse>* AsyncGetMetricsRaw(::grpc::ClientContext* context, const ::debugpb::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::GetMetricsResponse>* PrepareAsyncGetMetricsRaw(::grpc::ClientContext* context, const ::debugpb::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RegionConsistencyCheckResponse>* AsyncCheckRegionConsistencyRaw(::grpc::ClientContext* context, const ::debugpb::RegionConsistencyCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::RegionConsistencyCheckResponse>* PrepareAsyncCheckRegionConsistencyRaw(::grpc::ClientContext* context, const ::debugpb::RegionConsistencyCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::ModifyTikvConfigResponse>* AsyncModifyTikvConfigRaw(::grpc::ClientContext* context, const ::debugpb::ModifyTikvConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::ModifyTikvConfigResponse>* PrepareAsyncModifyTikvConfigRaw(::grpc::ClientContext* context, const ::debugpb::ModifyTikvConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::GetRegionPropertiesResponse>* AsyncGetRegionPropertiesRaw(::grpc::ClientContext* context, const ::debugpb::GetRegionPropertiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::debugpb::GetRegionPropertiesResponse>* PrepareAsyncGetRegionPropertiesRaw(::grpc::ClientContext* context, const ::debugpb::GetRegionPropertiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Get(::grpc::ClientContext* context, const ::debugpb::GetRequest& request, ::debugpb::GetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::GetResponse>> AsyncGet(::grpc::ClientContext* context, const ::debugpb::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::GetResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::GetResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::debugpb::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::GetResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    ::grpc::Status RaftLog(::grpc::ClientContext* context, const ::debugpb::RaftLogRequest& request, ::debugpb::RaftLogResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::RaftLogResponse>> AsyncRaftLog(::grpc::ClientContext* context, const ::debugpb::RaftLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::RaftLogResponse>>(AsyncRaftLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::RaftLogResponse>> PrepareAsyncRaftLog(::grpc::ClientContext* context, const ::debugpb::RaftLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::RaftLogResponse>>(PrepareAsyncRaftLogRaw(context, request, cq));
    }
    ::grpc::Status RegionInfo(::grpc::ClientContext* context, const ::debugpb::RegionInfoRequest& request, ::debugpb::RegionInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::RegionInfoResponse>> AsyncRegionInfo(::grpc::ClientContext* context, const ::debugpb::RegionInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::RegionInfoResponse>>(AsyncRegionInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::RegionInfoResponse>> PrepareAsyncRegionInfo(::grpc::ClientContext* context, const ::debugpb::RegionInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::RegionInfoResponse>>(PrepareAsyncRegionInfoRaw(context, request, cq));
    }
    ::grpc::Status RegionSize(::grpc::ClientContext* context, const ::debugpb::RegionSizeRequest& request, ::debugpb::RegionSizeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::RegionSizeResponse>> AsyncRegionSize(::grpc::ClientContext* context, const ::debugpb::RegionSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::RegionSizeResponse>>(AsyncRegionSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::RegionSizeResponse>> PrepareAsyncRegionSize(::grpc::ClientContext* context, const ::debugpb::RegionSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::RegionSizeResponse>>(PrepareAsyncRegionSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::debugpb::ScanMvccResponse>> ScanMvcc(::grpc::ClientContext* context, const ::debugpb::ScanMvccRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::debugpb::ScanMvccResponse>>(ScanMvccRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::debugpb::ScanMvccResponse>> AsyncScanMvcc(::grpc::ClientContext* context, const ::debugpb::ScanMvccRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::debugpb::ScanMvccResponse>>(AsyncScanMvccRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::debugpb::ScanMvccResponse>> PrepareAsyncScanMvcc(::grpc::ClientContext* context, const ::debugpb::ScanMvccRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::debugpb::ScanMvccResponse>>(PrepareAsyncScanMvccRaw(context, request, cq));
    }
    ::grpc::Status Compact(::grpc::ClientContext* context, const ::debugpb::CompactRequest& request, ::debugpb::CompactResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::CompactResponse>> AsyncCompact(::grpc::ClientContext* context, const ::debugpb::CompactRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::CompactResponse>>(AsyncCompactRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::CompactResponse>> PrepareAsyncCompact(::grpc::ClientContext* context, const ::debugpb::CompactRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::CompactResponse>>(PrepareAsyncCompactRaw(context, request, cq));
    }
    ::grpc::Status InjectFailPoint(::grpc::ClientContext* context, const ::debugpb::InjectFailPointRequest& request, ::debugpb::InjectFailPointResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::InjectFailPointResponse>> AsyncInjectFailPoint(::grpc::ClientContext* context, const ::debugpb::InjectFailPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::InjectFailPointResponse>>(AsyncInjectFailPointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::InjectFailPointResponse>> PrepareAsyncInjectFailPoint(::grpc::ClientContext* context, const ::debugpb::InjectFailPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::InjectFailPointResponse>>(PrepareAsyncInjectFailPointRaw(context, request, cq));
    }
    ::grpc::Status RecoverFailPoint(::grpc::ClientContext* context, const ::debugpb::RecoverFailPointRequest& request, ::debugpb::RecoverFailPointResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::RecoverFailPointResponse>> AsyncRecoverFailPoint(::grpc::ClientContext* context, const ::debugpb::RecoverFailPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::RecoverFailPointResponse>>(AsyncRecoverFailPointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::RecoverFailPointResponse>> PrepareAsyncRecoverFailPoint(::grpc::ClientContext* context, const ::debugpb::RecoverFailPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::RecoverFailPointResponse>>(PrepareAsyncRecoverFailPointRaw(context, request, cq));
    }
    ::grpc::Status ListFailPoints(::grpc::ClientContext* context, const ::debugpb::ListFailPointsRequest& request, ::debugpb::ListFailPointsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::ListFailPointsResponse>> AsyncListFailPoints(::grpc::ClientContext* context, const ::debugpb::ListFailPointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::ListFailPointsResponse>>(AsyncListFailPointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::ListFailPointsResponse>> PrepareAsyncListFailPoints(::grpc::ClientContext* context, const ::debugpb::ListFailPointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::ListFailPointsResponse>>(PrepareAsyncListFailPointsRaw(context, request, cq));
    }
    ::grpc::Status GetMetrics(::grpc::ClientContext* context, const ::debugpb::GetMetricsRequest& request, ::debugpb::GetMetricsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::GetMetricsResponse>> AsyncGetMetrics(::grpc::ClientContext* context, const ::debugpb::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::GetMetricsResponse>>(AsyncGetMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::GetMetricsResponse>> PrepareAsyncGetMetrics(::grpc::ClientContext* context, const ::debugpb::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::GetMetricsResponse>>(PrepareAsyncGetMetricsRaw(context, request, cq));
    }
    ::grpc::Status CheckRegionConsistency(::grpc::ClientContext* context, const ::debugpb::RegionConsistencyCheckRequest& request, ::debugpb::RegionConsistencyCheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::RegionConsistencyCheckResponse>> AsyncCheckRegionConsistency(::grpc::ClientContext* context, const ::debugpb::RegionConsistencyCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::RegionConsistencyCheckResponse>>(AsyncCheckRegionConsistencyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::RegionConsistencyCheckResponse>> PrepareAsyncCheckRegionConsistency(::grpc::ClientContext* context, const ::debugpb::RegionConsistencyCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::RegionConsistencyCheckResponse>>(PrepareAsyncCheckRegionConsistencyRaw(context, request, cq));
    }
    ::grpc::Status ModifyTikvConfig(::grpc::ClientContext* context, const ::debugpb::ModifyTikvConfigRequest& request, ::debugpb::ModifyTikvConfigResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::ModifyTikvConfigResponse>> AsyncModifyTikvConfig(::grpc::ClientContext* context, const ::debugpb::ModifyTikvConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::ModifyTikvConfigResponse>>(AsyncModifyTikvConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::ModifyTikvConfigResponse>> PrepareAsyncModifyTikvConfig(::grpc::ClientContext* context, const ::debugpb::ModifyTikvConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::ModifyTikvConfigResponse>>(PrepareAsyncModifyTikvConfigRaw(context, request, cq));
    }
    ::grpc::Status GetRegionProperties(::grpc::ClientContext* context, const ::debugpb::GetRegionPropertiesRequest& request, ::debugpb::GetRegionPropertiesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::GetRegionPropertiesResponse>> AsyncGetRegionProperties(::grpc::ClientContext* context, const ::debugpb::GetRegionPropertiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::GetRegionPropertiesResponse>>(AsyncGetRegionPropertiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::GetRegionPropertiesResponse>> PrepareAsyncGetRegionProperties(::grpc::ClientContext* context, const ::debugpb::GetRegionPropertiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::debugpb::GetRegionPropertiesResponse>>(PrepareAsyncGetRegionPropertiesRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::debugpb::GetResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::debugpb::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::debugpb::GetResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::debugpb::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::debugpb::RaftLogResponse>* AsyncRaftLogRaw(::grpc::ClientContext* context, const ::debugpb::RaftLogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::debugpb::RaftLogResponse>* PrepareAsyncRaftLogRaw(::grpc::ClientContext* context, const ::debugpb::RaftLogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::debugpb::RegionInfoResponse>* AsyncRegionInfoRaw(::grpc::ClientContext* context, const ::debugpb::RegionInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::debugpb::RegionInfoResponse>* PrepareAsyncRegionInfoRaw(::grpc::ClientContext* context, const ::debugpb::RegionInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::debugpb::RegionSizeResponse>* AsyncRegionSizeRaw(::grpc::ClientContext* context, const ::debugpb::RegionSizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::debugpb::RegionSizeResponse>* PrepareAsyncRegionSizeRaw(::grpc::ClientContext* context, const ::debugpb::RegionSizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::debugpb::ScanMvccResponse>* ScanMvccRaw(::grpc::ClientContext* context, const ::debugpb::ScanMvccRequest& request) override;
    ::grpc::ClientAsyncReader< ::debugpb::ScanMvccResponse>* AsyncScanMvccRaw(::grpc::ClientContext* context, const ::debugpb::ScanMvccRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::debugpb::ScanMvccResponse>* PrepareAsyncScanMvccRaw(::grpc::ClientContext* context, const ::debugpb::ScanMvccRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::debugpb::CompactResponse>* AsyncCompactRaw(::grpc::ClientContext* context, const ::debugpb::CompactRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::debugpb::CompactResponse>* PrepareAsyncCompactRaw(::grpc::ClientContext* context, const ::debugpb::CompactRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::debugpb::InjectFailPointResponse>* AsyncInjectFailPointRaw(::grpc::ClientContext* context, const ::debugpb::InjectFailPointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::debugpb::InjectFailPointResponse>* PrepareAsyncInjectFailPointRaw(::grpc::ClientContext* context, const ::debugpb::InjectFailPointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::debugpb::RecoverFailPointResponse>* AsyncRecoverFailPointRaw(::grpc::ClientContext* context, const ::debugpb::RecoverFailPointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::debugpb::RecoverFailPointResponse>* PrepareAsyncRecoverFailPointRaw(::grpc::ClientContext* context, const ::debugpb::RecoverFailPointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::debugpb::ListFailPointsResponse>* AsyncListFailPointsRaw(::grpc::ClientContext* context, const ::debugpb::ListFailPointsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::debugpb::ListFailPointsResponse>* PrepareAsyncListFailPointsRaw(::grpc::ClientContext* context, const ::debugpb::ListFailPointsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::debugpb::GetMetricsResponse>* AsyncGetMetricsRaw(::grpc::ClientContext* context, const ::debugpb::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::debugpb::GetMetricsResponse>* PrepareAsyncGetMetricsRaw(::grpc::ClientContext* context, const ::debugpb::GetMetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::debugpb::RegionConsistencyCheckResponse>* AsyncCheckRegionConsistencyRaw(::grpc::ClientContext* context, const ::debugpb::RegionConsistencyCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::debugpb::RegionConsistencyCheckResponse>* PrepareAsyncCheckRegionConsistencyRaw(::grpc::ClientContext* context, const ::debugpb::RegionConsistencyCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::debugpb::ModifyTikvConfigResponse>* AsyncModifyTikvConfigRaw(::grpc::ClientContext* context, const ::debugpb::ModifyTikvConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::debugpb::ModifyTikvConfigResponse>* PrepareAsyncModifyTikvConfigRaw(::grpc::ClientContext* context, const ::debugpb::ModifyTikvConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::debugpb::GetRegionPropertiesResponse>* AsyncGetRegionPropertiesRaw(::grpc::ClientContext* context, const ::debugpb::GetRegionPropertiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::debugpb::GetRegionPropertiesResponse>* PrepareAsyncGetRegionPropertiesRaw(::grpc::ClientContext* context, const ::debugpb::GetRegionPropertiesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_RaftLog_;
    const ::grpc::internal::RpcMethod rpcmethod_RegionInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_RegionSize_;
    const ::grpc::internal::RpcMethod rpcmethod_ScanMvcc_;
    const ::grpc::internal::RpcMethod rpcmethod_Compact_;
    const ::grpc::internal::RpcMethod rpcmethod_InjectFailPoint_;
    const ::grpc::internal::RpcMethod rpcmethod_RecoverFailPoint_;
    const ::grpc::internal::RpcMethod rpcmethod_ListFailPoints_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMetrics_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckRegionConsistency_;
    const ::grpc::internal::RpcMethod rpcmethod_ModifyTikvConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRegionProperties_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Read a value arbitrarily for a key.
    // Note: Server uses key directly w/o any encoding.
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::debugpb::GetRequest* request, ::debugpb::GetResponse* response);
    // Read raft info.
    virtual ::grpc::Status RaftLog(::grpc::ServerContext* context, const ::debugpb::RaftLogRequest* request, ::debugpb::RaftLogResponse* response);
    virtual ::grpc::Status RegionInfo(::grpc::ServerContext* context, const ::debugpb::RegionInfoRequest* request, ::debugpb::RegionInfoResponse* response);
    // Calculate size of a region.
    // Note: DO NOT CALL IT IN PRODUCTION, it's really expensive.
    virtual ::grpc::Status RegionSize(::grpc::ServerContext* context, const ::debugpb::RegionSizeRequest* request, ::debugpb::RegionSizeResponse* response);
    // Scan a specific range.
    // Note: DO NOT CALL IT IN PRODUCTION, it's really expensive.
    //       Server uses keys directly w/o any encoding.
    virtual ::grpc::Status ScanMvcc(::grpc::ServerContext* context, const ::debugpb::ScanMvccRequest* request, ::grpc::ServerWriter< ::debugpb::ScanMvccResponse>* writer);
    // Compact a column family in a specified range.
    // Note: Server uses keys directly w/o any encoding.
    virtual ::grpc::Status Compact(::grpc::ServerContext* context, const ::debugpb::CompactRequest* request, ::debugpb::CompactResponse* response);
    // Inject a fail point. Currently, it's only used in tests.
    // Note: DO NOT CALL IT IN PRODUCTION.
    virtual ::grpc::Status InjectFailPoint(::grpc::ServerContext* context, const ::debugpb::InjectFailPointRequest* request, ::debugpb::InjectFailPointResponse* response);
    // Recover from a fail point.
    virtual ::grpc::Status RecoverFailPoint(::grpc::ServerContext* context, const ::debugpb::RecoverFailPointRequest* request, ::debugpb::RecoverFailPointResponse* response);
    // List all fail points.
    virtual ::grpc::Status ListFailPoints(::grpc::ServerContext* context, const ::debugpb::ListFailPointsRequest* request, ::debugpb::ListFailPointsResponse* response);
    // Get Metrics
    virtual ::grpc::Status GetMetrics(::grpc::ServerContext* context, const ::debugpb::GetMetricsRequest* request, ::debugpb::GetMetricsResponse* response);
    // Do a consistent check for a region.
    virtual ::grpc::Status CheckRegionConsistency(::grpc::ServerContext* context, const ::debugpb::RegionConsistencyCheckRequest* request, ::debugpb::RegionConsistencyCheckResponse* response);
    // dynamically modify tikv's config
    virtual ::grpc::Status ModifyTikvConfig(::grpc::ServerContext* context, const ::debugpb::ModifyTikvConfigRequest* request, ::debugpb::ModifyTikvConfigResponse* response);
    // Get region properties
    virtual ::grpc::Status GetRegionProperties(::grpc::ServerContext* context, const ::debugpb::GetRegionPropertiesRequest* request, ::debugpb::GetRegionPropertiesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::debugpb::GetRequest* request, ::debugpb::GetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::debugpb::GetRequest* request, ::grpc::ServerAsyncResponseWriter< ::debugpb::GetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RaftLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RaftLog() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RaftLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RaftLog(::grpc::ServerContext* context, const ::debugpb::RaftLogRequest* request, ::debugpb::RaftLogResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRaftLog(::grpc::ServerContext* context, ::debugpb::RaftLogRequest* request, ::grpc::ServerAsyncResponseWriter< ::debugpb::RaftLogResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RegionInfo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RegionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegionInfo(::grpc::ServerContext* context, const ::debugpb::RegionInfoRequest* request, ::debugpb::RegionInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegionInfo(::grpc::ServerContext* context, ::debugpb::RegionInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::debugpb::RegionInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegionSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RegionSize() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RegionSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegionSize(::grpc::ServerContext* context, const ::debugpb::RegionSizeRequest* request, ::debugpb::RegionSizeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegionSize(::grpc::ServerContext* context, ::debugpb::RegionSizeRequest* request, ::grpc::ServerAsyncResponseWriter< ::debugpb::RegionSizeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ScanMvcc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ScanMvcc() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ScanMvcc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanMvcc(::grpc::ServerContext* context, const ::debugpb::ScanMvccRequest* request, ::grpc::ServerWriter< ::debugpb::ScanMvccResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScanMvcc(::grpc::ServerContext* context, ::debugpb::ScanMvccRequest* request, ::grpc::ServerAsyncWriter< ::debugpb::ScanMvccResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Compact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Compact() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Compact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Compact(::grpc::ServerContext* context, const ::debugpb::CompactRequest* request, ::debugpb::CompactResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompact(::grpc::ServerContext* context, ::debugpb::CompactRequest* request, ::grpc::ServerAsyncResponseWriter< ::debugpb::CompactResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InjectFailPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_InjectFailPoint() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_InjectFailPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InjectFailPoint(::grpc::ServerContext* context, const ::debugpb::InjectFailPointRequest* request, ::debugpb::InjectFailPointResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInjectFailPoint(::grpc::ServerContext* context, ::debugpb::InjectFailPointRequest* request, ::grpc::ServerAsyncResponseWriter< ::debugpb::InjectFailPointResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecoverFailPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RecoverFailPoint() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_RecoverFailPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecoverFailPoint(::grpc::ServerContext* context, const ::debugpb::RecoverFailPointRequest* request, ::debugpb::RecoverFailPointResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecoverFailPoint(::grpc::ServerContext* context, ::debugpb::RecoverFailPointRequest* request, ::grpc::ServerAsyncResponseWriter< ::debugpb::RecoverFailPointResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListFailPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListFailPoints() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_ListFailPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFailPoints(::grpc::ServerContext* context, const ::debugpb::ListFailPointsRequest* request, ::debugpb::ListFailPointsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFailPoints(::grpc::ServerContext* context, ::debugpb::ListFailPointsRequest* request, ::grpc::ServerAsyncResponseWriter< ::debugpb::ListFailPointsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetMetrics() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetrics(::grpc::ServerContext* context, const ::debugpb::GetMetricsRequest* request, ::debugpb::GetMetricsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMetrics(::grpc::ServerContext* context, ::debugpb::GetMetricsRequest* request, ::grpc::ServerAsyncResponseWriter< ::debugpb::GetMetricsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckRegionConsistency : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckRegionConsistency() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_CheckRegionConsistency() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckRegionConsistency(::grpc::ServerContext* context, const ::debugpb::RegionConsistencyCheckRequest* request, ::debugpb::RegionConsistencyCheckResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckRegionConsistency(::grpc::ServerContext* context, ::debugpb::RegionConsistencyCheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::debugpb::RegionConsistencyCheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ModifyTikvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ModifyTikvConfig() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_ModifyTikvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyTikvConfig(::grpc::ServerContext* context, const ::debugpb::ModifyTikvConfigRequest* request, ::debugpb::ModifyTikvConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModifyTikvConfig(::grpc::ServerContext* context, ::debugpb::ModifyTikvConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::debugpb::ModifyTikvConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRegionProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetRegionProperties() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetRegionProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRegionProperties(::grpc::ServerContext* context, const ::debugpb::GetRegionPropertiesRequest* request, ::debugpb::GetRegionPropertiesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRegionProperties(::grpc::ServerContext* context, ::debugpb::GetRegionPropertiesRequest* request, ::grpc::ServerAsyncResponseWriter< ::debugpb::GetRegionPropertiesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Get<WithAsyncMethod_RaftLog<WithAsyncMethod_RegionInfo<WithAsyncMethod_RegionSize<WithAsyncMethod_ScanMvcc<WithAsyncMethod_Compact<WithAsyncMethod_InjectFailPoint<WithAsyncMethod_RecoverFailPoint<WithAsyncMethod_ListFailPoints<WithAsyncMethod_GetMetrics<WithAsyncMethod_CheckRegionConsistency<WithAsyncMethod_ModifyTikvConfig<WithAsyncMethod_GetRegionProperties<Service > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::debugpb::GetRequest* request, ::debugpb::GetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RaftLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RaftLog() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RaftLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RaftLog(::grpc::ServerContext* context, const ::debugpb::RaftLogRequest* request, ::debugpb::RaftLogResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RegionInfo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RegionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegionInfo(::grpc::ServerContext* context, const ::debugpb::RegionInfoRequest* request, ::debugpb::RegionInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegionSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RegionSize() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RegionSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegionSize(::grpc::ServerContext* context, const ::debugpb::RegionSizeRequest* request, ::debugpb::RegionSizeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ScanMvcc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ScanMvcc() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ScanMvcc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanMvcc(::grpc::ServerContext* context, const ::debugpb::ScanMvccRequest* request, ::grpc::ServerWriter< ::debugpb::ScanMvccResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Compact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Compact() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Compact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Compact(::grpc::ServerContext* context, const ::debugpb::CompactRequest* request, ::debugpb::CompactResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InjectFailPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_InjectFailPoint() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_InjectFailPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InjectFailPoint(::grpc::ServerContext* context, const ::debugpb::InjectFailPointRequest* request, ::debugpb::InjectFailPointResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecoverFailPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RecoverFailPoint() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_RecoverFailPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecoverFailPoint(::grpc::ServerContext* context, const ::debugpb::RecoverFailPointRequest* request, ::debugpb::RecoverFailPointResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListFailPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListFailPoints() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_ListFailPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFailPoints(::grpc::ServerContext* context, const ::debugpb::ListFailPointsRequest* request, ::debugpb::ListFailPointsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetMetrics() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetrics(::grpc::ServerContext* context, const ::debugpb::GetMetricsRequest* request, ::debugpb::GetMetricsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckRegionConsistency : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckRegionConsistency() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_CheckRegionConsistency() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckRegionConsistency(::grpc::ServerContext* context, const ::debugpb::RegionConsistencyCheckRequest* request, ::debugpb::RegionConsistencyCheckResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ModifyTikvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ModifyTikvConfig() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_ModifyTikvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyTikvConfig(::grpc::ServerContext* context, const ::debugpb::ModifyTikvConfigRequest* request, ::debugpb::ModifyTikvConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRegionProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetRegionProperties() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetRegionProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRegionProperties(::grpc::ServerContext* context, const ::debugpb::GetRegionPropertiesRequest* request, ::debugpb::GetRegionPropertiesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::debugpb::GetRequest* request, ::debugpb::GetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RaftLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RaftLog() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RaftLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RaftLog(::grpc::ServerContext* context, const ::debugpb::RaftLogRequest* request, ::debugpb::RaftLogResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRaftLog(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RegionInfo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RegionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegionInfo(::grpc::ServerContext* context, const ::debugpb::RegionInfoRequest* request, ::debugpb::RegionInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegionInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegionSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RegionSize() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RegionSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegionSize(::grpc::ServerContext* context, const ::debugpb::RegionSizeRequest* request, ::debugpb::RegionSizeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegionSize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ScanMvcc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ScanMvcc() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ScanMvcc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScanMvcc(::grpc::ServerContext* context, const ::debugpb::ScanMvccRequest* request, ::grpc::ServerWriter< ::debugpb::ScanMvccResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScanMvcc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Compact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Compact() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Compact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Compact(::grpc::ServerContext* context, const ::debugpb::CompactRequest* request, ::debugpb::CompactResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompact(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InjectFailPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_InjectFailPoint() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_InjectFailPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InjectFailPoint(::grpc::ServerContext* context, const ::debugpb::InjectFailPointRequest* request, ::debugpb::InjectFailPointResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInjectFailPoint(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RecoverFailPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RecoverFailPoint() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_RecoverFailPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecoverFailPoint(::grpc::ServerContext* context, const ::debugpb::RecoverFailPointRequest* request, ::debugpb::RecoverFailPointResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecoverFailPoint(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListFailPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListFailPoints() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_ListFailPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFailPoints(::grpc::ServerContext* context, const ::debugpb::ListFailPointsRequest* request, ::debugpb::ListFailPointsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFailPoints(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetMetrics() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMetrics(::grpc::ServerContext* context, const ::debugpb::GetMetricsRequest* request, ::debugpb::GetMetricsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMetrics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckRegionConsistency : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CheckRegionConsistency() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_CheckRegionConsistency() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckRegionConsistency(::grpc::ServerContext* context, const ::debugpb::RegionConsistencyCheckRequest* request, ::debugpb::RegionConsistencyCheckResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckRegionConsistency(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ModifyTikvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ModifyTikvConfig() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_ModifyTikvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyTikvConfig(::grpc::ServerContext* context, const ::debugpb::ModifyTikvConfigRequest* request, ::debugpb::ModifyTikvConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModifyTikvConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRegionProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetRegionProperties() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetRegionProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRegionProperties(::grpc::ServerContext* context, const ::debugpb::GetRegionPropertiesRequest* request, ::debugpb::GetRegionPropertiesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRegionProperties(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::debugpb::GetRequest, ::debugpb::GetResponse>(std::bind(&WithStreamedUnaryMethod_Get<BaseClass>::StreamedGet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::debugpb::GetRequest* request, ::debugpb::GetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::debugpb::GetRequest,::debugpb::GetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RaftLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RaftLog() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::debugpb::RaftLogRequest, ::debugpb::RaftLogResponse>(std::bind(&WithStreamedUnaryMethod_RaftLog<BaseClass>::StreamedRaftLog, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RaftLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RaftLog(::grpc::ServerContext* context, const ::debugpb::RaftLogRequest* request, ::debugpb::RaftLogResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRaftLog(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::debugpb::RaftLogRequest,::debugpb::RaftLogResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RegionInfo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::debugpb::RegionInfoRequest, ::debugpb::RegionInfoResponse>(std::bind(&WithStreamedUnaryMethod_RegionInfo<BaseClass>::StreamedRegionInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RegionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegionInfo(::grpc::ServerContext* context, const ::debugpb::RegionInfoRequest* request, ::debugpb::RegionInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegionInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::debugpb::RegionInfoRequest,::debugpb::RegionInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegionSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RegionSize() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::debugpb::RegionSizeRequest, ::debugpb::RegionSizeResponse>(std::bind(&WithStreamedUnaryMethod_RegionSize<BaseClass>::StreamedRegionSize, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RegionSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegionSize(::grpc::ServerContext* context, const ::debugpb::RegionSizeRequest* request, ::debugpb::RegionSizeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegionSize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::debugpb::RegionSizeRequest,::debugpb::RegionSizeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Compact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Compact() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::debugpb::CompactRequest, ::debugpb::CompactResponse>(std::bind(&WithStreamedUnaryMethod_Compact<BaseClass>::StreamedCompact, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Compact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Compact(::grpc::ServerContext* context, const ::debugpb::CompactRequest* request, ::debugpb::CompactResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCompact(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::debugpb::CompactRequest,::debugpb::CompactResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InjectFailPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_InjectFailPoint() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::debugpb::InjectFailPointRequest, ::debugpb::InjectFailPointResponse>(std::bind(&WithStreamedUnaryMethod_InjectFailPoint<BaseClass>::StreamedInjectFailPoint, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InjectFailPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InjectFailPoint(::grpc::ServerContext* context, const ::debugpb::InjectFailPointRequest* request, ::debugpb::InjectFailPointResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInjectFailPoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::debugpb::InjectFailPointRequest,::debugpb::InjectFailPointResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RecoverFailPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RecoverFailPoint() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::debugpb::RecoverFailPointRequest, ::debugpb::RecoverFailPointResponse>(std::bind(&WithStreamedUnaryMethod_RecoverFailPoint<BaseClass>::StreamedRecoverFailPoint, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RecoverFailPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RecoverFailPoint(::grpc::ServerContext* context, const ::debugpb::RecoverFailPointRequest* request, ::debugpb::RecoverFailPointResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecoverFailPoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::debugpb::RecoverFailPointRequest,::debugpb::RecoverFailPointResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListFailPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListFailPoints() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::debugpb::ListFailPointsRequest, ::debugpb::ListFailPointsResponse>(std::bind(&WithStreamedUnaryMethod_ListFailPoints<BaseClass>::StreamedListFailPoints, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListFailPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListFailPoints(::grpc::ServerContext* context, const ::debugpb::ListFailPointsRequest* request, ::debugpb::ListFailPointsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListFailPoints(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::debugpb::ListFailPointsRequest,::debugpb::ListFailPointsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetMetrics() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::debugpb::GetMetricsRequest, ::debugpb::GetMetricsResponse>(std::bind(&WithStreamedUnaryMethod_GetMetrics<BaseClass>::StreamedGetMetrics, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMetrics(::grpc::ServerContext* context, const ::debugpb::GetMetricsRequest* request, ::debugpb::GetMetricsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMetrics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::debugpb::GetMetricsRequest,::debugpb::GetMetricsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckRegionConsistency : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CheckRegionConsistency() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::debugpb::RegionConsistencyCheckRequest, ::debugpb::RegionConsistencyCheckResponse>(std::bind(&WithStreamedUnaryMethod_CheckRegionConsistency<BaseClass>::StreamedCheckRegionConsistency, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckRegionConsistency() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckRegionConsistency(::grpc::ServerContext* context, const ::debugpb::RegionConsistencyCheckRequest* request, ::debugpb::RegionConsistencyCheckResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckRegionConsistency(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::debugpb::RegionConsistencyCheckRequest,::debugpb::RegionConsistencyCheckResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ModifyTikvConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ModifyTikvConfig() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::debugpb::ModifyTikvConfigRequest, ::debugpb::ModifyTikvConfigResponse>(std::bind(&WithStreamedUnaryMethod_ModifyTikvConfig<BaseClass>::StreamedModifyTikvConfig, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ModifyTikvConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ModifyTikvConfig(::grpc::ServerContext* context, const ::debugpb::ModifyTikvConfigRequest* request, ::debugpb::ModifyTikvConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedModifyTikvConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::debugpb::ModifyTikvConfigRequest,::debugpb::ModifyTikvConfigResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRegionProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetRegionProperties() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::debugpb::GetRegionPropertiesRequest, ::debugpb::GetRegionPropertiesResponse>(std::bind(&WithStreamedUnaryMethod_GetRegionProperties<BaseClass>::StreamedGetRegionProperties, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRegionProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRegionProperties(::grpc::ServerContext* context, const ::debugpb::GetRegionPropertiesRequest* request, ::debugpb::GetRegionPropertiesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRegionProperties(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::debugpb::GetRegionPropertiesRequest,::debugpb::GetRegionPropertiesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_RaftLog<WithStreamedUnaryMethod_RegionInfo<WithStreamedUnaryMethod_RegionSize<WithStreamedUnaryMethod_Compact<WithStreamedUnaryMethod_InjectFailPoint<WithStreamedUnaryMethod_RecoverFailPoint<WithStreamedUnaryMethod_ListFailPoints<WithStreamedUnaryMethod_GetMetrics<WithStreamedUnaryMethod_CheckRegionConsistency<WithStreamedUnaryMethod_ModifyTikvConfig<WithStreamedUnaryMethod_GetRegionProperties<Service > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ScanMvcc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_ScanMvcc() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler< ::debugpb::ScanMvccRequest, ::debugpb::ScanMvccResponse>(std::bind(&WithSplitStreamingMethod_ScanMvcc<BaseClass>::StreamedScanMvcc, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_ScanMvcc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ScanMvcc(::grpc::ServerContext* context, const ::debugpb::ScanMvccRequest* request, ::grpc::ServerWriter< ::debugpb::ScanMvccResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedScanMvcc(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::debugpb::ScanMvccRequest,::debugpb::ScanMvccResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ScanMvcc<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_RaftLog<WithStreamedUnaryMethod_RegionInfo<WithStreamedUnaryMethod_RegionSize<WithSplitStreamingMethod_ScanMvcc<WithStreamedUnaryMethod_Compact<WithStreamedUnaryMethod_InjectFailPoint<WithStreamedUnaryMethod_RecoverFailPoint<WithStreamedUnaryMethod_ListFailPoints<WithStreamedUnaryMethod_GetMetrics<WithStreamedUnaryMethod_CheckRegionConsistency<WithStreamedUnaryMethod_ModifyTikvConfig<WithStreamedUnaryMethod_GetRegionProperties<Service > > > > > > > > > > > > > StreamedService;
};

}  // namespace debugpb


#endif  // GRPC_debugpb_2eproto__INCLUDED
