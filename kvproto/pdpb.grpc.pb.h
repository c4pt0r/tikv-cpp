// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pdpb.proto
#ifndef GRPC_pdpb_2eproto__INCLUDED
#define GRPC_pdpb_2eproto__INCLUDED

#include "pdpb.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace pdpb {

class PD final {
 public:
  static constexpr char const* service_full_name() {
    return "pdpb.PD";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // GetMembers get the member list of this cluster. It does not require
    // the cluster_id in request matchs the id of this cluster.
    virtual ::grpc::Status GetMembers(::grpc::ClientContext* context, const ::pdpb::GetMembersRequest& request, ::pdpb::GetMembersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetMembersResponse>> AsyncGetMembers(::grpc::ClientContext* context, const ::pdpb::GetMembersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetMembersResponse>>(AsyncGetMembersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetMembersResponse>> PrepareAsyncGetMembers(::grpc::ClientContext* context, const ::pdpb::GetMembersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetMembersResponse>>(PrepareAsyncGetMembersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::pdpb::TsoRequest, ::pdpb::TsoResponse>> Tso(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::pdpb::TsoRequest, ::pdpb::TsoResponse>>(TsoRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::pdpb::TsoRequest, ::pdpb::TsoResponse>> AsyncTso(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::pdpb::TsoRequest, ::pdpb::TsoResponse>>(AsyncTsoRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::pdpb::TsoRequest, ::pdpb::TsoResponse>> PrepareAsyncTso(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::pdpb::TsoRequest, ::pdpb::TsoResponse>>(PrepareAsyncTsoRaw(context, cq));
    }
    virtual ::grpc::Status Bootstrap(::grpc::ClientContext* context, const ::pdpb::BootstrapRequest& request, ::pdpb::BootstrapResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::BootstrapResponse>> AsyncBootstrap(::grpc::ClientContext* context, const ::pdpb::BootstrapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::BootstrapResponse>>(AsyncBootstrapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::BootstrapResponse>> PrepareAsyncBootstrap(::grpc::ClientContext* context, const ::pdpb::BootstrapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::BootstrapResponse>>(PrepareAsyncBootstrapRaw(context, request, cq));
    }
    virtual ::grpc::Status IsBootstrapped(::grpc::ClientContext* context, const ::pdpb::IsBootstrappedRequest& request, ::pdpb::IsBootstrappedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::IsBootstrappedResponse>> AsyncIsBootstrapped(::grpc::ClientContext* context, const ::pdpb::IsBootstrappedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::IsBootstrappedResponse>>(AsyncIsBootstrappedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::IsBootstrappedResponse>> PrepareAsyncIsBootstrapped(::grpc::ClientContext* context, const ::pdpb::IsBootstrappedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::IsBootstrappedResponse>>(PrepareAsyncIsBootstrappedRaw(context, request, cq));
    }
    virtual ::grpc::Status AllocID(::grpc::ClientContext* context, const ::pdpb::AllocIDRequest& request, ::pdpb::AllocIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::AllocIDResponse>> AsyncAllocID(::grpc::ClientContext* context, const ::pdpb::AllocIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::AllocIDResponse>>(AsyncAllocIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::AllocIDResponse>> PrepareAsyncAllocID(::grpc::ClientContext* context, const ::pdpb::AllocIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::AllocIDResponse>>(PrepareAsyncAllocIDRaw(context, request, cq));
    }
    virtual ::grpc::Status GetStore(::grpc::ClientContext* context, const ::pdpb::GetStoreRequest& request, ::pdpb::GetStoreResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetStoreResponse>> AsyncGetStore(::grpc::ClientContext* context, const ::pdpb::GetStoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetStoreResponse>>(AsyncGetStoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetStoreResponse>> PrepareAsyncGetStore(::grpc::ClientContext* context, const ::pdpb::GetStoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetStoreResponse>>(PrepareAsyncGetStoreRaw(context, request, cq));
    }
    virtual ::grpc::Status PutStore(::grpc::ClientContext* context, const ::pdpb::PutStoreRequest& request, ::pdpb::PutStoreResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::PutStoreResponse>> AsyncPutStore(::grpc::ClientContext* context, const ::pdpb::PutStoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::PutStoreResponse>>(AsyncPutStoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::PutStoreResponse>> PrepareAsyncPutStore(::grpc::ClientContext* context, const ::pdpb::PutStoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::PutStoreResponse>>(PrepareAsyncPutStoreRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllStores(::grpc::ClientContext* context, const ::pdpb::GetAllStoresRequest& request, ::pdpb::GetAllStoresResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetAllStoresResponse>> AsyncGetAllStores(::grpc::ClientContext* context, const ::pdpb::GetAllStoresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetAllStoresResponse>>(AsyncGetAllStoresRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetAllStoresResponse>> PrepareAsyncGetAllStores(::grpc::ClientContext* context, const ::pdpb::GetAllStoresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetAllStoresResponse>>(PrepareAsyncGetAllStoresRaw(context, request, cq));
    }
    virtual ::grpc::Status StoreHeartbeat(::grpc::ClientContext* context, const ::pdpb::StoreHeartbeatRequest& request, ::pdpb::StoreHeartbeatResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::StoreHeartbeatResponse>> AsyncStoreHeartbeat(::grpc::ClientContext* context, const ::pdpb::StoreHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::StoreHeartbeatResponse>>(AsyncStoreHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::StoreHeartbeatResponse>> PrepareAsyncStoreHeartbeat(::grpc::ClientContext* context, const ::pdpb::StoreHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::StoreHeartbeatResponse>>(PrepareAsyncStoreHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::pdpb::RegionHeartbeatRequest, ::pdpb::RegionHeartbeatResponse>> RegionHeartbeat(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::pdpb::RegionHeartbeatRequest, ::pdpb::RegionHeartbeatResponse>>(RegionHeartbeatRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::pdpb::RegionHeartbeatRequest, ::pdpb::RegionHeartbeatResponse>> AsyncRegionHeartbeat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::pdpb::RegionHeartbeatRequest, ::pdpb::RegionHeartbeatResponse>>(AsyncRegionHeartbeatRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::pdpb::RegionHeartbeatRequest, ::pdpb::RegionHeartbeatResponse>> PrepareAsyncRegionHeartbeat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::pdpb::RegionHeartbeatRequest, ::pdpb::RegionHeartbeatResponse>>(PrepareAsyncRegionHeartbeatRaw(context, cq));
    }
    virtual ::grpc::Status GetRegion(::grpc::ClientContext* context, const ::pdpb::GetRegionRequest& request, ::pdpb::GetRegionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetRegionResponse>> AsyncGetRegion(::grpc::ClientContext* context, const ::pdpb::GetRegionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetRegionResponse>>(AsyncGetRegionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetRegionResponse>> PrepareAsyncGetRegion(::grpc::ClientContext* context, const ::pdpb::GetRegionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetRegionResponse>>(PrepareAsyncGetRegionRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPrevRegion(::grpc::ClientContext* context, const ::pdpb::GetRegionRequest& request, ::pdpb::GetRegionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetRegionResponse>> AsyncGetPrevRegion(::grpc::ClientContext* context, const ::pdpb::GetRegionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetRegionResponse>>(AsyncGetPrevRegionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetRegionResponse>> PrepareAsyncGetPrevRegion(::grpc::ClientContext* context, const ::pdpb::GetRegionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetRegionResponse>>(PrepareAsyncGetPrevRegionRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRegionByID(::grpc::ClientContext* context, const ::pdpb::GetRegionByIDRequest& request, ::pdpb::GetRegionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetRegionResponse>> AsyncGetRegionByID(::grpc::ClientContext* context, const ::pdpb::GetRegionByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetRegionResponse>>(AsyncGetRegionByIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetRegionResponse>> PrepareAsyncGetRegionByID(::grpc::ClientContext* context, const ::pdpb::GetRegionByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetRegionResponse>>(PrepareAsyncGetRegionByIDRaw(context, request, cq));
    }
    virtual ::grpc::Status AskSplit(::grpc::ClientContext* context, const ::pdpb::AskSplitRequest& request, ::pdpb::AskSplitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::AskSplitResponse>> AsyncAskSplit(::grpc::ClientContext* context, const ::pdpb::AskSplitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::AskSplitResponse>>(AsyncAskSplitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::AskSplitResponse>> PrepareAsyncAskSplit(::grpc::ClientContext* context, const ::pdpb::AskSplitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::AskSplitResponse>>(PrepareAsyncAskSplitRaw(context, request, cq));
    }
    virtual ::grpc::Status ReportSplit(::grpc::ClientContext* context, const ::pdpb::ReportSplitRequest& request, ::pdpb::ReportSplitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::ReportSplitResponse>> AsyncReportSplit(::grpc::ClientContext* context, const ::pdpb::ReportSplitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::ReportSplitResponse>>(AsyncReportSplitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::ReportSplitResponse>> PrepareAsyncReportSplit(::grpc::ClientContext* context, const ::pdpb::ReportSplitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::ReportSplitResponse>>(PrepareAsyncReportSplitRaw(context, request, cq));
    }
    virtual ::grpc::Status GetClusterConfig(::grpc::ClientContext* context, const ::pdpb::GetClusterConfigRequest& request, ::pdpb::GetClusterConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetClusterConfigResponse>> AsyncGetClusterConfig(::grpc::ClientContext* context, const ::pdpb::GetClusterConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetClusterConfigResponse>>(AsyncGetClusterConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetClusterConfigResponse>> PrepareAsyncGetClusterConfig(::grpc::ClientContext* context, const ::pdpb::GetClusterConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetClusterConfigResponse>>(PrepareAsyncGetClusterConfigRaw(context, request, cq));
    }
    virtual ::grpc::Status PutClusterConfig(::grpc::ClientContext* context, const ::pdpb::PutClusterConfigRequest& request, ::pdpb::PutClusterConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::PutClusterConfigResponse>> AsyncPutClusterConfig(::grpc::ClientContext* context, const ::pdpb::PutClusterConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::PutClusterConfigResponse>>(AsyncPutClusterConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::PutClusterConfigResponse>> PrepareAsyncPutClusterConfig(::grpc::ClientContext* context, const ::pdpb::PutClusterConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::PutClusterConfigResponse>>(PrepareAsyncPutClusterConfigRaw(context, request, cq));
    }
    virtual ::grpc::Status ScatterRegion(::grpc::ClientContext* context, const ::pdpb::ScatterRegionRequest& request, ::pdpb::ScatterRegionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::ScatterRegionResponse>> AsyncScatterRegion(::grpc::ClientContext* context, const ::pdpb::ScatterRegionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::ScatterRegionResponse>>(AsyncScatterRegionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::ScatterRegionResponse>> PrepareAsyncScatterRegion(::grpc::ClientContext* context, const ::pdpb::ScatterRegionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::ScatterRegionResponse>>(PrepareAsyncScatterRegionRaw(context, request, cq));
    }
    virtual ::grpc::Status GetGCSafePoint(::grpc::ClientContext* context, const ::pdpb::GetGCSafePointRequest& request, ::pdpb::GetGCSafePointResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetGCSafePointResponse>> AsyncGetGCSafePoint(::grpc::ClientContext* context, const ::pdpb::GetGCSafePointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetGCSafePointResponse>>(AsyncGetGCSafePointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetGCSafePointResponse>> PrepareAsyncGetGCSafePoint(::grpc::ClientContext* context, const ::pdpb::GetGCSafePointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetGCSafePointResponse>>(PrepareAsyncGetGCSafePointRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateGCSafePoint(::grpc::ClientContext* context, const ::pdpb::UpdateGCSafePointRequest& request, ::pdpb::UpdateGCSafePointResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::UpdateGCSafePointResponse>> AsyncUpdateGCSafePoint(::grpc::ClientContext* context, const ::pdpb::UpdateGCSafePointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::UpdateGCSafePointResponse>>(AsyncUpdateGCSafePointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::UpdateGCSafePointResponse>> PrepareAsyncUpdateGCSafePoint(::grpc::ClientContext* context, const ::pdpb::UpdateGCSafePointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::UpdateGCSafePointResponse>>(PrepareAsyncUpdateGCSafePointRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetMembersResponse>* AsyncGetMembersRaw(::grpc::ClientContext* context, const ::pdpb::GetMembersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetMembersResponse>* PrepareAsyncGetMembersRaw(::grpc::ClientContext* context, const ::pdpb::GetMembersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::pdpb::TsoRequest, ::pdpb::TsoResponse>* TsoRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::pdpb::TsoRequest, ::pdpb::TsoResponse>* AsyncTsoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::pdpb::TsoRequest, ::pdpb::TsoResponse>* PrepareAsyncTsoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::BootstrapResponse>* AsyncBootstrapRaw(::grpc::ClientContext* context, const ::pdpb::BootstrapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::BootstrapResponse>* PrepareAsyncBootstrapRaw(::grpc::ClientContext* context, const ::pdpb::BootstrapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::IsBootstrappedResponse>* AsyncIsBootstrappedRaw(::grpc::ClientContext* context, const ::pdpb::IsBootstrappedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::IsBootstrappedResponse>* PrepareAsyncIsBootstrappedRaw(::grpc::ClientContext* context, const ::pdpb::IsBootstrappedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::AllocIDResponse>* AsyncAllocIDRaw(::grpc::ClientContext* context, const ::pdpb::AllocIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::AllocIDResponse>* PrepareAsyncAllocIDRaw(::grpc::ClientContext* context, const ::pdpb::AllocIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetStoreResponse>* AsyncGetStoreRaw(::grpc::ClientContext* context, const ::pdpb::GetStoreRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetStoreResponse>* PrepareAsyncGetStoreRaw(::grpc::ClientContext* context, const ::pdpb::GetStoreRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::PutStoreResponse>* AsyncPutStoreRaw(::grpc::ClientContext* context, const ::pdpb::PutStoreRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::PutStoreResponse>* PrepareAsyncPutStoreRaw(::grpc::ClientContext* context, const ::pdpb::PutStoreRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetAllStoresResponse>* AsyncGetAllStoresRaw(::grpc::ClientContext* context, const ::pdpb::GetAllStoresRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetAllStoresResponse>* PrepareAsyncGetAllStoresRaw(::grpc::ClientContext* context, const ::pdpb::GetAllStoresRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::StoreHeartbeatResponse>* AsyncStoreHeartbeatRaw(::grpc::ClientContext* context, const ::pdpb::StoreHeartbeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::StoreHeartbeatResponse>* PrepareAsyncStoreHeartbeatRaw(::grpc::ClientContext* context, const ::pdpb::StoreHeartbeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::pdpb::RegionHeartbeatRequest, ::pdpb::RegionHeartbeatResponse>* RegionHeartbeatRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::pdpb::RegionHeartbeatRequest, ::pdpb::RegionHeartbeatResponse>* AsyncRegionHeartbeatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::pdpb::RegionHeartbeatRequest, ::pdpb::RegionHeartbeatResponse>* PrepareAsyncRegionHeartbeatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetRegionResponse>* AsyncGetRegionRaw(::grpc::ClientContext* context, const ::pdpb::GetRegionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetRegionResponse>* PrepareAsyncGetRegionRaw(::grpc::ClientContext* context, const ::pdpb::GetRegionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetRegionResponse>* AsyncGetPrevRegionRaw(::grpc::ClientContext* context, const ::pdpb::GetRegionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetRegionResponse>* PrepareAsyncGetPrevRegionRaw(::grpc::ClientContext* context, const ::pdpb::GetRegionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetRegionResponse>* AsyncGetRegionByIDRaw(::grpc::ClientContext* context, const ::pdpb::GetRegionByIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetRegionResponse>* PrepareAsyncGetRegionByIDRaw(::grpc::ClientContext* context, const ::pdpb::GetRegionByIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::AskSplitResponse>* AsyncAskSplitRaw(::grpc::ClientContext* context, const ::pdpb::AskSplitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::AskSplitResponse>* PrepareAsyncAskSplitRaw(::grpc::ClientContext* context, const ::pdpb::AskSplitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::ReportSplitResponse>* AsyncReportSplitRaw(::grpc::ClientContext* context, const ::pdpb::ReportSplitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::ReportSplitResponse>* PrepareAsyncReportSplitRaw(::grpc::ClientContext* context, const ::pdpb::ReportSplitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetClusterConfigResponse>* AsyncGetClusterConfigRaw(::grpc::ClientContext* context, const ::pdpb::GetClusterConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetClusterConfigResponse>* PrepareAsyncGetClusterConfigRaw(::grpc::ClientContext* context, const ::pdpb::GetClusterConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::PutClusterConfigResponse>* AsyncPutClusterConfigRaw(::grpc::ClientContext* context, const ::pdpb::PutClusterConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::PutClusterConfigResponse>* PrepareAsyncPutClusterConfigRaw(::grpc::ClientContext* context, const ::pdpb::PutClusterConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::ScatterRegionResponse>* AsyncScatterRegionRaw(::grpc::ClientContext* context, const ::pdpb::ScatterRegionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::ScatterRegionResponse>* PrepareAsyncScatterRegionRaw(::grpc::ClientContext* context, const ::pdpb::ScatterRegionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetGCSafePointResponse>* AsyncGetGCSafePointRaw(::grpc::ClientContext* context, const ::pdpb::GetGCSafePointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::GetGCSafePointResponse>* PrepareAsyncGetGCSafePointRaw(::grpc::ClientContext* context, const ::pdpb::GetGCSafePointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::UpdateGCSafePointResponse>* AsyncUpdateGCSafePointRaw(::grpc::ClientContext* context, const ::pdpb::UpdateGCSafePointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pdpb::UpdateGCSafePointResponse>* PrepareAsyncUpdateGCSafePointRaw(::grpc::ClientContext* context, const ::pdpb::UpdateGCSafePointRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetMembers(::grpc::ClientContext* context, const ::pdpb::GetMembersRequest& request, ::pdpb::GetMembersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetMembersResponse>> AsyncGetMembers(::grpc::ClientContext* context, const ::pdpb::GetMembersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetMembersResponse>>(AsyncGetMembersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetMembersResponse>> PrepareAsyncGetMembers(::grpc::ClientContext* context, const ::pdpb::GetMembersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetMembersResponse>>(PrepareAsyncGetMembersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::pdpb::TsoRequest, ::pdpb::TsoResponse>> Tso(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::pdpb::TsoRequest, ::pdpb::TsoResponse>>(TsoRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::pdpb::TsoRequest, ::pdpb::TsoResponse>> AsyncTso(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::pdpb::TsoRequest, ::pdpb::TsoResponse>>(AsyncTsoRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::pdpb::TsoRequest, ::pdpb::TsoResponse>> PrepareAsyncTso(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::pdpb::TsoRequest, ::pdpb::TsoResponse>>(PrepareAsyncTsoRaw(context, cq));
    }
    ::grpc::Status Bootstrap(::grpc::ClientContext* context, const ::pdpb::BootstrapRequest& request, ::pdpb::BootstrapResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::BootstrapResponse>> AsyncBootstrap(::grpc::ClientContext* context, const ::pdpb::BootstrapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::BootstrapResponse>>(AsyncBootstrapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::BootstrapResponse>> PrepareAsyncBootstrap(::grpc::ClientContext* context, const ::pdpb::BootstrapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::BootstrapResponse>>(PrepareAsyncBootstrapRaw(context, request, cq));
    }
    ::grpc::Status IsBootstrapped(::grpc::ClientContext* context, const ::pdpb::IsBootstrappedRequest& request, ::pdpb::IsBootstrappedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::IsBootstrappedResponse>> AsyncIsBootstrapped(::grpc::ClientContext* context, const ::pdpb::IsBootstrappedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::IsBootstrappedResponse>>(AsyncIsBootstrappedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::IsBootstrappedResponse>> PrepareAsyncIsBootstrapped(::grpc::ClientContext* context, const ::pdpb::IsBootstrappedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::IsBootstrappedResponse>>(PrepareAsyncIsBootstrappedRaw(context, request, cq));
    }
    ::grpc::Status AllocID(::grpc::ClientContext* context, const ::pdpb::AllocIDRequest& request, ::pdpb::AllocIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::AllocIDResponse>> AsyncAllocID(::grpc::ClientContext* context, const ::pdpb::AllocIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::AllocIDResponse>>(AsyncAllocIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::AllocIDResponse>> PrepareAsyncAllocID(::grpc::ClientContext* context, const ::pdpb::AllocIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::AllocIDResponse>>(PrepareAsyncAllocIDRaw(context, request, cq));
    }
    ::grpc::Status GetStore(::grpc::ClientContext* context, const ::pdpb::GetStoreRequest& request, ::pdpb::GetStoreResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetStoreResponse>> AsyncGetStore(::grpc::ClientContext* context, const ::pdpb::GetStoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetStoreResponse>>(AsyncGetStoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetStoreResponse>> PrepareAsyncGetStore(::grpc::ClientContext* context, const ::pdpb::GetStoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetStoreResponse>>(PrepareAsyncGetStoreRaw(context, request, cq));
    }
    ::grpc::Status PutStore(::grpc::ClientContext* context, const ::pdpb::PutStoreRequest& request, ::pdpb::PutStoreResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::PutStoreResponse>> AsyncPutStore(::grpc::ClientContext* context, const ::pdpb::PutStoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::PutStoreResponse>>(AsyncPutStoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::PutStoreResponse>> PrepareAsyncPutStore(::grpc::ClientContext* context, const ::pdpb::PutStoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::PutStoreResponse>>(PrepareAsyncPutStoreRaw(context, request, cq));
    }
    ::grpc::Status GetAllStores(::grpc::ClientContext* context, const ::pdpb::GetAllStoresRequest& request, ::pdpb::GetAllStoresResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetAllStoresResponse>> AsyncGetAllStores(::grpc::ClientContext* context, const ::pdpb::GetAllStoresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetAllStoresResponse>>(AsyncGetAllStoresRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetAllStoresResponse>> PrepareAsyncGetAllStores(::grpc::ClientContext* context, const ::pdpb::GetAllStoresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetAllStoresResponse>>(PrepareAsyncGetAllStoresRaw(context, request, cq));
    }
    ::grpc::Status StoreHeartbeat(::grpc::ClientContext* context, const ::pdpb::StoreHeartbeatRequest& request, ::pdpb::StoreHeartbeatResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::StoreHeartbeatResponse>> AsyncStoreHeartbeat(::grpc::ClientContext* context, const ::pdpb::StoreHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::StoreHeartbeatResponse>>(AsyncStoreHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::StoreHeartbeatResponse>> PrepareAsyncStoreHeartbeat(::grpc::ClientContext* context, const ::pdpb::StoreHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::StoreHeartbeatResponse>>(PrepareAsyncStoreHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::pdpb::RegionHeartbeatRequest, ::pdpb::RegionHeartbeatResponse>> RegionHeartbeat(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::pdpb::RegionHeartbeatRequest, ::pdpb::RegionHeartbeatResponse>>(RegionHeartbeatRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::pdpb::RegionHeartbeatRequest, ::pdpb::RegionHeartbeatResponse>> AsyncRegionHeartbeat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::pdpb::RegionHeartbeatRequest, ::pdpb::RegionHeartbeatResponse>>(AsyncRegionHeartbeatRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::pdpb::RegionHeartbeatRequest, ::pdpb::RegionHeartbeatResponse>> PrepareAsyncRegionHeartbeat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::pdpb::RegionHeartbeatRequest, ::pdpb::RegionHeartbeatResponse>>(PrepareAsyncRegionHeartbeatRaw(context, cq));
    }
    ::grpc::Status GetRegion(::grpc::ClientContext* context, const ::pdpb::GetRegionRequest& request, ::pdpb::GetRegionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetRegionResponse>> AsyncGetRegion(::grpc::ClientContext* context, const ::pdpb::GetRegionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetRegionResponse>>(AsyncGetRegionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetRegionResponse>> PrepareAsyncGetRegion(::grpc::ClientContext* context, const ::pdpb::GetRegionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetRegionResponse>>(PrepareAsyncGetRegionRaw(context, request, cq));
    }
    ::grpc::Status GetPrevRegion(::grpc::ClientContext* context, const ::pdpb::GetRegionRequest& request, ::pdpb::GetRegionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetRegionResponse>> AsyncGetPrevRegion(::grpc::ClientContext* context, const ::pdpb::GetRegionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetRegionResponse>>(AsyncGetPrevRegionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetRegionResponse>> PrepareAsyncGetPrevRegion(::grpc::ClientContext* context, const ::pdpb::GetRegionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetRegionResponse>>(PrepareAsyncGetPrevRegionRaw(context, request, cq));
    }
    ::grpc::Status GetRegionByID(::grpc::ClientContext* context, const ::pdpb::GetRegionByIDRequest& request, ::pdpb::GetRegionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetRegionResponse>> AsyncGetRegionByID(::grpc::ClientContext* context, const ::pdpb::GetRegionByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetRegionResponse>>(AsyncGetRegionByIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetRegionResponse>> PrepareAsyncGetRegionByID(::grpc::ClientContext* context, const ::pdpb::GetRegionByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetRegionResponse>>(PrepareAsyncGetRegionByIDRaw(context, request, cq));
    }
    ::grpc::Status AskSplit(::grpc::ClientContext* context, const ::pdpb::AskSplitRequest& request, ::pdpb::AskSplitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::AskSplitResponse>> AsyncAskSplit(::grpc::ClientContext* context, const ::pdpb::AskSplitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::AskSplitResponse>>(AsyncAskSplitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::AskSplitResponse>> PrepareAsyncAskSplit(::grpc::ClientContext* context, const ::pdpb::AskSplitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::AskSplitResponse>>(PrepareAsyncAskSplitRaw(context, request, cq));
    }
    ::grpc::Status ReportSplit(::grpc::ClientContext* context, const ::pdpb::ReportSplitRequest& request, ::pdpb::ReportSplitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::ReportSplitResponse>> AsyncReportSplit(::grpc::ClientContext* context, const ::pdpb::ReportSplitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::ReportSplitResponse>>(AsyncReportSplitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::ReportSplitResponse>> PrepareAsyncReportSplit(::grpc::ClientContext* context, const ::pdpb::ReportSplitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::ReportSplitResponse>>(PrepareAsyncReportSplitRaw(context, request, cq));
    }
    ::grpc::Status GetClusterConfig(::grpc::ClientContext* context, const ::pdpb::GetClusterConfigRequest& request, ::pdpb::GetClusterConfigResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetClusterConfigResponse>> AsyncGetClusterConfig(::grpc::ClientContext* context, const ::pdpb::GetClusterConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetClusterConfigResponse>>(AsyncGetClusterConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetClusterConfigResponse>> PrepareAsyncGetClusterConfig(::grpc::ClientContext* context, const ::pdpb::GetClusterConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetClusterConfigResponse>>(PrepareAsyncGetClusterConfigRaw(context, request, cq));
    }
    ::grpc::Status PutClusterConfig(::grpc::ClientContext* context, const ::pdpb::PutClusterConfigRequest& request, ::pdpb::PutClusterConfigResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::PutClusterConfigResponse>> AsyncPutClusterConfig(::grpc::ClientContext* context, const ::pdpb::PutClusterConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::PutClusterConfigResponse>>(AsyncPutClusterConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::PutClusterConfigResponse>> PrepareAsyncPutClusterConfig(::grpc::ClientContext* context, const ::pdpb::PutClusterConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::PutClusterConfigResponse>>(PrepareAsyncPutClusterConfigRaw(context, request, cq));
    }
    ::grpc::Status ScatterRegion(::grpc::ClientContext* context, const ::pdpb::ScatterRegionRequest& request, ::pdpb::ScatterRegionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::ScatterRegionResponse>> AsyncScatterRegion(::grpc::ClientContext* context, const ::pdpb::ScatterRegionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::ScatterRegionResponse>>(AsyncScatterRegionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::ScatterRegionResponse>> PrepareAsyncScatterRegion(::grpc::ClientContext* context, const ::pdpb::ScatterRegionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::ScatterRegionResponse>>(PrepareAsyncScatterRegionRaw(context, request, cq));
    }
    ::grpc::Status GetGCSafePoint(::grpc::ClientContext* context, const ::pdpb::GetGCSafePointRequest& request, ::pdpb::GetGCSafePointResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetGCSafePointResponse>> AsyncGetGCSafePoint(::grpc::ClientContext* context, const ::pdpb::GetGCSafePointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetGCSafePointResponse>>(AsyncGetGCSafePointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetGCSafePointResponse>> PrepareAsyncGetGCSafePoint(::grpc::ClientContext* context, const ::pdpb::GetGCSafePointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::GetGCSafePointResponse>>(PrepareAsyncGetGCSafePointRaw(context, request, cq));
    }
    ::grpc::Status UpdateGCSafePoint(::grpc::ClientContext* context, const ::pdpb::UpdateGCSafePointRequest& request, ::pdpb::UpdateGCSafePointResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::UpdateGCSafePointResponse>> AsyncUpdateGCSafePoint(::grpc::ClientContext* context, const ::pdpb::UpdateGCSafePointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::UpdateGCSafePointResponse>>(AsyncUpdateGCSafePointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::UpdateGCSafePointResponse>> PrepareAsyncUpdateGCSafePoint(::grpc::ClientContext* context, const ::pdpb::UpdateGCSafePointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pdpb::UpdateGCSafePointResponse>>(PrepareAsyncUpdateGCSafePointRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::pdpb::GetMembersResponse>* AsyncGetMembersRaw(::grpc::ClientContext* context, const ::pdpb::GetMembersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::GetMembersResponse>* PrepareAsyncGetMembersRaw(::grpc::ClientContext* context, const ::pdpb::GetMembersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::pdpb::TsoRequest, ::pdpb::TsoResponse>* TsoRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::pdpb::TsoRequest, ::pdpb::TsoResponse>* AsyncTsoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::pdpb::TsoRequest, ::pdpb::TsoResponse>* PrepareAsyncTsoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::BootstrapResponse>* AsyncBootstrapRaw(::grpc::ClientContext* context, const ::pdpb::BootstrapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::BootstrapResponse>* PrepareAsyncBootstrapRaw(::grpc::ClientContext* context, const ::pdpb::BootstrapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::IsBootstrappedResponse>* AsyncIsBootstrappedRaw(::grpc::ClientContext* context, const ::pdpb::IsBootstrappedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::IsBootstrappedResponse>* PrepareAsyncIsBootstrappedRaw(::grpc::ClientContext* context, const ::pdpb::IsBootstrappedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::AllocIDResponse>* AsyncAllocIDRaw(::grpc::ClientContext* context, const ::pdpb::AllocIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::AllocIDResponse>* PrepareAsyncAllocIDRaw(::grpc::ClientContext* context, const ::pdpb::AllocIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::GetStoreResponse>* AsyncGetStoreRaw(::grpc::ClientContext* context, const ::pdpb::GetStoreRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::GetStoreResponse>* PrepareAsyncGetStoreRaw(::grpc::ClientContext* context, const ::pdpb::GetStoreRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::PutStoreResponse>* AsyncPutStoreRaw(::grpc::ClientContext* context, const ::pdpb::PutStoreRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::PutStoreResponse>* PrepareAsyncPutStoreRaw(::grpc::ClientContext* context, const ::pdpb::PutStoreRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::GetAllStoresResponse>* AsyncGetAllStoresRaw(::grpc::ClientContext* context, const ::pdpb::GetAllStoresRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::GetAllStoresResponse>* PrepareAsyncGetAllStoresRaw(::grpc::ClientContext* context, const ::pdpb::GetAllStoresRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::StoreHeartbeatResponse>* AsyncStoreHeartbeatRaw(::grpc::ClientContext* context, const ::pdpb::StoreHeartbeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::StoreHeartbeatResponse>* PrepareAsyncStoreHeartbeatRaw(::grpc::ClientContext* context, const ::pdpb::StoreHeartbeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::pdpb::RegionHeartbeatRequest, ::pdpb::RegionHeartbeatResponse>* RegionHeartbeatRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::pdpb::RegionHeartbeatRequest, ::pdpb::RegionHeartbeatResponse>* AsyncRegionHeartbeatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::pdpb::RegionHeartbeatRequest, ::pdpb::RegionHeartbeatResponse>* PrepareAsyncRegionHeartbeatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::GetRegionResponse>* AsyncGetRegionRaw(::grpc::ClientContext* context, const ::pdpb::GetRegionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::GetRegionResponse>* PrepareAsyncGetRegionRaw(::grpc::ClientContext* context, const ::pdpb::GetRegionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::GetRegionResponse>* AsyncGetPrevRegionRaw(::grpc::ClientContext* context, const ::pdpb::GetRegionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::GetRegionResponse>* PrepareAsyncGetPrevRegionRaw(::grpc::ClientContext* context, const ::pdpb::GetRegionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::GetRegionResponse>* AsyncGetRegionByIDRaw(::grpc::ClientContext* context, const ::pdpb::GetRegionByIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::GetRegionResponse>* PrepareAsyncGetRegionByIDRaw(::grpc::ClientContext* context, const ::pdpb::GetRegionByIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::AskSplitResponse>* AsyncAskSplitRaw(::grpc::ClientContext* context, const ::pdpb::AskSplitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::AskSplitResponse>* PrepareAsyncAskSplitRaw(::grpc::ClientContext* context, const ::pdpb::AskSplitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::ReportSplitResponse>* AsyncReportSplitRaw(::grpc::ClientContext* context, const ::pdpb::ReportSplitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::ReportSplitResponse>* PrepareAsyncReportSplitRaw(::grpc::ClientContext* context, const ::pdpb::ReportSplitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::GetClusterConfigResponse>* AsyncGetClusterConfigRaw(::grpc::ClientContext* context, const ::pdpb::GetClusterConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::GetClusterConfigResponse>* PrepareAsyncGetClusterConfigRaw(::grpc::ClientContext* context, const ::pdpb::GetClusterConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::PutClusterConfigResponse>* AsyncPutClusterConfigRaw(::grpc::ClientContext* context, const ::pdpb::PutClusterConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::PutClusterConfigResponse>* PrepareAsyncPutClusterConfigRaw(::grpc::ClientContext* context, const ::pdpb::PutClusterConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::ScatterRegionResponse>* AsyncScatterRegionRaw(::grpc::ClientContext* context, const ::pdpb::ScatterRegionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::ScatterRegionResponse>* PrepareAsyncScatterRegionRaw(::grpc::ClientContext* context, const ::pdpb::ScatterRegionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::GetGCSafePointResponse>* AsyncGetGCSafePointRaw(::grpc::ClientContext* context, const ::pdpb::GetGCSafePointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::GetGCSafePointResponse>* PrepareAsyncGetGCSafePointRaw(::grpc::ClientContext* context, const ::pdpb::GetGCSafePointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::UpdateGCSafePointResponse>* AsyncUpdateGCSafePointRaw(::grpc::ClientContext* context, const ::pdpb::UpdateGCSafePointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pdpb::UpdateGCSafePointResponse>* PrepareAsyncUpdateGCSafePointRaw(::grpc::ClientContext* context, const ::pdpb::UpdateGCSafePointRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetMembers_;
    const ::grpc::internal::RpcMethod rpcmethod_Tso_;
    const ::grpc::internal::RpcMethod rpcmethod_Bootstrap_;
    const ::grpc::internal::RpcMethod rpcmethod_IsBootstrapped_;
    const ::grpc::internal::RpcMethod rpcmethod_AllocID_;
    const ::grpc::internal::RpcMethod rpcmethod_GetStore_;
    const ::grpc::internal::RpcMethod rpcmethod_PutStore_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllStores_;
    const ::grpc::internal::RpcMethod rpcmethod_StoreHeartbeat_;
    const ::grpc::internal::RpcMethod rpcmethod_RegionHeartbeat_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRegion_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPrevRegion_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRegionByID_;
    const ::grpc::internal::RpcMethod rpcmethod_AskSplit_;
    const ::grpc::internal::RpcMethod rpcmethod_ReportSplit_;
    const ::grpc::internal::RpcMethod rpcmethod_GetClusterConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_PutClusterConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_ScatterRegion_;
    const ::grpc::internal::RpcMethod rpcmethod_GetGCSafePoint_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateGCSafePoint_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // GetMembers get the member list of this cluster. It does not require
    // the cluster_id in request matchs the id of this cluster.
    virtual ::grpc::Status GetMembers(::grpc::ServerContext* context, const ::pdpb::GetMembersRequest* request, ::pdpb::GetMembersResponse* response);
    virtual ::grpc::Status Tso(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::pdpb::TsoResponse, ::pdpb::TsoRequest>* stream);
    virtual ::grpc::Status Bootstrap(::grpc::ServerContext* context, const ::pdpb::BootstrapRequest* request, ::pdpb::BootstrapResponse* response);
    virtual ::grpc::Status IsBootstrapped(::grpc::ServerContext* context, const ::pdpb::IsBootstrappedRequest* request, ::pdpb::IsBootstrappedResponse* response);
    virtual ::grpc::Status AllocID(::grpc::ServerContext* context, const ::pdpb::AllocIDRequest* request, ::pdpb::AllocIDResponse* response);
    virtual ::grpc::Status GetStore(::grpc::ServerContext* context, const ::pdpb::GetStoreRequest* request, ::pdpb::GetStoreResponse* response);
    virtual ::grpc::Status PutStore(::grpc::ServerContext* context, const ::pdpb::PutStoreRequest* request, ::pdpb::PutStoreResponse* response);
    virtual ::grpc::Status GetAllStores(::grpc::ServerContext* context, const ::pdpb::GetAllStoresRequest* request, ::pdpb::GetAllStoresResponse* response);
    virtual ::grpc::Status StoreHeartbeat(::grpc::ServerContext* context, const ::pdpb::StoreHeartbeatRequest* request, ::pdpb::StoreHeartbeatResponse* response);
    virtual ::grpc::Status RegionHeartbeat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::pdpb::RegionHeartbeatResponse, ::pdpb::RegionHeartbeatRequest>* stream);
    virtual ::grpc::Status GetRegion(::grpc::ServerContext* context, const ::pdpb::GetRegionRequest* request, ::pdpb::GetRegionResponse* response);
    virtual ::grpc::Status GetPrevRegion(::grpc::ServerContext* context, const ::pdpb::GetRegionRequest* request, ::pdpb::GetRegionResponse* response);
    virtual ::grpc::Status GetRegionByID(::grpc::ServerContext* context, const ::pdpb::GetRegionByIDRequest* request, ::pdpb::GetRegionResponse* response);
    virtual ::grpc::Status AskSplit(::grpc::ServerContext* context, const ::pdpb::AskSplitRequest* request, ::pdpb::AskSplitResponse* response);
    virtual ::grpc::Status ReportSplit(::grpc::ServerContext* context, const ::pdpb::ReportSplitRequest* request, ::pdpb::ReportSplitResponse* response);
    virtual ::grpc::Status GetClusterConfig(::grpc::ServerContext* context, const ::pdpb::GetClusterConfigRequest* request, ::pdpb::GetClusterConfigResponse* response);
    virtual ::grpc::Status PutClusterConfig(::grpc::ServerContext* context, const ::pdpb::PutClusterConfigRequest* request, ::pdpb::PutClusterConfigResponse* response);
    virtual ::grpc::Status ScatterRegion(::grpc::ServerContext* context, const ::pdpb::ScatterRegionRequest* request, ::pdpb::ScatterRegionResponse* response);
    virtual ::grpc::Status GetGCSafePoint(::grpc::ServerContext* context, const ::pdpb::GetGCSafePointRequest* request, ::pdpb::GetGCSafePointResponse* response);
    virtual ::grpc::Status UpdateGCSafePoint(::grpc::ServerContext* context, const ::pdpb::UpdateGCSafePointRequest* request, ::pdpb::UpdateGCSafePointResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetMembers() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMembers(::grpc::ServerContext* context, const ::pdpb::GetMembersRequest* request, ::pdpb::GetMembersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMembers(::grpc::ServerContext* context, ::pdpb::GetMembersRequest* request, ::grpc::ServerAsyncResponseWriter< ::pdpb::GetMembersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Tso : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Tso() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Tso() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tso(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::pdpb::TsoResponse, ::pdpb::TsoRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTso(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::pdpb::TsoResponse, ::pdpb::TsoRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Bootstrap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Bootstrap() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Bootstrap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Bootstrap(::grpc::ServerContext* context, const ::pdpb::BootstrapRequest* request, ::pdpb::BootstrapResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBootstrap(::grpc::ServerContext* context, ::pdpb::BootstrapRequest* request, ::grpc::ServerAsyncResponseWriter< ::pdpb::BootstrapResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsBootstrapped : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_IsBootstrapped() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_IsBootstrapped() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsBootstrapped(::grpc::ServerContext* context, const ::pdpb::IsBootstrappedRequest* request, ::pdpb::IsBootstrappedResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsBootstrapped(::grpc::ServerContext* context, ::pdpb::IsBootstrappedRequest* request, ::grpc::ServerAsyncResponseWriter< ::pdpb::IsBootstrappedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AllocID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AllocID() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_AllocID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocID(::grpc::ServerContext* context, const ::pdpb::AllocIDRequest* request, ::pdpb::AllocIDResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllocID(::grpc::ServerContext* context, ::pdpb::AllocIDRequest* request, ::grpc::ServerAsyncResponseWriter< ::pdpb::AllocIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetStore() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetStore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStore(::grpc::ServerContext* context, const ::pdpb::GetStoreRequest* request, ::pdpb::GetStoreResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStore(::grpc::ServerContext* context, ::pdpb::GetStoreRequest* request, ::grpc::ServerAsyncResponseWriter< ::pdpb::GetStoreResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutStore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PutStore() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_PutStore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutStore(::grpc::ServerContext* context, const ::pdpb::PutStoreRequest* request, ::pdpb::PutStoreResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutStore(::grpc::ServerContext* context, ::pdpb::PutStoreRequest* request, ::grpc::ServerAsyncResponseWriter< ::pdpb::PutStoreResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllStores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAllStores() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetAllStores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllStores(::grpc::ServerContext* context, const ::pdpb::GetAllStoresRequest* request, ::pdpb::GetAllStoresResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllStores(::grpc::ServerContext* context, ::pdpb::GetAllStoresRequest* request, ::grpc::ServerAsyncResponseWriter< ::pdpb::GetAllStoresResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StoreHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StoreHeartbeat() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_StoreHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreHeartbeat(::grpc::ServerContext* context, const ::pdpb::StoreHeartbeatRequest* request, ::pdpb::StoreHeartbeatResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStoreHeartbeat(::grpc::ServerContext* context, ::pdpb::StoreHeartbeatRequest* request, ::grpc::ServerAsyncResponseWriter< ::pdpb::StoreHeartbeatResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegionHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RegionHeartbeat() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_RegionHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegionHeartbeat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::pdpb::RegionHeartbeatResponse, ::pdpb::RegionHeartbeatRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegionHeartbeat(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::pdpb::RegionHeartbeatResponse, ::pdpb::RegionHeartbeatRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(9, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetRegion() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRegion(::grpc::ServerContext* context, const ::pdpb::GetRegionRequest* request, ::pdpb::GetRegionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRegion(::grpc::ServerContext* context, ::pdpb::GetRegionRequest* request, ::grpc::ServerAsyncResponseWriter< ::pdpb::GetRegionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPrevRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetPrevRegion() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetPrevRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrevRegion(::grpc::ServerContext* context, const ::pdpb::GetRegionRequest* request, ::pdpb::GetRegionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPrevRegion(::grpc::ServerContext* context, ::pdpb::GetRegionRequest* request, ::grpc::ServerAsyncResponseWriter< ::pdpb::GetRegionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRegionByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetRegionByID() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetRegionByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRegionByID(::grpc::ServerContext* context, const ::pdpb::GetRegionByIDRequest* request, ::pdpb::GetRegionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRegionByID(::grpc::ServerContext* context, ::pdpb::GetRegionByIDRequest* request, ::grpc::ServerAsyncResponseWriter< ::pdpb::GetRegionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AskSplit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AskSplit() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_AskSplit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AskSplit(::grpc::ServerContext* context, const ::pdpb::AskSplitRequest* request, ::pdpb::AskSplitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAskSplit(::grpc::ServerContext* context, ::pdpb::AskSplitRequest* request, ::grpc::ServerAsyncResponseWriter< ::pdpb::AskSplitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReportSplit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ReportSplit() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_ReportSplit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportSplit(::grpc::ServerContext* context, const ::pdpb::ReportSplitRequest* request, ::pdpb::ReportSplitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportSplit(::grpc::ServerContext* context, ::pdpb::ReportSplitRequest* request, ::grpc::ServerAsyncResponseWriter< ::pdpb::ReportSplitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetClusterConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetClusterConfig() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_GetClusterConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClusterConfig(::grpc::ServerContext* context, const ::pdpb::GetClusterConfigRequest* request, ::pdpb::GetClusterConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetClusterConfig(::grpc::ServerContext* context, ::pdpb::GetClusterConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::pdpb::GetClusterConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutClusterConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PutClusterConfig() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_PutClusterConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutClusterConfig(::grpc::ServerContext* context, const ::pdpb::PutClusterConfigRequest* request, ::pdpb::PutClusterConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutClusterConfig(::grpc::ServerContext* context, ::pdpb::PutClusterConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::pdpb::PutClusterConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ScatterRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ScatterRegion() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_ScatterRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScatterRegion(::grpc::ServerContext* context, const ::pdpb::ScatterRegionRequest* request, ::pdpb::ScatterRegionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScatterRegion(::grpc::ServerContext* context, ::pdpb::ScatterRegionRequest* request, ::grpc::ServerAsyncResponseWriter< ::pdpb::ScatterRegionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetGCSafePoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetGCSafePoint() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_GetGCSafePoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGCSafePoint(::grpc::ServerContext* context, const ::pdpb::GetGCSafePointRequest* request, ::pdpb::GetGCSafePointResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGCSafePoint(::grpc::ServerContext* context, ::pdpb::GetGCSafePointRequest* request, ::grpc::ServerAsyncResponseWriter< ::pdpb::GetGCSafePointResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateGCSafePoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateGCSafePoint() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_UpdateGCSafePoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGCSafePoint(::grpc::ServerContext* context, const ::pdpb::UpdateGCSafePointRequest* request, ::pdpb::UpdateGCSafePointResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateGCSafePoint(::grpc::ServerContext* context, ::pdpb::UpdateGCSafePointRequest* request, ::grpc::ServerAsyncResponseWriter< ::pdpb::UpdateGCSafePointResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetMembers<WithAsyncMethod_Tso<WithAsyncMethod_Bootstrap<WithAsyncMethod_IsBootstrapped<WithAsyncMethod_AllocID<WithAsyncMethod_GetStore<WithAsyncMethod_PutStore<WithAsyncMethod_GetAllStores<WithAsyncMethod_StoreHeartbeat<WithAsyncMethod_RegionHeartbeat<WithAsyncMethod_GetRegion<WithAsyncMethod_GetPrevRegion<WithAsyncMethod_GetRegionByID<WithAsyncMethod_AskSplit<WithAsyncMethod_ReportSplit<WithAsyncMethod_GetClusterConfig<WithAsyncMethod_PutClusterConfig<WithAsyncMethod_ScatterRegion<WithAsyncMethod_GetGCSafePoint<WithAsyncMethod_UpdateGCSafePoint<Service > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetMembers() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMembers(::grpc::ServerContext* context, const ::pdpb::GetMembersRequest* request, ::pdpb::GetMembersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Tso : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Tso() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Tso() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tso(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::pdpb::TsoResponse, ::pdpb::TsoRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Bootstrap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Bootstrap() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Bootstrap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Bootstrap(::grpc::ServerContext* context, const ::pdpb::BootstrapRequest* request, ::pdpb::BootstrapResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsBootstrapped : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_IsBootstrapped() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_IsBootstrapped() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsBootstrapped(::grpc::ServerContext* context, const ::pdpb::IsBootstrappedRequest* request, ::pdpb::IsBootstrappedResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AllocID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AllocID() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_AllocID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocID(::grpc::ServerContext* context, const ::pdpb::AllocIDRequest* request, ::pdpb::AllocIDResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetStore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetStore() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetStore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStore(::grpc::ServerContext* context, const ::pdpb::GetStoreRequest* request, ::pdpb::GetStoreResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutStore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PutStore() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_PutStore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutStore(::grpc::ServerContext* context, const ::pdpb::PutStoreRequest* request, ::pdpb::PutStoreResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllStores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAllStores() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetAllStores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllStores(::grpc::ServerContext* context, const ::pdpb::GetAllStoresRequest* request, ::pdpb::GetAllStoresResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StoreHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StoreHeartbeat() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_StoreHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreHeartbeat(::grpc::ServerContext* context, const ::pdpb::StoreHeartbeatRequest* request, ::pdpb::StoreHeartbeatResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegionHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RegionHeartbeat() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_RegionHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegionHeartbeat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::pdpb::RegionHeartbeatResponse, ::pdpb::RegionHeartbeatRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetRegion() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRegion(::grpc::ServerContext* context, const ::pdpb::GetRegionRequest* request, ::pdpb::GetRegionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPrevRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetPrevRegion() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetPrevRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrevRegion(::grpc::ServerContext* context, const ::pdpb::GetRegionRequest* request, ::pdpb::GetRegionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRegionByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetRegionByID() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetRegionByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRegionByID(::grpc::ServerContext* context, const ::pdpb::GetRegionByIDRequest* request, ::pdpb::GetRegionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AskSplit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AskSplit() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_AskSplit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AskSplit(::grpc::ServerContext* context, const ::pdpb::AskSplitRequest* request, ::pdpb::AskSplitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReportSplit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ReportSplit() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_ReportSplit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportSplit(::grpc::ServerContext* context, const ::pdpb::ReportSplitRequest* request, ::pdpb::ReportSplitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetClusterConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetClusterConfig() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_GetClusterConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClusterConfig(::grpc::ServerContext* context, const ::pdpb::GetClusterConfigRequest* request, ::pdpb::GetClusterConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutClusterConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PutClusterConfig() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_PutClusterConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutClusterConfig(::grpc::ServerContext* context, const ::pdpb::PutClusterConfigRequest* request, ::pdpb::PutClusterConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ScatterRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ScatterRegion() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_ScatterRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScatterRegion(::grpc::ServerContext* context, const ::pdpb::ScatterRegionRequest* request, ::pdpb::ScatterRegionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetGCSafePoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetGCSafePoint() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_GetGCSafePoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGCSafePoint(::grpc::ServerContext* context, const ::pdpb::GetGCSafePointRequest* request, ::pdpb::GetGCSafePointResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateGCSafePoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateGCSafePoint() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_UpdateGCSafePoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGCSafePoint(::grpc::ServerContext* context, const ::pdpb::UpdateGCSafePointRequest* request, ::pdpb::UpdateGCSafePointResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetMembers() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMembers(::grpc::ServerContext* context, const ::pdpb::GetMembersRequest* request, ::pdpb::GetMembersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMembers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Tso : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Tso() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Tso() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tso(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::pdpb::TsoResponse, ::pdpb::TsoRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTso(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Bootstrap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Bootstrap() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Bootstrap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Bootstrap(::grpc::ServerContext* context, const ::pdpb::BootstrapRequest* request, ::pdpb::BootstrapResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBootstrap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsBootstrapped : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_IsBootstrapped() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_IsBootstrapped() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsBootstrapped(::grpc::ServerContext* context, const ::pdpb::IsBootstrappedRequest* request, ::pdpb::IsBootstrappedResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsBootstrapped(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AllocID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AllocID() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_AllocID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocID(::grpc::ServerContext* context, const ::pdpb::AllocIDRequest* request, ::pdpb::AllocIDResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllocID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetStore() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetStore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStore(::grpc::ServerContext* context, const ::pdpb::GetStoreRequest* request, ::pdpb::GetStoreResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStore(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutStore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PutStore() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_PutStore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutStore(::grpc::ServerContext* context, const ::pdpb::PutStoreRequest* request, ::pdpb::PutStoreResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutStore(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllStores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetAllStores() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetAllStores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllStores(::grpc::ServerContext* context, const ::pdpb::GetAllStoresRequest* request, ::pdpb::GetAllStoresResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllStores(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StoreHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_StoreHeartbeat() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_StoreHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreHeartbeat(::grpc::ServerContext* context, const ::pdpb::StoreHeartbeatRequest* request, ::pdpb::StoreHeartbeatResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStoreHeartbeat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegionHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RegionHeartbeat() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_RegionHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegionHeartbeat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::pdpb::RegionHeartbeatResponse, ::pdpb::RegionHeartbeatRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegionHeartbeat(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(9, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetRegion() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRegion(::grpc::ServerContext* context, const ::pdpb::GetRegionRequest* request, ::pdpb::GetRegionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRegion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPrevRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetPrevRegion() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetPrevRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPrevRegion(::grpc::ServerContext* context, const ::pdpb::GetRegionRequest* request, ::pdpb::GetRegionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPrevRegion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRegionByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetRegionByID() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetRegionByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRegionByID(::grpc::ServerContext* context, const ::pdpb::GetRegionByIDRequest* request, ::pdpb::GetRegionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRegionByID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AskSplit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AskSplit() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_AskSplit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AskSplit(::grpc::ServerContext* context, const ::pdpb::AskSplitRequest* request, ::pdpb::AskSplitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAskSplit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReportSplit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ReportSplit() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_ReportSplit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportSplit(::grpc::ServerContext* context, const ::pdpb::ReportSplitRequest* request, ::pdpb::ReportSplitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportSplit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetClusterConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetClusterConfig() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_GetClusterConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetClusterConfig(::grpc::ServerContext* context, const ::pdpb::GetClusterConfigRequest* request, ::pdpb::GetClusterConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetClusterConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutClusterConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PutClusterConfig() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_PutClusterConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutClusterConfig(::grpc::ServerContext* context, const ::pdpb::PutClusterConfigRequest* request, ::pdpb::PutClusterConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutClusterConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ScatterRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ScatterRegion() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_ScatterRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScatterRegion(::grpc::ServerContext* context, const ::pdpb::ScatterRegionRequest* request, ::pdpb::ScatterRegionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScatterRegion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetGCSafePoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetGCSafePoint() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_GetGCSafePoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGCSafePoint(::grpc::ServerContext* context, const ::pdpb::GetGCSafePointRequest* request, ::pdpb::GetGCSafePointResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGCSafePoint(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateGCSafePoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateGCSafePoint() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_UpdateGCSafePoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGCSafePoint(::grpc::ServerContext* context, const ::pdpb::UpdateGCSafePointRequest* request, ::pdpb::UpdateGCSafePointResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateGCSafePoint(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetMembers() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::pdpb::GetMembersRequest, ::pdpb::GetMembersResponse>(std::bind(&WithStreamedUnaryMethod_GetMembers<BaseClass>::StreamedGetMembers, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMembers(::grpc::ServerContext* context, const ::pdpb::GetMembersRequest* request, ::pdpb::GetMembersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMembers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pdpb::GetMembersRequest,::pdpb::GetMembersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Bootstrap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Bootstrap() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::pdpb::BootstrapRequest, ::pdpb::BootstrapResponse>(std::bind(&WithStreamedUnaryMethod_Bootstrap<BaseClass>::StreamedBootstrap, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Bootstrap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Bootstrap(::grpc::ServerContext* context, const ::pdpb::BootstrapRequest* request, ::pdpb::BootstrapResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBootstrap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pdpb::BootstrapRequest,::pdpb::BootstrapResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsBootstrapped : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_IsBootstrapped() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::pdpb::IsBootstrappedRequest, ::pdpb::IsBootstrappedResponse>(std::bind(&WithStreamedUnaryMethod_IsBootstrapped<BaseClass>::StreamedIsBootstrapped, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_IsBootstrapped() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsBootstrapped(::grpc::ServerContext* context, const ::pdpb::IsBootstrappedRequest* request, ::pdpb::IsBootstrappedResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsBootstrapped(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pdpb::IsBootstrappedRequest,::pdpb::IsBootstrappedResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AllocID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AllocID() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::pdpb::AllocIDRequest, ::pdpb::AllocIDResponse>(std::bind(&WithStreamedUnaryMethod_AllocID<BaseClass>::StreamedAllocID, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AllocID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AllocID(::grpc::ServerContext* context, const ::pdpb::AllocIDRequest* request, ::pdpb::AllocIDResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAllocID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pdpb::AllocIDRequest,::pdpb::AllocIDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetStore() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::pdpb::GetStoreRequest, ::pdpb::GetStoreResponse>(std::bind(&WithStreamedUnaryMethod_GetStore<BaseClass>::StreamedGetStore, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetStore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStore(::grpc::ServerContext* context, const ::pdpb::GetStoreRequest* request, ::pdpb::GetStoreResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStore(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pdpb::GetStoreRequest,::pdpb::GetStoreResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutStore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PutStore() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::pdpb::PutStoreRequest, ::pdpb::PutStoreResponse>(std::bind(&WithStreamedUnaryMethod_PutStore<BaseClass>::StreamedPutStore, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PutStore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutStore(::grpc::ServerContext* context, const ::pdpb::PutStoreRequest* request, ::pdpb::PutStoreResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutStore(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pdpb::PutStoreRequest,::pdpb::PutStoreResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllStores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAllStores() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::pdpb::GetAllStoresRequest, ::pdpb::GetAllStoresResponse>(std::bind(&WithStreamedUnaryMethod_GetAllStores<BaseClass>::StreamedGetAllStores, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAllStores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllStores(::grpc::ServerContext* context, const ::pdpb::GetAllStoresRequest* request, ::pdpb::GetAllStoresResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllStores(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pdpb::GetAllStoresRequest,::pdpb::GetAllStoresResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StoreHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_StoreHeartbeat() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::pdpb::StoreHeartbeatRequest, ::pdpb::StoreHeartbeatResponse>(std::bind(&WithStreamedUnaryMethod_StoreHeartbeat<BaseClass>::StreamedStoreHeartbeat, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StoreHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StoreHeartbeat(::grpc::ServerContext* context, const ::pdpb::StoreHeartbeatRequest* request, ::pdpb::StoreHeartbeatResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStoreHeartbeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pdpb::StoreHeartbeatRequest,::pdpb::StoreHeartbeatResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetRegion() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::pdpb::GetRegionRequest, ::pdpb::GetRegionResponse>(std::bind(&WithStreamedUnaryMethod_GetRegion<BaseClass>::StreamedGetRegion, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRegion(::grpc::ServerContext* context, const ::pdpb::GetRegionRequest* request, ::pdpb::GetRegionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRegion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pdpb::GetRegionRequest,::pdpb::GetRegionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPrevRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetPrevRegion() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::pdpb::GetRegionRequest, ::pdpb::GetRegionResponse>(std::bind(&WithStreamedUnaryMethod_GetPrevRegion<BaseClass>::StreamedGetPrevRegion, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPrevRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPrevRegion(::grpc::ServerContext* context, const ::pdpb::GetRegionRequest* request, ::pdpb::GetRegionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPrevRegion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pdpb::GetRegionRequest,::pdpb::GetRegionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRegionByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetRegionByID() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::pdpb::GetRegionByIDRequest, ::pdpb::GetRegionResponse>(std::bind(&WithStreamedUnaryMethod_GetRegionByID<BaseClass>::StreamedGetRegionByID, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRegionByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRegionByID(::grpc::ServerContext* context, const ::pdpb::GetRegionByIDRequest* request, ::pdpb::GetRegionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRegionByID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pdpb::GetRegionByIDRequest,::pdpb::GetRegionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AskSplit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AskSplit() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::pdpb::AskSplitRequest, ::pdpb::AskSplitResponse>(std::bind(&WithStreamedUnaryMethod_AskSplit<BaseClass>::StreamedAskSplit, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AskSplit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AskSplit(::grpc::ServerContext* context, const ::pdpb::AskSplitRequest* request, ::pdpb::AskSplitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAskSplit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pdpb::AskSplitRequest,::pdpb::AskSplitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReportSplit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ReportSplit() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::pdpb::ReportSplitRequest, ::pdpb::ReportSplitResponse>(std::bind(&WithStreamedUnaryMethod_ReportSplit<BaseClass>::StreamedReportSplit, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ReportSplit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReportSplit(::grpc::ServerContext* context, const ::pdpb::ReportSplitRequest* request, ::pdpb::ReportSplitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReportSplit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pdpb::ReportSplitRequest,::pdpb::ReportSplitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetClusterConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetClusterConfig() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler< ::pdpb::GetClusterConfigRequest, ::pdpb::GetClusterConfigResponse>(std::bind(&WithStreamedUnaryMethod_GetClusterConfig<BaseClass>::StreamedGetClusterConfig, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetClusterConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetClusterConfig(::grpc::ServerContext* context, const ::pdpb::GetClusterConfigRequest* request, ::pdpb::GetClusterConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetClusterConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pdpb::GetClusterConfigRequest,::pdpb::GetClusterConfigResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutClusterConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PutClusterConfig() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler< ::pdpb::PutClusterConfigRequest, ::pdpb::PutClusterConfigResponse>(std::bind(&WithStreamedUnaryMethod_PutClusterConfig<BaseClass>::StreamedPutClusterConfig, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PutClusterConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutClusterConfig(::grpc::ServerContext* context, const ::pdpb::PutClusterConfigRequest* request, ::pdpb::PutClusterConfigResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutClusterConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pdpb::PutClusterConfigRequest,::pdpb::PutClusterConfigResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ScatterRegion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ScatterRegion() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler< ::pdpb::ScatterRegionRequest, ::pdpb::ScatterRegionResponse>(std::bind(&WithStreamedUnaryMethod_ScatterRegion<BaseClass>::StreamedScatterRegion, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ScatterRegion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ScatterRegion(::grpc::ServerContext* context, const ::pdpb::ScatterRegionRequest* request, ::pdpb::ScatterRegionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedScatterRegion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pdpb::ScatterRegionRequest,::pdpb::ScatterRegionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetGCSafePoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetGCSafePoint() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler< ::pdpb::GetGCSafePointRequest, ::pdpb::GetGCSafePointResponse>(std::bind(&WithStreamedUnaryMethod_GetGCSafePoint<BaseClass>::StreamedGetGCSafePoint, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetGCSafePoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetGCSafePoint(::grpc::ServerContext* context, const ::pdpb::GetGCSafePointRequest* request, ::pdpb::GetGCSafePointResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetGCSafePoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pdpb::GetGCSafePointRequest,::pdpb::GetGCSafePointResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateGCSafePoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateGCSafePoint() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler< ::pdpb::UpdateGCSafePointRequest, ::pdpb::UpdateGCSafePointResponse>(std::bind(&WithStreamedUnaryMethod_UpdateGCSafePoint<BaseClass>::StreamedUpdateGCSafePoint, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateGCSafePoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateGCSafePoint(::grpc::ServerContext* context, const ::pdpb::UpdateGCSafePointRequest* request, ::pdpb::UpdateGCSafePointResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateGCSafePoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pdpb::UpdateGCSafePointRequest,::pdpb::UpdateGCSafePointResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetMembers<WithStreamedUnaryMethod_Bootstrap<WithStreamedUnaryMethod_IsBootstrapped<WithStreamedUnaryMethod_AllocID<WithStreamedUnaryMethod_GetStore<WithStreamedUnaryMethod_PutStore<WithStreamedUnaryMethod_GetAllStores<WithStreamedUnaryMethod_StoreHeartbeat<WithStreamedUnaryMethod_GetRegion<WithStreamedUnaryMethod_GetPrevRegion<WithStreamedUnaryMethod_GetRegionByID<WithStreamedUnaryMethod_AskSplit<WithStreamedUnaryMethod_ReportSplit<WithStreamedUnaryMethod_GetClusterConfig<WithStreamedUnaryMethod_PutClusterConfig<WithStreamedUnaryMethod_ScatterRegion<WithStreamedUnaryMethod_GetGCSafePoint<WithStreamedUnaryMethod_UpdateGCSafePoint<Service > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetMembers<WithStreamedUnaryMethod_Bootstrap<WithStreamedUnaryMethod_IsBootstrapped<WithStreamedUnaryMethod_AllocID<WithStreamedUnaryMethod_GetStore<WithStreamedUnaryMethod_PutStore<WithStreamedUnaryMethod_GetAllStores<WithStreamedUnaryMethod_StoreHeartbeat<WithStreamedUnaryMethod_GetRegion<WithStreamedUnaryMethod_GetPrevRegion<WithStreamedUnaryMethod_GetRegionByID<WithStreamedUnaryMethod_AskSplit<WithStreamedUnaryMethod_ReportSplit<WithStreamedUnaryMethod_GetClusterConfig<WithStreamedUnaryMethod_PutClusterConfig<WithStreamedUnaryMethod_ScatterRegion<WithStreamedUnaryMethod_GetGCSafePoint<WithStreamedUnaryMethod_UpdateGCSafePoint<Service > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace pdpb


#endif  // GRPC_pdpb_2eproto__INCLUDED
