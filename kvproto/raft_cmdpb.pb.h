// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_cmdpb.proto

#ifndef PROTOBUF_INCLUDED_raft_5fcmdpb_2eproto
#define PROTOBUF_INCLUDED_raft_5fcmdpb_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "metapb.pb.h"
#include "errorpb.pb.h"
#include "eraftpb.pb.h"
#include "import_sstpb.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_raft_5fcmdpb_2eproto 

namespace protobuf_raft_5fcmdpb_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[44];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_raft_5fcmdpb_2eproto
namespace raft_cmdpb {
class AdminRequest;
class AdminRequestDefaultTypeInternal;
extern AdminRequestDefaultTypeInternal _AdminRequest_default_instance_;
class AdminResponse;
class AdminResponseDefaultTypeInternal;
extern AdminResponseDefaultTypeInternal _AdminResponse_default_instance_;
class ChangePeerRequest;
class ChangePeerRequestDefaultTypeInternal;
extern ChangePeerRequestDefaultTypeInternal _ChangePeerRequest_default_instance_;
class ChangePeerResponse;
class ChangePeerResponseDefaultTypeInternal;
extern ChangePeerResponseDefaultTypeInternal _ChangePeerResponse_default_instance_;
class CommitMergeRequest;
class CommitMergeRequestDefaultTypeInternal;
extern CommitMergeRequestDefaultTypeInternal _CommitMergeRequest_default_instance_;
class CommitMergeResponse;
class CommitMergeResponseDefaultTypeInternal;
extern CommitMergeResponseDefaultTypeInternal _CommitMergeResponse_default_instance_;
class CompactLogRequest;
class CompactLogRequestDefaultTypeInternal;
extern CompactLogRequestDefaultTypeInternal _CompactLogRequest_default_instance_;
class CompactLogResponse;
class CompactLogResponseDefaultTypeInternal;
extern CompactLogResponseDefaultTypeInternal _CompactLogResponse_default_instance_;
class DeleteRangeRequest;
class DeleteRangeRequestDefaultTypeInternal;
extern DeleteRangeRequestDefaultTypeInternal _DeleteRangeRequest_default_instance_;
class DeleteRangeResponse;
class DeleteRangeResponseDefaultTypeInternal;
extern DeleteRangeResponseDefaultTypeInternal _DeleteRangeResponse_default_instance_;
class DeleteRequest;
class DeleteRequestDefaultTypeInternal;
extern DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
class DeleteResponse;
class DeleteResponseDefaultTypeInternal;
extern DeleteResponseDefaultTypeInternal _DeleteResponse_default_instance_;
class GetRequest;
class GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class GetResponse;
class GetResponseDefaultTypeInternal;
extern GetResponseDefaultTypeInternal _GetResponse_default_instance_;
class IngestSSTRequest;
class IngestSSTRequestDefaultTypeInternal;
extern IngestSSTRequestDefaultTypeInternal _IngestSSTRequest_default_instance_;
class IngestSSTResponse;
class IngestSSTResponseDefaultTypeInternal;
extern IngestSSTResponseDefaultTypeInternal _IngestSSTResponse_default_instance_;
class PrepareMergeRequest;
class PrepareMergeRequestDefaultTypeInternal;
extern PrepareMergeRequestDefaultTypeInternal _PrepareMergeRequest_default_instance_;
class PrepareMergeResponse;
class PrepareMergeResponseDefaultTypeInternal;
extern PrepareMergeResponseDefaultTypeInternal _PrepareMergeResponse_default_instance_;
class PrewriteRequest;
class PrewriteRequestDefaultTypeInternal;
extern PrewriteRequestDefaultTypeInternal _PrewriteRequest_default_instance_;
class PrewriteResponse;
class PrewriteResponseDefaultTypeInternal;
extern PrewriteResponseDefaultTypeInternal _PrewriteResponse_default_instance_;
class PutRequest;
class PutRequestDefaultTypeInternal;
extern PutRequestDefaultTypeInternal _PutRequest_default_instance_;
class PutResponse;
class PutResponseDefaultTypeInternal;
extern PutResponseDefaultTypeInternal _PutResponse_default_instance_;
class RaftCmdRequest;
class RaftCmdRequestDefaultTypeInternal;
extern RaftCmdRequestDefaultTypeInternal _RaftCmdRequest_default_instance_;
class RaftCmdResponse;
class RaftCmdResponseDefaultTypeInternal;
extern RaftCmdResponseDefaultTypeInternal _RaftCmdResponse_default_instance_;
class RaftRequestHeader;
class RaftRequestHeaderDefaultTypeInternal;
extern RaftRequestHeaderDefaultTypeInternal _RaftRequestHeader_default_instance_;
class RaftResponseHeader;
class RaftResponseHeaderDefaultTypeInternal;
extern RaftResponseHeaderDefaultTypeInternal _RaftResponseHeader_default_instance_;
class RegionDetailRequest;
class RegionDetailRequestDefaultTypeInternal;
extern RegionDetailRequestDefaultTypeInternal _RegionDetailRequest_default_instance_;
class RegionDetailResponse;
class RegionDetailResponseDefaultTypeInternal;
extern RegionDetailResponseDefaultTypeInternal _RegionDetailResponse_default_instance_;
class RegionLeaderRequest;
class RegionLeaderRequestDefaultTypeInternal;
extern RegionLeaderRequestDefaultTypeInternal _RegionLeaderRequest_default_instance_;
class RegionLeaderResponse;
class RegionLeaderResponseDefaultTypeInternal;
extern RegionLeaderResponseDefaultTypeInternal _RegionLeaderResponse_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class RollbackMergeRequest;
class RollbackMergeRequestDefaultTypeInternal;
extern RollbackMergeRequestDefaultTypeInternal _RollbackMergeRequest_default_instance_;
class RollbackMergeResponse;
class RollbackMergeResponseDefaultTypeInternal;
extern RollbackMergeResponseDefaultTypeInternal _RollbackMergeResponse_default_instance_;
class SnapRequest;
class SnapRequestDefaultTypeInternal;
extern SnapRequestDefaultTypeInternal _SnapRequest_default_instance_;
class SnapResponse;
class SnapResponseDefaultTypeInternal;
extern SnapResponseDefaultTypeInternal _SnapResponse_default_instance_;
class SplitRequest;
class SplitRequestDefaultTypeInternal;
extern SplitRequestDefaultTypeInternal _SplitRequest_default_instance_;
class SplitResponse;
class SplitResponseDefaultTypeInternal;
extern SplitResponseDefaultTypeInternal _SplitResponse_default_instance_;
class StatusRequest;
class StatusRequestDefaultTypeInternal;
extern StatusRequestDefaultTypeInternal _StatusRequest_default_instance_;
class StatusResponse;
class StatusResponseDefaultTypeInternal;
extern StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
class TransferLeaderRequest;
class TransferLeaderRequestDefaultTypeInternal;
extern TransferLeaderRequestDefaultTypeInternal _TransferLeaderRequest_default_instance_;
class TransferLeaderResponse;
class TransferLeaderResponseDefaultTypeInternal;
extern TransferLeaderResponseDefaultTypeInternal _TransferLeaderResponse_default_instance_;
class VerifyHashRequest;
class VerifyHashRequestDefaultTypeInternal;
extern VerifyHashRequestDefaultTypeInternal _VerifyHashRequest_default_instance_;
class VerifyHashResponse;
class VerifyHashResponseDefaultTypeInternal;
extern VerifyHashResponseDefaultTypeInternal _VerifyHashResponse_default_instance_;
}  // namespace raft_cmdpb
namespace google {
namespace protobuf {
template<> ::raft_cmdpb::AdminRequest* Arena::CreateMaybeMessage<::raft_cmdpb::AdminRequest>(Arena*);
template<> ::raft_cmdpb::AdminResponse* Arena::CreateMaybeMessage<::raft_cmdpb::AdminResponse>(Arena*);
template<> ::raft_cmdpb::ChangePeerRequest* Arena::CreateMaybeMessage<::raft_cmdpb::ChangePeerRequest>(Arena*);
template<> ::raft_cmdpb::ChangePeerResponse* Arena::CreateMaybeMessage<::raft_cmdpb::ChangePeerResponse>(Arena*);
template<> ::raft_cmdpb::CommitMergeRequest* Arena::CreateMaybeMessage<::raft_cmdpb::CommitMergeRequest>(Arena*);
template<> ::raft_cmdpb::CommitMergeResponse* Arena::CreateMaybeMessage<::raft_cmdpb::CommitMergeResponse>(Arena*);
template<> ::raft_cmdpb::CompactLogRequest* Arena::CreateMaybeMessage<::raft_cmdpb::CompactLogRequest>(Arena*);
template<> ::raft_cmdpb::CompactLogResponse* Arena::CreateMaybeMessage<::raft_cmdpb::CompactLogResponse>(Arena*);
template<> ::raft_cmdpb::DeleteRangeRequest* Arena::CreateMaybeMessage<::raft_cmdpb::DeleteRangeRequest>(Arena*);
template<> ::raft_cmdpb::DeleteRangeResponse* Arena::CreateMaybeMessage<::raft_cmdpb::DeleteRangeResponse>(Arena*);
template<> ::raft_cmdpb::DeleteRequest* Arena::CreateMaybeMessage<::raft_cmdpb::DeleteRequest>(Arena*);
template<> ::raft_cmdpb::DeleteResponse* Arena::CreateMaybeMessage<::raft_cmdpb::DeleteResponse>(Arena*);
template<> ::raft_cmdpb::GetRequest* Arena::CreateMaybeMessage<::raft_cmdpb::GetRequest>(Arena*);
template<> ::raft_cmdpb::GetResponse* Arena::CreateMaybeMessage<::raft_cmdpb::GetResponse>(Arena*);
template<> ::raft_cmdpb::IngestSSTRequest* Arena::CreateMaybeMessage<::raft_cmdpb::IngestSSTRequest>(Arena*);
template<> ::raft_cmdpb::IngestSSTResponse* Arena::CreateMaybeMessage<::raft_cmdpb::IngestSSTResponse>(Arena*);
template<> ::raft_cmdpb::PrepareMergeRequest* Arena::CreateMaybeMessage<::raft_cmdpb::PrepareMergeRequest>(Arena*);
template<> ::raft_cmdpb::PrepareMergeResponse* Arena::CreateMaybeMessage<::raft_cmdpb::PrepareMergeResponse>(Arena*);
template<> ::raft_cmdpb::PrewriteRequest* Arena::CreateMaybeMessage<::raft_cmdpb::PrewriteRequest>(Arena*);
template<> ::raft_cmdpb::PrewriteResponse* Arena::CreateMaybeMessage<::raft_cmdpb::PrewriteResponse>(Arena*);
template<> ::raft_cmdpb::PutRequest* Arena::CreateMaybeMessage<::raft_cmdpb::PutRequest>(Arena*);
template<> ::raft_cmdpb::PutResponse* Arena::CreateMaybeMessage<::raft_cmdpb::PutResponse>(Arena*);
template<> ::raft_cmdpb::RaftCmdRequest* Arena::CreateMaybeMessage<::raft_cmdpb::RaftCmdRequest>(Arena*);
template<> ::raft_cmdpb::RaftCmdResponse* Arena::CreateMaybeMessage<::raft_cmdpb::RaftCmdResponse>(Arena*);
template<> ::raft_cmdpb::RaftRequestHeader* Arena::CreateMaybeMessage<::raft_cmdpb::RaftRequestHeader>(Arena*);
template<> ::raft_cmdpb::RaftResponseHeader* Arena::CreateMaybeMessage<::raft_cmdpb::RaftResponseHeader>(Arena*);
template<> ::raft_cmdpb::RegionDetailRequest* Arena::CreateMaybeMessage<::raft_cmdpb::RegionDetailRequest>(Arena*);
template<> ::raft_cmdpb::RegionDetailResponse* Arena::CreateMaybeMessage<::raft_cmdpb::RegionDetailResponse>(Arena*);
template<> ::raft_cmdpb::RegionLeaderRequest* Arena::CreateMaybeMessage<::raft_cmdpb::RegionLeaderRequest>(Arena*);
template<> ::raft_cmdpb::RegionLeaderResponse* Arena::CreateMaybeMessage<::raft_cmdpb::RegionLeaderResponse>(Arena*);
template<> ::raft_cmdpb::Request* Arena::CreateMaybeMessage<::raft_cmdpb::Request>(Arena*);
template<> ::raft_cmdpb::Response* Arena::CreateMaybeMessage<::raft_cmdpb::Response>(Arena*);
template<> ::raft_cmdpb::RollbackMergeRequest* Arena::CreateMaybeMessage<::raft_cmdpb::RollbackMergeRequest>(Arena*);
template<> ::raft_cmdpb::RollbackMergeResponse* Arena::CreateMaybeMessage<::raft_cmdpb::RollbackMergeResponse>(Arena*);
template<> ::raft_cmdpb::SnapRequest* Arena::CreateMaybeMessage<::raft_cmdpb::SnapRequest>(Arena*);
template<> ::raft_cmdpb::SnapResponse* Arena::CreateMaybeMessage<::raft_cmdpb::SnapResponse>(Arena*);
template<> ::raft_cmdpb::SplitRequest* Arena::CreateMaybeMessage<::raft_cmdpb::SplitRequest>(Arena*);
template<> ::raft_cmdpb::SplitResponse* Arena::CreateMaybeMessage<::raft_cmdpb::SplitResponse>(Arena*);
template<> ::raft_cmdpb::StatusRequest* Arena::CreateMaybeMessage<::raft_cmdpb::StatusRequest>(Arena*);
template<> ::raft_cmdpb::StatusResponse* Arena::CreateMaybeMessage<::raft_cmdpb::StatusResponse>(Arena*);
template<> ::raft_cmdpb::TransferLeaderRequest* Arena::CreateMaybeMessage<::raft_cmdpb::TransferLeaderRequest>(Arena*);
template<> ::raft_cmdpb::TransferLeaderResponse* Arena::CreateMaybeMessage<::raft_cmdpb::TransferLeaderResponse>(Arena*);
template<> ::raft_cmdpb::VerifyHashRequest* Arena::CreateMaybeMessage<::raft_cmdpb::VerifyHashRequest>(Arena*);
template<> ::raft_cmdpb::VerifyHashResponse* Arena::CreateMaybeMessage<::raft_cmdpb::VerifyHashResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace raft_cmdpb {

enum CmdType {
  Invalid = 0,
  Get = 1,
  Put = 3,
  Delete = 4,
  Snap = 5,
  Prewrite = 6,
  DeleteRange = 7,
  IngestSST = 8,
  CmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CmdType_IsValid(int value);
const CmdType CmdType_MIN = Invalid;
const CmdType CmdType_MAX = IngestSST;
const int CmdType_ARRAYSIZE = CmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CmdType_descriptor();
inline const ::std::string& CmdType_Name(CmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CmdType_descriptor(), value);
}
inline bool CmdType_Parse(
    const ::std::string& name, CmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CmdType>(
    CmdType_descriptor(), name, value);
}
enum AdminCmdType {
  InvalidAdmin = 0,
  ChangePeer = 1,
  Split = 2,
  CompactLog = 3,
  TransferLeader = 4,
  ComputeHash = 5,
  VerifyHash = 6,
  PrepareMerge = 7,
  CommitMerge = 8,
  RollbackMerge = 9,
  AdminCmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AdminCmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AdminCmdType_IsValid(int value);
const AdminCmdType AdminCmdType_MIN = InvalidAdmin;
const AdminCmdType AdminCmdType_MAX = RollbackMerge;
const int AdminCmdType_ARRAYSIZE = AdminCmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AdminCmdType_descriptor();
inline const ::std::string& AdminCmdType_Name(AdminCmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AdminCmdType_descriptor(), value);
}
inline bool AdminCmdType_Parse(
    const ::std::string& name, AdminCmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AdminCmdType>(
    AdminCmdType_descriptor(), name, value);
}
enum StatusCmdType {
  InvalidStatus = 0,
  RegionLeader = 1,
  RegionDetail = 2,
  StatusCmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StatusCmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StatusCmdType_IsValid(int value);
const StatusCmdType StatusCmdType_MIN = InvalidStatus;
const StatusCmdType StatusCmdType_MAX = RegionDetail;
const int StatusCmdType_ARRAYSIZE = StatusCmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusCmdType_descriptor();
inline const ::std::string& StatusCmdType_Name(StatusCmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusCmdType_descriptor(), value);
}
inline bool StatusCmdType_Parse(
    const ::std::string& name, StatusCmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusCmdType>(
    StatusCmdType_descriptor(), name, value);
}
// ===================================================================

class GetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.GetRequest) */ {
 public:
  GetRequest();
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetRequest* other);
  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRequest* New() const final {
    return CreateMaybeMessage<GetRequest>(NULL);
  }

  GetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cf = 1;
  void clear_cf();
  static const int kCfFieldNumber = 1;
  const ::std::string& cf() const;
  void set_cf(const ::std::string& value);
  #if LANG_CXX11
  void set_cf(::std::string&& value);
  #endif
  void set_cf(const char* value);
  void set_cf(const char* value, size_t size);
  ::std::string* mutable_cf();
  ::std::string* release_cf();
  void set_allocated_cf(::std::string* cf);

  // bytes key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.GetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cf_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.GetResponse) */ {
 public:
  GetResponse();
  virtual ~GetResponse();

  GetResponse(const GetResponse& from);

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetResponse(GetResponse&& from) noexcept
    : GetResponse() {
    *this = ::std::move(from);
  }

  inline GetResponse& operator=(GetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponse*>(
               &_GetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetResponse* other);
  friend void swap(GetResponse& a, GetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetResponse* New() const final {
    return CreateMaybeMessage<GetResponse>(NULL);
  }

  GetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetResponse& from);
  void MergeFrom(const GetResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.GetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PutRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.PutRequest) */ {
 public:
  PutRequest();
  virtual ~PutRequest();

  PutRequest(const PutRequest& from);

  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutRequest(PutRequest&& from) noexcept
    : PutRequest() {
    *this = ::std::move(from);
  }

  inline PutRequest& operator=(PutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutRequest* internal_default_instance() {
    return reinterpret_cast<const PutRequest*>(
               &_PutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PutRequest* other);
  friend void swap(PutRequest& a, PutRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutRequest* New() const final {
    return CreateMaybeMessage<PutRequest>(NULL);
  }

  PutRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PutRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PutRequest& from);
  void MergeFrom(const PutRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cf = 1;
  void clear_cf();
  static const int kCfFieldNumber = 1;
  const ::std::string& cf() const;
  void set_cf(const ::std::string& value);
  #if LANG_CXX11
  void set_cf(::std::string&& value);
  #endif
  void set_cf(const char* value);
  void set_cf(const char* value, size_t size);
  ::std::string* mutable_cf();
  ::std::string* release_cf();
  void set_allocated_cf(::std::string* cf);

  // bytes key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // bytes value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.PutRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cf_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PutResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.PutResponse) */ {
 public:
  PutResponse();
  virtual ~PutResponse();

  PutResponse(const PutResponse& from);

  inline PutResponse& operator=(const PutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutResponse(PutResponse&& from) noexcept
    : PutResponse() {
    *this = ::std::move(from);
  }

  inline PutResponse& operator=(PutResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PutResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutResponse* internal_default_instance() {
    return reinterpret_cast<const PutResponse*>(
               &_PutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PutResponse* other);
  friend void swap(PutResponse& a, PutResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutResponse* New() const final {
    return CreateMaybeMessage<PutResponse>(NULL);
  }

  PutResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PutResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PutResponse& from);
  void MergeFrom(const PutResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.PutResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.DeleteRequest) */ {
 public:
  DeleteRequest();
  virtual ~DeleteRequest();

  DeleteRequest(const DeleteRequest& from);

  inline DeleteRequest& operator=(const DeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteRequest(DeleteRequest&& from) noexcept
    : DeleteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRequest& operator=(DeleteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRequest*>(
               &_DeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DeleteRequest* other);
  friend void swap(DeleteRequest& a, DeleteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteRequest* New() const final {
    return CreateMaybeMessage<DeleteRequest>(NULL);
  }

  DeleteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteRequest& from);
  void MergeFrom(const DeleteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cf = 1;
  void clear_cf();
  static const int kCfFieldNumber = 1;
  const ::std::string& cf() const;
  void set_cf(const ::std::string& value);
  #if LANG_CXX11
  void set_cf(::std::string&& value);
  #endif
  void set_cf(const char* value);
  void set_cf(const char* value, size_t size);
  ::std::string* mutable_cf();
  ::std::string* release_cf();
  void set_allocated_cf(::std::string* cf);

  // bytes key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.DeleteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cf_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.DeleteResponse) */ {
 public:
  DeleteResponse();
  virtual ~DeleteResponse();

  DeleteResponse(const DeleteResponse& from);

  inline DeleteResponse& operator=(const DeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteResponse(DeleteResponse&& from) noexcept
    : DeleteResponse() {
    *this = ::std::move(from);
  }

  inline DeleteResponse& operator=(DeleteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteResponse*>(
               &_DeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DeleteResponse* other);
  friend void swap(DeleteResponse& a, DeleteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteResponse* New() const final {
    return CreateMaybeMessage<DeleteResponse>(NULL);
  }

  DeleteResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteResponse& from);
  void MergeFrom(const DeleteResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.DeleteResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteRangeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.DeleteRangeRequest) */ {
 public:
  DeleteRangeRequest();
  virtual ~DeleteRangeRequest();

  DeleteRangeRequest(const DeleteRangeRequest& from);

  inline DeleteRangeRequest& operator=(const DeleteRangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteRangeRequest(DeleteRangeRequest&& from) noexcept
    : DeleteRangeRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRangeRequest& operator=(DeleteRangeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRangeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRangeRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRangeRequest*>(
               &_DeleteRangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DeleteRangeRequest* other);
  friend void swap(DeleteRangeRequest& a, DeleteRangeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteRangeRequest* New() const final {
    return CreateMaybeMessage<DeleteRangeRequest>(NULL);
  }

  DeleteRangeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRangeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteRangeRequest& from);
  void MergeFrom(const DeleteRangeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRangeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cf = 1;
  void clear_cf();
  static const int kCfFieldNumber = 1;
  const ::std::string& cf() const;
  void set_cf(const ::std::string& value);
  #if LANG_CXX11
  void set_cf(::std::string&& value);
  #endif
  void set_cf(const char* value);
  void set_cf(const char* value, size_t size);
  ::std::string* mutable_cf();
  ::std::string* release_cf();
  void set_allocated_cf(::std::string* cf);

  // bytes start_key = 2;
  void clear_start_key();
  static const int kStartKeyFieldNumber = 2;
  const ::std::string& start_key() const;
  void set_start_key(const ::std::string& value);
  #if LANG_CXX11
  void set_start_key(::std::string&& value);
  #endif
  void set_start_key(const char* value);
  void set_start_key(const void* value, size_t size);
  ::std::string* mutable_start_key();
  ::std::string* release_start_key();
  void set_allocated_start_key(::std::string* start_key);

  // bytes end_key = 3;
  void clear_end_key();
  static const int kEndKeyFieldNumber = 3;
  const ::std::string& end_key() const;
  void set_end_key(const ::std::string& value);
  #if LANG_CXX11
  void set_end_key(::std::string&& value);
  #endif
  void set_end_key(const char* value);
  void set_end_key(const void* value, size_t size);
  ::std::string* mutable_end_key();
  ::std::string* release_end_key();
  void set_allocated_end_key(::std::string* end_key);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.DeleteRangeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cf_;
  ::google::protobuf::internal::ArenaStringPtr start_key_;
  ::google::protobuf::internal::ArenaStringPtr end_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteRangeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.DeleteRangeResponse) */ {
 public:
  DeleteRangeResponse();
  virtual ~DeleteRangeResponse();

  DeleteRangeResponse(const DeleteRangeResponse& from);

  inline DeleteRangeResponse& operator=(const DeleteRangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteRangeResponse(DeleteRangeResponse&& from) noexcept
    : DeleteRangeResponse() {
    *this = ::std::move(from);
  }

  inline DeleteRangeResponse& operator=(DeleteRangeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRangeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRangeResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteRangeResponse*>(
               &_DeleteRangeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(DeleteRangeResponse* other);
  friend void swap(DeleteRangeResponse& a, DeleteRangeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteRangeResponse* New() const final {
    return CreateMaybeMessage<DeleteRangeResponse>(NULL);
  }

  DeleteRangeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRangeResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteRangeResponse& from);
  void MergeFrom(const DeleteRangeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRangeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.DeleteRangeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SnapRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.SnapRequest) */ {
 public:
  SnapRequest();
  virtual ~SnapRequest();

  SnapRequest(const SnapRequest& from);

  inline SnapRequest& operator=(const SnapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SnapRequest(SnapRequest&& from) noexcept
    : SnapRequest() {
    *this = ::std::move(from);
  }

  inline SnapRequest& operator=(SnapRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapRequest* internal_default_instance() {
    return reinterpret_cast<const SnapRequest*>(
               &_SnapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(SnapRequest* other);
  friend void swap(SnapRequest& a, SnapRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnapRequest* New() const final {
    return CreateMaybeMessage<SnapRequest>(NULL);
  }

  SnapRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SnapRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SnapRequest& from);
  void MergeFrom(const SnapRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.SnapRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SnapResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.SnapResponse) */ {
 public:
  SnapResponse();
  virtual ~SnapResponse();

  SnapResponse(const SnapResponse& from);

  inline SnapResponse& operator=(const SnapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SnapResponse(SnapResponse&& from) noexcept
    : SnapResponse() {
    *this = ::std::move(from);
  }

  inline SnapResponse& operator=(SnapResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapResponse* internal_default_instance() {
    return reinterpret_cast<const SnapResponse*>(
               &_SnapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(SnapResponse* other);
  friend void swap(SnapResponse& a, SnapResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnapResponse* New() const final {
    return CreateMaybeMessage<SnapResponse>(NULL);
  }

  SnapResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SnapResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SnapResponse& from);
  void MergeFrom(const SnapResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metapb.Region region = 1;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 1;
  private:
  const ::metapb::Region& _internal_region() const;
  public:
  const ::metapb::Region& region() const;
  ::metapb::Region* release_region();
  ::metapb::Region* mutable_region();
  void set_allocated_region(::metapb::Region* region);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.SnapResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metapb::Region* region_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrewriteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.PrewriteRequest) */ {
 public:
  PrewriteRequest();
  virtual ~PrewriteRequest();

  PrewriteRequest(const PrewriteRequest& from);

  inline PrewriteRequest& operator=(const PrewriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrewriteRequest(PrewriteRequest&& from) noexcept
    : PrewriteRequest() {
    *this = ::std::move(from);
  }

  inline PrewriteRequest& operator=(PrewriteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrewriteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrewriteRequest* internal_default_instance() {
    return reinterpret_cast<const PrewriteRequest*>(
               &_PrewriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(PrewriteRequest* other);
  friend void swap(PrewriteRequest& a, PrewriteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrewriteRequest* New() const final {
    return CreateMaybeMessage<PrewriteRequest>(NULL);
  }

  PrewriteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrewriteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrewriteRequest& from);
  void MergeFrom(const PrewriteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrewriteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // bytes lock = 3;
  void clear_lock();
  static const int kLockFieldNumber = 3;
  const ::std::string& lock() const;
  void set_lock(const ::std::string& value);
  #if LANG_CXX11
  void set_lock(::std::string&& value);
  #endif
  void set_lock(const char* value);
  void set_lock(const void* value, size_t size);
  ::std::string* mutable_lock();
  ::std::string* release_lock();
  void set_allocated_lock(::std::string* lock);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.PrewriteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr lock_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrewriteResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.PrewriteResponse) */ {
 public:
  PrewriteResponse();
  virtual ~PrewriteResponse();

  PrewriteResponse(const PrewriteResponse& from);

  inline PrewriteResponse& operator=(const PrewriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrewriteResponse(PrewriteResponse&& from) noexcept
    : PrewriteResponse() {
    *this = ::std::move(from);
  }

  inline PrewriteResponse& operator=(PrewriteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrewriteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrewriteResponse* internal_default_instance() {
    return reinterpret_cast<const PrewriteResponse*>(
               &_PrewriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(PrewriteResponse* other);
  friend void swap(PrewriteResponse& a, PrewriteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrewriteResponse* New() const final {
    return CreateMaybeMessage<PrewriteResponse>(NULL);
  }

  PrewriteResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrewriteResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrewriteResponse& from);
  void MergeFrom(const PrewriteResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrewriteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.PrewriteResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IngestSSTRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.IngestSSTRequest) */ {
 public:
  IngestSSTRequest();
  virtual ~IngestSSTRequest();

  IngestSSTRequest(const IngestSSTRequest& from);

  inline IngestSSTRequest& operator=(const IngestSSTRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IngestSSTRequest(IngestSSTRequest&& from) noexcept
    : IngestSSTRequest() {
    *this = ::std::move(from);
  }

  inline IngestSSTRequest& operator=(IngestSSTRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IngestSSTRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IngestSSTRequest* internal_default_instance() {
    return reinterpret_cast<const IngestSSTRequest*>(
               &_IngestSSTRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(IngestSSTRequest* other);
  friend void swap(IngestSSTRequest& a, IngestSSTRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IngestSSTRequest* New() const final {
    return CreateMaybeMessage<IngestSSTRequest>(NULL);
  }

  IngestSSTRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IngestSSTRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IngestSSTRequest& from);
  void MergeFrom(const IngestSSTRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IngestSSTRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .import_sstpb.SSTMeta sst = 1;
  bool has_sst() const;
  void clear_sst();
  static const int kSstFieldNumber = 1;
  private:
  const ::import_sstpb::SSTMeta& _internal_sst() const;
  public:
  const ::import_sstpb::SSTMeta& sst() const;
  ::import_sstpb::SSTMeta* release_sst();
  ::import_sstpb::SSTMeta* mutable_sst();
  void set_allocated_sst(::import_sstpb::SSTMeta* sst);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.IngestSSTRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::import_sstpb::SSTMeta* sst_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IngestSSTResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.IngestSSTResponse) */ {
 public:
  IngestSSTResponse();
  virtual ~IngestSSTResponse();

  IngestSSTResponse(const IngestSSTResponse& from);

  inline IngestSSTResponse& operator=(const IngestSSTResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IngestSSTResponse(IngestSSTResponse&& from) noexcept
    : IngestSSTResponse() {
    *this = ::std::move(from);
  }

  inline IngestSSTResponse& operator=(IngestSSTResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IngestSSTResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IngestSSTResponse* internal_default_instance() {
    return reinterpret_cast<const IngestSSTResponse*>(
               &_IngestSSTResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(IngestSSTResponse* other);
  friend void swap(IngestSSTResponse& a, IngestSSTResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IngestSSTResponse* New() const final {
    return CreateMaybeMessage<IngestSSTResponse>(NULL);
  }

  IngestSSTResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IngestSSTResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IngestSSTResponse& from);
  void MergeFrom(const IngestSSTResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IngestSSTResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.IngestSSTResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(NULL);
  }

  Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .raft_cmdpb.GetRequest get = 2;
  bool has_get() const;
  void clear_get();
  static const int kGetFieldNumber = 2;
  private:
  const ::raft_cmdpb::GetRequest& _internal_get() const;
  public:
  const ::raft_cmdpb::GetRequest& get() const;
  ::raft_cmdpb::GetRequest* release_get();
  ::raft_cmdpb::GetRequest* mutable_get();
  void set_allocated_get(::raft_cmdpb::GetRequest* get);

  // .raft_cmdpb.PutRequest put = 4;
  bool has_put() const;
  void clear_put();
  static const int kPutFieldNumber = 4;
  private:
  const ::raft_cmdpb::PutRequest& _internal_put() const;
  public:
  const ::raft_cmdpb::PutRequest& put() const;
  ::raft_cmdpb::PutRequest* release_put();
  ::raft_cmdpb::PutRequest* mutable_put();
  void set_allocated_put(::raft_cmdpb::PutRequest* put);

  // .raft_cmdpb.DeleteRequest delete = 5;
  bool has_delete_() const;
  void clear_delete_();
  static const int kDeleteFieldNumber = 5;
  private:
  const ::raft_cmdpb::DeleteRequest& _internal_delete_() const;
  public:
  const ::raft_cmdpb::DeleteRequest& delete_() const;
  ::raft_cmdpb::DeleteRequest* release_delete_();
  ::raft_cmdpb::DeleteRequest* mutable_delete_();
  void set_allocated_delete_(::raft_cmdpb::DeleteRequest* delete_);

  // .raft_cmdpb.SnapRequest snap = 6;
  bool has_snap() const;
  void clear_snap();
  static const int kSnapFieldNumber = 6;
  private:
  const ::raft_cmdpb::SnapRequest& _internal_snap() const;
  public:
  const ::raft_cmdpb::SnapRequest& snap() const;
  ::raft_cmdpb::SnapRequest* release_snap();
  ::raft_cmdpb::SnapRequest* mutable_snap();
  void set_allocated_snap(::raft_cmdpb::SnapRequest* snap);

  // .raft_cmdpb.PrewriteRequest prewrite = 7;
  bool has_prewrite() const;
  void clear_prewrite();
  static const int kPrewriteFieldNumber = 7;
  private:
  const ::raft_cmdpb::PrewriteRequest& _internal_prewrite() const;
  public:
  const ::raft_cmdpb::PrewriteRequest& prewrite() const;
  ::raft_cmdpb::PrewriteRequest* release_prewrite();
  ::raft_cmdpb::PrewriteRequest* mutable_prewrite();
  void set_allocated_prewrite(::raft_cmdpb::PrewriteRequest* prewrite);

  // .raft_cmdpb.DeleteRangeRequest delete_range = 8;
  bool has_delete_range() const;
  void clear_delete_range();
  static const int kDeleteRangeFieldNumber = 8;
  private:
  const ::raft_cmdpb::DeleteRangeRequest& _internal_delete_range() const;
  public:
  const ::raft_cmdpb::DeleteRangeRequest& delete_range() const;
  ::raft_cmdpb::DeleteRangeRequest* release_delete_range();
  ::raft_cmdpb::DeleteRangeRequest* mutable_delete_range();
  void set_allocated_delete_range(::raft_cmdpb::DeleteRangeRequest* delete_range);

  // .raft_cmdpb.IngestSSTRequest ingest_sst = 9;
  bool has_ingest_sst() const;
  void clear_ingest_sst();
  static const int kIngestSstFieldNumber = 9;
  private:
  const ::raft_cmdpb::IngestSSTRequest& _internal_ingest_sst() const;
  public:
  const ::raft_cmdpb::IngestSSTRequest& ingest_sst() const;
  ::raft_cmdpb::IngestSSTRequest* release_ingest_sst();
  ::raft_cmdpb::IngestSSTRequest* mutable_ingest_sst();
  void set_allocated_ingest_sst(::raft_cmdpb::IngestSSTRequest* ingest_sst);

  // .raft_cmdpb.CmdType cmd_type = 1;
  void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  ::raft_cmdpb::CmdType cmd_type() const;
  void set_cmd_type(::raft_cmdpb::CmdType value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::raft_cmdpb::GetRequest* get_;
  ::raft_cmdpb::PutRequest* put_;
  ::raft_cmdpb::DeleteRequest* delete__;
  ::raft_cmdpb::SnapRequest* snap_;
  ::raft_cmdpb::PrewriteRequest* prewrite_;
  ::raft_cmdpb::DeleteRangeRequest* delete_range_;
  ::raft_cmdpb::IngestSSTRequest* ingest_sst_;
  int cmd_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(NULL);
  }

  Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .raft_cmdpb.GetResponse get = 2;
  bool has_get() const;
  void clear_get();
  static const int kGetFieldNumber = 2;
  private:
  const ::raft_cmdpb::GetResponse& _internal_get() const;
  public:
  const ::raft_cmdpb::GetResponse& get() const;
  ::raft_cmdpb::GetResponse* release_get();
  ::raft_cmdpb::GetResponse* mutable_get();
  void set_allocated_get(::raft_cmdpb::GetResponse* get);

  // .raft_cmdpb.PutResponse put = 4;
  bool has_put() const;
  void clear_put();
  static const int kPutFieldNumber = 4;
  private:
  const ::raft_cmdpb::PutResponse& _internal_put() const;
  public:
  const ::raft_cmdpb::PutResponse& put() const;
  ::raft_cmdpb::PutResponse* release_put();
  ::raft_cmdpb::PutResponse* mutable_put();
  void set_allocated_put(::raft_cmdpb::PutResponse* put);

  // .raft_cmdpb.DeleteResponse delete = 5;
  bool has_delete_() const;
  void clear_delete_();
  static const int kDeleteFieldNumber = 5;
  private:
  const ::raft_cmdpb::DeleteResponse& _internal_delete_() const;
  public:
  const ::raft_cmdpb::DeleteResponse& delete_() const;
  ::raft_cmdpb::DeleteResponse* release_delete_();
  ::raft_cmdpb::DeleteResponse* mutable_delete_();
  void set_allocated_delete_(::raft_cmdpb::DeleteResponse* delete_);

  // .raft_cmdpb.SnapResponse snap = 6;
  bool has_snap() const;
  void clear_snap();
  static const int kSnapFieldNumber = 6;
  private:
  const ::raft_cmdpb::SnapResponse& _internal_snap() const;
  public:
  const ::raft_cmdpb::SnapResponse& snap() const;
  ::raft_cmdpb::SnapResponse* release_snap();
  ::raft_cmdpb::SnapResponse* mutable_snap();
  void set_allocated_snap(::raft_cmdpb::SnapResponse* snap);

  // .raft_cmdpb.PrewriteResponse prewrite = 7;
  bool has_prewrite() const;
  void clear_prewrite();
  static const int kPrewriteFieldNumber = 7;
  private:
  const ::raft_cmdpb::PrewriteResponse& _internal_prewrite() const;
  public:
  const ::raft_cmdpb::PrewriteResponse& prewrite() const;
  ::raft_cmdpb::PrewriteResponse* release_prewrite();
  ::raft_cmdpb::PrewriteResponse* mutable_prewrite();
  void set_allocated_prewrite(::raft_cmdpb::PrewriteResponse* prewrite);

  // .raft_cmdpb.DeleteRangeResponse delte_range = 8;
  bool has_delte_range() const;
  void clear_delte_range();
  static const int kDelteRangeFieldNumber = 8;
  private:
  const ::raft_cmdpb::DeleteRangeResponse& _internal_delte_range() const;
  public:
  const ::raft_cmdpb::DeleteRangeResponse& delte_range() const;
  ::raft_cmdpb::DeleteRangeResponse* release_delte_range();
  ::raft_cmdpb::DeleteRangeResponse* mutable_delte_range();
  void set_allocated_delte_range(::raft_cmdpb::DeleteRangeResponse* delte_range);

  // .raft_cmdpb.IngestSSTResponse ingest_sst = 9;
  bool has_ingest_sst() const;
  void clear_ingest_sst();
  static const int kIngestSstFieldNumber = 9;
  private:
  const ::raft_cmdpb::IngestSSTResponse& _internal_ingest_sst() const;
  public:
  const ::raft_cmdpb::IngestSSTResponse& ingest_sst() const;
  ::raft_cmdpb::IngestSSTResponse* release_ingest_sst();
  ::raft_cmdpb::IngestSSTResponse* mutable_ingest_sst();
  void set_allocated_ingest_sst(::raft_cmdpb::IngestSSTResponse* ingest_sst);

  // .raft_cmdpb.CmdType cmd_type = 1;
  void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  ::raft_cmdpb::CmdType cmd_type() const;
  void set_cmd_type(::raft_cmdpb::CmdType value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::raft_cmdpb::GetResponse* get_;
  ::raft_cmdpb::PutResponse* put_;
  ::raft_cmdpb::DeleteResponse* delete__;
  ::raft_cmdpb::SnapResponse* snap_;
  ::raft_cmdpb::PrewriteResponse* prewrite_;
  ::raft_cmdpb::DeleteRangeResponse* delte_range_;
  ::raft_cmdpb::IngestSSTResponse* ingest_sst_;
  int cmd_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChangePeerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.ChangePeerRequest) */ {
 public:
  ChangePeerRequest();
  virtual ~ChangePeerRequest();

  ChangePeerRequest(const ChangePeerRequest& from);

  inline ChangePeerRequest& operator=(const ChangePeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangePeerRequest(ChangePeerRequest&& from) noexcept
    : ChangePeerRequest() {
    *this = ::std::move(from);
  }

  inline ChangePeerRequest& operator=(ChangePeerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangePeerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangePeerRequest* internal_default_instance() {
    return reinterpret_cast<const ChangePeerRequest*>(
               &_ChangePeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ChangePeerRequest* other);
  friend void swap(ChangePeerRequest& a, ChangePeerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangePeerRequest* New() const final {
    return CreateMaybeMessage<ChangePeerRequest>(NULL);
  }

  ChangePeerRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChangePeerRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChangePeerRequest& from);
  void MergeFrom(const ChangePeerRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangePeerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metapb.Peer peer = 2;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 2;
  private:
  const ::metapb::Peer& _internal_peer() const;
  public:
  const ::metapb::Peer& peer() const;
  ::metapb::Peer* release_peer();
  ::metapb::Peer* mutable_peer();
  void set_allocated_peer(::metapb::Peer* peer);

  // .eraftpb.ConfChangeType change_type = 1;
  void clear_change_type();
  static const int kChangeTypeFieldNumber = 1;
  ::eraftpb::ConfChangeType change_type() const;
  void set_change_type(::eraftpb::ConfChangeType value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.ChangePeerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metapb::Peer* peer_;
  int change_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChangePeerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.ChangePeerResponse) */ {
 public:
  ChangePeerResponse();
  virtual ~ChangePeerResponse();

  ChangePeerResponse(const ChangePeerResponse& from);

  inline ChangePeerResponse& operator=(const ChangePeerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangePeerResponse(ChangePeerResponse&& from) noexcept
    : ChangePeerResponse() {
    *this = ::std::move(from);
  }

  inline ChangePeerResponse& operator=(ChangePeerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangePeerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangePeerResponse* internal_default_instance() {
    return reinterpret_cast<const ChangePeerResponse*>(
               &_ChangePeerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(ChangePeerResponse* other);
  friend void swap(ChangePeerResponse& a, ChangePeerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangePeerResponse* New() const final {
    return CreateMaybeMessage<ChangePeerResponse>(NULL);
  }

  ChangePeerResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChangePeerResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChangePeerResponse& from);
  void MergeFrom(const ChangePeerResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangePeerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metapb.Region region = 1;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 1;
  private:
  const ::metapb::Region& _internal_region() const;
  public:
  const ::metapb::Region& region() const;
  ::metapb::Region* release_region();
  ::metapb::Region* mutable_region();
  void set_allocated_region(::metapb::Region* region);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.ChangePeerResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metapb::Region* region_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SplitRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.SplitRequest) */ {
 public:
  SplitRequest();
  virtual ~SplitRequest();

  SplitRequest(const SplitRequest& from);

  inline SplitRequest& operator=(const SplitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SplitRequest(SplitRequest&& from) noexcept
    : SplitRequest() {
    *this = ::std::move(from);
  }

  inline SplitRequest& operator=(SplitRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SplitRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SplitRequest* internal_default_instance() {
    return reinterpret_cast<const SplitRequest*>(
               &_SplitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(SplitRequest* other);
  friend void swap(SplitRequest& a, SplitRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SplitRequest* New() const final {
    return CreateMaybeMessage<SplitRequest>(NULL);
  }

  SplitRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SplitRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SplitRequest& from);
  void MergeFrom(const SplitRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplitRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 new_peer_ids = 3;
  int new_peer_ids_size() const;
  void clear_new_peer_ids();
  static const int kNewPeerIdsFieldNumber = 3;
  ::google::protobuf::uint64 new_peer_ids(int index) const;
  void set_new_peer_ids(int index, ::google::protobuf::uint64 value);
  void add_new_peer_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      new_peer_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_new_peer_ids();

  // bytes split_key = 1;
  void clear_split_key();
  static const int kSplitKeyFieldNumber = 1;
  const ::std::string& split_key() const;
  void set_split_key(const ::std::string& value);
  #if LANG_CXX11
  void set_split_key(::std::string&& value);
  #endif
  void set_split_key(const char* value);
  void set_split_key(const void* value, size_t size);
  ::std::string* mutable_split_key();
  ::std::string* release_split_key();
  void set_allocated_split_key(::std::string* split_key);

  // uint64 new_region_id = 2;
  void clear_new_region_id();
  static const int kNewRegionIdFieldNumber = 2;
  ::google::protobuf::uint64 new_region_id() const;
  void set_new_region_id(::google::protobuf::uint64 value);

  // bool right_derive = 4;
  void clear_right_derive();
  static const int kRightDeriveFieldNumber = 4;
  bool right_derive() const;
  void set_right_derive(bool value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.SplitRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > new_peer_ids_;
  mutable int _new_peer_ids_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr split_key_;
  ::google::protobuf::uint64 new_region_id_;
  bool right_derive_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SplitResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.SplitResponse) */ {
 public:
  SplitResponse();
  virtual ~SplitResponse();

  SplitResponse(const SplitResponse& from);

  inline SplitResponse& operator=(const SplitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SplitResponse(SplitResponse&& from) noexcept
    : SplitResponse() {
    *this = ::std::move(from);
  }

  inline SplitResponse& operator=(SplitResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SplitResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SplitResponse* internal_default_instance() {
    return reinterpret_cast<const SplitResponse*>(
               &_SplitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(SplitResponse* other);
  friend void swap(SplitResponse& a, SplitResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SplitResponse* New() const final {
    return CreateMaybeMessage<SplitResponse>(NULL);
  }

  SplitResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SplitResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SplitResponse& from);
  void MergeFrom(const SplitResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplitResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metapb.Region left = 1;
  bool has_left() const;
  void clear_left();
  static const int kLeftFieldNumber = 1;
  private:
  const ::metapb::Region& _internal_left() const;
  public:
  const ::metapb::Region& left() const;
  ::metapb::Region* release_left();
  ::metapb::Region* mutable_left();
  void set_allocated_left(::metapb::Region* left);

  // .metapb.Region right = 2;
  bool has_right() const;
  void clear_right();
  static const int kRightFieldNumber = 2;
  private:
  const ::metapb::Region& _internal_right() const;
  public:
  const ::metapb::Region& right() const;
  ::metapb::Region* release_right();
  ::metapb::Region* mutable_right();
  void set_allocated_right(::metapb::Region* right);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.SplitResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metapb::Region* left_;
  ::metapb::Region* right_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CompactLogRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.CompactLogRequest) */ {
 public:
  CompactLogRequest();
  virtual ~CompactLogRequest();

  CompactLogRequest(const CompactLogRequest& from);

  inline CompactLogRequest& operator=(const CompactLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CompactLogRequest(CompactLogRequest&& from) noexcept
    : CompactLogRequest() {
    *this = ::std::move(from);
  }

  inline CompactLogRequest& operator=(CompactLogRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompactLogRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompactLogRequest* internal_default_instance() {
    return reinterpret_cast<const CompactLogRequest*>(
               &_CompactLogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(CompactLogRequest* other);
  friend void swap(CompactLogRequest& a, CompactLogRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompactLogRequest* New() const final {
    return CreateMaybeMessage<CompactLogRequest>(NULL);
  }

  CompactLogRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CompactLogRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CompactLogRequest& from);
  void MergeFrom(const CompactLogRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompactLogRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 compact_index = 1;
  void clear_compact_index();
  static const int kCompactIndexFieldNumber = 1;
  ::google::protobuf::uint64 compact_index() const;
  void set_compact_index(::google::protobuf::uint64 value);

  // uint64 compact_term = 2;
  void clear_compact_term();
  static const int kCompactTermFieldNumber = 2;
  ::google::protobuf::uint64 compact_term() const;
  void set_compact_term(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.CompactLogRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 compact_index_;
  ::google::protobuf::uint64 compact_term_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CompactLogResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.CompactLogResponse) */ {
 public:
  CompactLogResponse();
  virtual ~CompactLogResponse();

  CompactLogResponse(const CompactLogResponse& from);

  inline CompactLogResponse& operator=(const CompactLogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CompactLogResponse(CompactLogResponse&& from) noexcept
    : CompactLogResponse() {
    *this = ::std::move(from);
  }

  inline CompactLogResponse& operator=(CompactLogResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompactLogResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompactLogResponse* internal_default_instance() {
    return reinterpret_cast<const CompactLogResponse*>(
               &_CompactLogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(CompactLogResponse* other);
  friend void swap(CompactLogResponse& a, CompactLogResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompactLogResponse* New() const final {
    return CreateMaybeMessage<CompactLogResponse>(NULL);
  }

  CompactLogResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CompactLogResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CompactLogResponse& from);
  void MergeFrom(const CompactLogResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompactLogResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.CompactLogResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransferLeaderRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.TransferLeaderRequest) */ {
 public:
  TransferLeaderRequest();
  virtual ~TransferLeaderRequest();

  TransferLeaderRequest(const TransferLeaderRequest& from);

  inline TransferLeaderRequest& operator=(const TransferLeaderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferLeaderRequest(TransferLeaderRequest&& from) noexcept
    : TransferLeaderRequest() {
    *this = ::std::move(from);
  }

  inline TransferLeaderRequest& operator=(TransferLeaderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferLeaderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferLeaderRequest* internal_default_instance() {
    return reinterpret_cast<const TransferLeaderRequest*>(
               &_TransferLeaderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(TransferLeaderRequest* other);
  friend void swap(TransferLeaderRequest& a, TransferLeaderRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferLeaderRequest* New() const final {
    return CreateMaybeMessage<TransferLeaderRequest>(NULL);
  }

  TransferLeaderRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransferLeaderRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransferLeaderRequest& from);
  void MergeFrom(const TransferLeaderRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferLeaderRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metapb.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  private:
  const ::metapb::Peer& _internal_peer() const;
  public:
  const ::metapb::Peer& peer() const;
  ::metapb::Peer* release_peer();
  ::metapb::Peer* mutable_peer();
  void set_allocated_peer(::metapb::Peer* peer);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.TransferLeaderRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metapb::Peer* peer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransferLeaderResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.TransferLeaderResponse) */ {
 public:
  TransferLeaderResponse();
  virtual ~TransferLeaderResponse();

  TransferLeaderResponse(const TransferLeaderResponse& from);

  inline TransferLeaderResponse& operator=(const TransferLeaderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferLeaderResponse(TransferLeaderResponse&& from) noexcept
    : TransferLeaderResponse() {
    *this = ::std::move(from);
  }

  inline TransferLeaderResponse& operator=(TransferLeaderResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferLeaderResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferLeaderResponse* internal_default_instance() {
    return reinterpret_cast<const TransferLeaderResponse*>(
               &_TransferLeaderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(TransferLeaderResponse* other);
  friend void swap(TransferLeaderResponse& a, TransferLeaderResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferLeaderResponse* New() const final {
    return CreateMaybeMessage<TransferLeaderResponse>(NULL);
  }

  TransferLeaderResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransferLeaderResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransferLeaderResponse& from);
  void MergeFrom(const TransferLeaderResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferLeaderResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.TransferLeaderResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VerifyHashRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.VerifyHashRequest) */ {
 public:
  VerifyHashRequest();
  virtual ~VerifyHashRequest();

  VerifyHashRequest(const VerifyHashRequest& from);

  inline VerifyHashRequest& operator=(const VerifyHashRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VerifyHashRequest(VerifyHashRequest&& from) noexcept
    : VerifyHashRequest() {
    *this = ::std::move(from);
  }

  inline VerifyHashRequest& operator=(VerifyHashRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyHashRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyHashRequest* internal_default_instance() {
    return reinterpret_cast<const VerifyHashRequest*>(
               &_VerifyHashRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(VerifyHashRequest* other);
  friend void swap(VerifyHashRequest& a, VerifyHashRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VerifyHashRequest* New() const final {
    return CreateMaybeMessage<VerifyHashRequest>(NULL);
  }

  VerifyHashRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VerifyHashRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VerifyHashRequest& from);
  void MergeFrom(const VerifyHashRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyHashRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes hash = 2;
  void clear_hash();
  static const int kHashFieldNumber = 2;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // uint64 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint64 index() const;
  void set_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.VerifyHashRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::uint64 index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VerifyHashResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.VerifyHashResponse) */ {
 public:
  VerifyHashResponse();
  virtual ~VerifyHashResponse();

  VerifyHashResponse(const VerifyHashResponse& from);

  inline VerifyHashResponse& operator=(const VerifyHashResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VerifyHashResponse(VerifyHashResponse&& from) noexcept
    : VerifyHashResponse() {
    *this = ::std::move(from);
  }

  inline VerifyHashResponse& operator=(VerifyHashResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyHashResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyHashResponse* internal_default_instance() {
    return reinterpret_cast<const VerifyHashResponse*>(
               &_VerifyHashResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(VerifyHashResponse* other);
  friend void swap(VerifyHashResponse& a, VerifyHashResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VerifyHashResponse* New() const final {
    return CreateMaybeMessage<VerifyHashResponse>(NULL);
  }

  VerifyHashResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VerifyHashResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VerifyHashResponse& from);
  void MergeFrom(const VerifyHashResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyHashResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.VerifyHashResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrepareMergeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.PrepareMergeRequest) */ {
 public:
  PrepareMergeRequest();
  virtual ~PrepareMergeRequest();

  PrepareMergeRequest(const PrepareMergeRequest& from);

  inline PrepareMergeRequest& operator=(const PrepareMergeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrepareMergeRequest(PrepareMergeRequest&& from) noexcept
    : PrepareMergeRequest() {
    *this = ::std::move(from);
  }

  inline PrepareMergeRequest& operator=(PrepareMergeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrepareMergeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrepareMergeRequest* internal_default_instance() {
    return reinterpret_cast<const PrepareMergeRequest*>(
               &_PrepareMergeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(PrepareMergeRequest* other);
  friend void swap(PrepareMergeRequest& a, PrepareMergeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrepareMergeRequest* New() const final {
    return CreateMaybeMessage<PrepareMergeRequest>(NULL);
  }

  PrepareMergeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrepareMergeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrepareMergeRequest& from);
  void MergeFrom(const PrepareMergeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareMergeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metapb.Region target = 2;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 2;
  private:
  const ::metapb::Region& _internal_target() const;
  public:
  const ::metapb::Region& target() const;
  ::metapb::Region* release_target();
  ::metapb::Region* mutable_target();
  void set_allocated_target(::metapb::Region* target);

  // uint64 min_index = 1;
  void clear_min_index();
  static const int kMinIndexFieldNumber = 1;
  ::google::protobuf::uint64 min_index() const;
  void set_min_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.PrepareMergeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metapb::Region* target_;
  ::google::protobuf::uint64 min_index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrepareMergeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.PrepareMergeResponse) */ {
 public:
  PrepareMergeResponse();
  virtual ~PrepareMergeResponse();

  PrepareMergeResponse(const PrepareMergeResponse& from);

  inline PrepareMergeResponse& operator=(const PrepareMergeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrepareMergeResponse(PrepareMergeResponse&& from) noexcept
    : PrepareMergeResponse() {
    *this = ::std::move(from);
  }

  inline PrepareMergeResponse& operator=(PrepareMergeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrepareMergeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrepareMergeResponse* internal_default_instance() {
    return reinterpret_cast<const PrepareMergeResponse*>(
               &_PrepareMergeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(PrepareMergeResponse* other);
  friend void swap(PrepareMergeResponse& a, PrepareMergeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrepareMergeResponse* New() const final {
    return CreateMaybeMessage<PrepareMergeResponse>(NULL);
  }

  PrepareMergeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrepareMergeResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrepareMergeResponse& from);
  void MergeFrom(const PrepareMergeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareMergeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.PrepareMergeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommitMergeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.CommitMergeRequest) */ {
 public:
  CommitMergeRequest();
  virtual ~CommitMergeRequest();

  CommitMergeRequest(const CommitMergeRequest& from);

  inline CommitMergeRequest& operator=(const CommitMergeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommitMergeRequest(CommitMergeRequest&& from) noexcept
    : CommitMergeRequest() {
    *this = ::std::move(from);
  }

  inline CommitMergeRequest& operator=(CommitMergeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommitMergeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommitMergeRequest* internal_default_instance() {
    return reinterpret_cast<const CommitMergeRequest*>(
               &_CommitMergeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(CommitMergeRequest* other);
  friend void swap(CommitMergeRequest& a, CommitMergeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommitMergeRequest* New() const final {
    return CreateMaybeMessage<CommitMergeRequest>(NULL);
  }

  CommitMergeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommitMergeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommitMergeRequest& from);
  void MergeFrom(const CommitMergeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommitMergeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eraftpb.Entry entries = 3;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 3;
  ::eraftpb::Entry* mutable_entries(int index);
  ::google::protobuf::RepeatedPtrField< ::eraftpb::Entry >*
      mutable_entries();
  const ::eraftpb::Entry& entries(int index) const;
  ::eraftpb::Entry* add_entries();
  const ::google::protobuf::RepeatedPtrField< ::eraftpb::Entry >&
      entries() const;

  // .metapb.Region source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  private:
  const ::metapb::Region& _internal_source() const;
  public:
  const ::metapb::Region& source() const;
  ::metapb::Region* release_source();
  ::metapb::Region* mutable_source();
  void set_allocated_source(::metapb::Region* source);

  // uint64 commit = 2;
  void clear_commit();
  static const int kCommitFieldNumber = 2;
  ::google::protobuf::uint64 commit() const;
  void set_commit(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.CommitMergeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::eraftpb::Entry > entries_;
  ::metapb::Region* source_;
  ::google::protobuf::uint64 commit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommitMergeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.CommitMergeResponse) */ {
 public:
  CommitMergeResponse();
  virtual ~CommitMergeResponse();

  CommitMergeResponse(const CommitMergeResponse& from);

  inline CommitMergeResponse& operator=(const CommitMergeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommitMergeResponse(CommitMergeResponse&& from) noexcept
    : CommitMergeResponse() {
    *this = ::std::move(from);
  }

  inline CommitMergeResponse& operator=(CommitMergeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommitMergeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommitMergeResponse* internal_default_instance() {
    return reinterpret_cast<const CommitMergeResponse*>(
               &_CommitMergeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(CommitMergeResponse* other);
  friend void swap(CommitMergeResponse& a, CommitMergeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommitMergeResponse* New() const final {
    return CreateMaybeMessage<CommitMergeResponse>(NULL);
  }

  CommitMergeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommitMergeResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommitMergeResponse& from);
  void MergeFrom(const CommitMergeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommitMergeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.CommitMergeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RollbackMergeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.RollbackMergeRequest) */ {
 public:
  RollbackMergeRequest();
  virtual ~RollbackMergeRequest();

  RollbackMergeRequest(const RollbackMergeRequest& from);

  inline RollbackMergeRequest& operator=(const RollbackMergeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RollbackMergeRequest(RollbackMergeRequest&& from) noexcept
    : RollbackMergeRequest() {
    *this = ::std::move(from);
  }

  inline RollbackMergeRequest& operator=(RollbackMergeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RollbackMergeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RollbackMergeRequest* internal_default_instance() {
    return reinterpret_cast<const RollbackMergeRequest*>(
               &_RollbackMergeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(RollbackMergeRequest* other);
  friend void swap(RollbackMergeRequest& a, RollbackMergeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RollbackMergeRequest* New() const final {
    return CreateMaybeMessage<RollbackMergeRequest>(NULL);
  }

  RollbackMergeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RollbackMergeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RollbackMergeRequest& from);
  void MergeFrom(const RollbackMergeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RollbackMergeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 commit = 1;
  void clear_commit();
  static const int kCommitFieldNumber = 1;
  ::google::protobuf::uint64 commit() const;
  void set_commit(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.RollbackMergeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 commit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RollbackMergeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.RollbackMergeResponse) */ {
 public:
  RollbackMergeResponse();
  virtual ~RollbackMergeResponse();

  RollbackMergeResponse(const RollbackMergeResponse& from);

  inline RollbackMergeResponse& operator=(const RollbackMergeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RollbackMergeResponse(RollbackMergeResponse&& from) noexcept
    : RollbackMergeResponse() {
    *this = ::std::move(from);
  }

  inline RollbackMergeResponse& operator=(RollbackMergeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RollbackMergeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RollbackMergeResponse* internal_default_instance() {
    return reinterpret_cast<const RollbackMergeResponse*>(
               &_RollbackMergeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(RollbackMergeResponse* other);
  friend void swap(RollbackMergeResponse& a, RollbackMergeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RollbackMergeResponse* New() const final {
    return CreateMaybeMessage<RollbackMergeResponse>(NULL);
  }

  RollbackMergeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RollbackMergeResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RollbackMergeResponse& from);
  void MergeFrom(const RollbackMergeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RollbackMergeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.RollbackMergeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdminRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.AdminRequest) */ {
 public:
  AdminRequest();
  virtual ~AdminRequest();

  AdminRequest(const AdminRequest& from);

  inline AdminRequest& operator=(const AdminRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdminRequest(AdminRequest&& from) noexcept
    : AdminRequest() {
    *this = ::std::move(from);
  }

  inline AdminRequest& operator=(AdminRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AdminRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminRequest* internal_default_instance() {
    return reinterpret_cast<const AdminRequest*>(
               &_AdminRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(AdminRequest* other);
  friend void swap(AdminRequest& a, AdminRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdminRequest* New() const final {
    return CreateMaybeMessage<AdminRequest>(NULL);
  }

  AdminRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdminRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AdminRequest& from);
  void MergeFrom(const AdminRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdminRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .raft_cmdpb.ChangePeerRequest change_peer = 2;
  bool has_change_peer() const;
  void clear_change_peer();
  static const int kChangePeerFieldNumber = 2;
  private:
  const ::raft_cmdpb::ChangePeerRequest& _internal_change_peer() const;
  public:
  const ::raft_cmdpb::ChangePeerRequest& change_peer() const;
  ::raft_cmdpb::ChangePeerRequest* release_change_peer();
  ::raft_cmdpb::ChangePeerRequest* mutable_change_peer();
  void set_allocated_change_peer(::raft_cmdpb::ChangePeerRequest* change_peer);

  // .raft_cmdpb.SplitRequest split = 3;
  bool has_split() const;
  void clear_split();
  static const int kSplitFieldNumber = 3;
  private:
  const ::raft_cmdpb::SplitRequest& _internal_split() const;
  public:
  const ::raft_cmdpb::SplitRequest& split() const;
  ::raft_cmdpb::SplitRequest* release_split();
  ::raft_cmdpb::SplitRequest* mutable_split();
  void set_allocated_split(::raft_cmdpb::SplitRequest* split);

  // .raft_cmdpb.CompactLogRequest compact_log = 4;
  bool has_compact_log() const;
  void clear_compact_log();
  static const int kCompactLogFieldNumber = 4;
  private:
  const ::raft_cmdpb::CompactLogRequest& _internal_compact_log() const;
  public:
  const ::raft_cmdpb::CompactLogRequest& compact_log() const;
  ::raft_cmdpb::CompactLogRequest* release_compact_log();
  ::raft_cmdpb::CompactLogRequest* mutable_compact_log();
  void set_allocated_compact_log(::raft_cmdpb::CompactLogRequest* compact_log);

  // .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
  bool has_transfer_leader() const;
  void clear_transfer_leader();
  static const int kTransferLeaderFieldNumber = 5;
  private:
  const ::raft_cmdpb::TransferLeaderRequest& _internal_transfer_leader() const;
  public:
  const ::raft_cmdpb::TransferLeaderRequest& transfer_leader() const;
  ::raft_cmdpb::TransferLeaderRequest* release_transfer_leader();
  ::raft_cmdpb::TransferLeaderRequest* mutable_transfer_leader();
  void set_allocated_transfer_leader(::raft_cmdpb::TransferLeaderRequest* transfer_leader);

  // .raft_cmdpb.VerifyHashRequest verify_hash = 6;
  bool has_verify_hash() const;
  void clear_verify_hash();
  static const int kVerifyHashFieldNumber = 6;
  private:
  const ::raft_cmdpb::VerifyHashRequest& _internal_verify_hash() const;
  public:
  const ::raft_cmdpb::VerifyHashRequest& verify_hash() const;
  ::raft_cmdpb::VerifyHashRequest* release_verify_hash();
  ::raft_cmdpb::VerifyHashRequest* mutable_verify_hash();
  void set_allocated_verify_hash(::raft_cmdpb::VerifyHashRequest* verify_hash);

  // .raft_cmdpb.PrepareMergeRequest prepare_merge = 7;
  bool has_prepare_merge() const;
  void clear_prepare_merge();
  static const int kPrepareMergeFieldNumber = 7;
  private:
  const ::raft_cmdpb::PrepareMergeRequest& _internal_prepare_merge() const;
  public:
  const ::raft_cmdpb::PrepareMergeRequest& prepare_merge() const;
  ::raft_cmdpb::PrepareMergeRequest* release_prepare_merge();
  ::raft_cmdpb::PrepareMergeRequest* mutable_prepare_merge();
  void set_allocated_prepare_merge(::raft_cmdpb::PrepareMergeRequest* prepare_merge);

  // .raft_cmdpb.CommitMergeRequest commit_merge = 8;
  bool has_commit_merge() const;
  void clear_commit_merge();
  static const int kCommitMergeFieldNumber = 8;
  private:
  const ::raft_cmdpb::CommitMergeRequest& _internal_commit_merge() const;
  public:
  const ::raft_cmdpb::CommitMergeRequest& commit_merge() const;
  ::raft_cmdpb::CommitMergeRequest* release_commit_merge();
  ::raft_cmdpb::CommitMergeRequest* mutable_commit_merge();
  void set_allocated_commit_merge(::raft_cmdpb::CommitMergeRequest* commit_merge);

  // .raft_cmdpb.RollbackMergeRequest rollback_merge = 9;
  bool has_rollback_merge() const;
  void clear_rollback_merge();
  static const int kRollbackMergeFieldNumber = 9;
  private:
  const ::raft_cmdpb::RollbackMergeRequest& _internal_rollback_merge() const;
  public:
  const ::raft_cmdpb::RollbackMergeRequest& rollback_merge() const;
  ::raft_cmdpb::RollbackMergeRequest* release_rollback_merge();
  ::raft_cmdpb::RollbackMergeRequest* mutable_rollback_merge();
  void set_allocated_rollback_merge(::raft_cmdpb::RollbackMergeRequest* rollback_merge);

  // .raft_cmdpb.AdminCmdType cmd_type = 1;
  void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  ::raft_cmdpb::AdminCmdType cmd_type() const;
  void set_cmd_type(::raft_cmdpb::AdminCmdType value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.AdminRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::raft_cmdpb::ChangePeerRequest* change_peer_;
  ::raft_cmdpb::SplitRequest* split_;
  ::raft_cmdpb::CompactLogRequest* compact_log_;
  ::raft_cmdpb::TransferLeaderRequest* transfer_leader_;
  ::raft_cmdpb::VerifyHashRequest* verify_hash_;
  ::raft_cmdpb::PrepareMergeRequest* prepare_merge_;
  ::raft_cmdpb::CommitMergeRequest* commit_merge_;
  ::raft_cmdpb::RollbackMergeRequest* rollback_merge_;
  int cmd_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdminResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.AdminResponse) */ {
 public:
  AdminResponse();
  virtual ~AdminResponse();

  AdminResponse(const AdminResponse& from);

  inline AdminResponse& operator=(const AdminResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdminResponse(AdminResponse&& from) noexcept
    : AdminResponse() {
    *this = ::std::move(from);
  }

  inline AdminResponse& operator=(AdminResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AdminResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminResponse* internal_default_instance() {
    return reinterpret_cast<const AdminResponse*>(
               &_AdminResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(AdminResponse* other);
  friend void swap(AdminResponse& a, AdminResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdminResponse* New() const final {
    return CreateMaybeMessage<AdminResponse>(NULL);
  }

  AdminResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdminResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AdminResponse& from);
  void MergeFrom(const AdminResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdminResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .raft_cmdpb.ChangePeerResponse change_peer = 2;
  bool has_change_peer() const;
  void clear_change_peer();
  static const int kChangePeerFieldNumber = 2;
  private:
  const ::raft_cmdpb::ChangePeerResponse& _internal_change_peer() const;
  public:
  const ::raft_cmdpb::ChangePeerResponse& change_peer() const;
  ::raft_cmdpb::ChangePeerResponse* release_change_peer();
  ::raft_cmdpb::ChangePeerResponse* mutable_change_peer();
  void set_allocated_change_peer(::raft_cmdpb::ChangePeerResponse* change_peer);

  // .raft_cmdpb.SplitResponse split = 3;
  bool has_split() const;
  void clear_split();
  static const int kSplitFieldNumber = 3;
  private:
  const ::raft_cmdpb::SplitResponse& _internal_split() const;
  public:
  const ::raft_cmdpb::SplitResponse& split() const;
  ::raft_cmdpb::SplitResponse* release_split();
  ::raft_cmdpb::SplitResponse* mutable_split();
  void set_allocated_split(::raft_cmdpb::SplitResponse* split);

  // .raft_cmdpb.CompactLogResponse compact_log = 4;
  bool has_compact_log() const;
  void clear_compact_log();
  static const int kCompactLogFieldNumber = 4;
  private:
  const ::raft_cmdpb::CompactLogResponse& _internal_compact_log() const;
  public:
  const ::raft_cmdpb::CompactLogResponse& compact_log() const;
  ::raft_cmdpb::CompactLogResponse* release_compact_log();
  ::raft_cmdpb::CompactLogResponse* mutable_compact_log();
  void set_allocated_compact_log(::raft_cmdpb::CompactLogResponse* compact_log);

  // .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
  bool has_transfer_leader() const;
  void clear_transfer_leader();
  static const int kTransferLeaderFieldNumber = 5;
  private:
  const ::raft_cmdpb::TransferLeaderResponse& _internal_transfer_leader() const;
  public:
  const ::raft_cmdpb::TransferLeaderResponse& transfer_leader() const;
  ::raft_cmdpb::TransferLeaderResponse* release_transfer_leader();
  ::raft_cmdpb::TransferLeaderResponse* mutable_transfer_leader();
  void set_allocated_transfer_leader(::raft_cmdpb::TransferLeaderResponse* transfer_leader);

  // .raft_cmdpb.VerifyHashResponse verify_hash = 6;
  bool has_verify_hash() const;
  void clear_verify_hash();
  static const int kVerifyHashFieldNumber = 6;
  private:
  const ::raft_cmdpb::VerifyHashResponse& _internal_verify_hash() const;
  public:
  const ::raft_cmdpb::VerifyHashResponse& verify_hash() const;
  ::raft_cmdpb::VerifyHashResponse* release_verify_hash();
  ::raft_cmdpb::VerifyHashResponse* mutable_verify_hash();
  void set_allocated_verify_hash(::raft_cmdpb::VerifyHashResponse* verify_hash);

  // .raft_cmdpb.PrepareMergeResponse prepare_merge = 7;
  bool has_prepare_merge() const;
  void clear_prepare_merge();
  static const int kPrepareMergeFieldNumber = 7;
  private:
  const ::raft_cmdpb::PrepareMergeResponse& _internal_prepare_merge() const;
  public:
  const ::raft_cmdpb::PrepareMergeResponse& prepare_merge() const;
  ::raft_cmdpb::PrepareMergeResponse* release_prepare_merge();
  ::raft_cmdpb::PrepareMergeResponse* mutable_prepare_merge();
  void set_allocated_prepare_merge(::raft_cmdpb::PrepareMergeResponse* prepare_merge);

  // .raft_cmdpb.CommitMergeResponse commit_merge = 8;
  bool has_commit_merge() const;
  void clear_commit_merge();
  static const int kCommitMergeFieldNumber = 8;
  private:
  const ::raft_cmdpb::CommitMergeResponse& _internal_commit_merge() const;
  public:
  const ::raft_cmdpb::CommitMergeResponse& commit_merge() const;
  ::raft_cmdpb::CommitMergeResponse* release_commit_merge();
  ::raft_cmdpb::CommitMergeResponse* mutable_commit_merge();
  void set_allocated_commit_merge(::raft_cmdpb::CommitMergeResponse* commit_merge);

  // .raft_cmdpb.RollbackMergeResponse rollback_merge = 9;
  bool has_rollback_merge() const;
  void clear_rollback_merge();
  static const int kRollbackMergeFieldNumber = 9;
  private:
  const ::raft_cmdpb::RollbackMergeResponse& _internal_rollback_merge() const;
  public:
  const ::raft_cmdpb::RollbackMergeResponse& rollback_merge() const;
  ::raft_cmdpb::RollbackMergeResponse* release_rollback_merge();
  ::raft_cmdpb::RollbackMergeResponse* mutable_rollback_merge();
  void set_allocated_rollback_merge(::raft_cmdpb::RollbackMergeResponse* rollback_merge);

  // .raft_cmdpb.AdminCmdType cmd_type = 1;
  void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  ::raft_cmdpb::AdminCmdType cmd_type() const;
  void set_cmd_type(::raft_cmdpb::AdminCmdType value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.AdminResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::raft_cmdpb::ChangePeerResponse* change_peer_;
  ::raft_cmdpb::SplitResponse* split_;
  ::raft_cmdpb::CompactLogResponse* compact_log_;
  ::raft_cmdpb::TransferLeaderResponse* transfer_leader_;
  ::raft_cmdpb::VerifyHashResponse* verify_hash_;
  ::raft_cmdpb::PrepareMergeResponse* prepare_merge_;
  ::raft_cmdpb::CommitMergeResponse* commit_merge_;
  ::raft_cmdpb::RollbackMergeResponse* rollback_merge_;
  int cmd_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegionLeaderRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.RegionLeaderRequest) */ {
 public:
  RegionLeaderRequest();
  virtual ~RegionLeaderRequest();

  RegionLeaderRequest(const RegionLeaderRequest& from);

  inline RegionLeaderRequest& operator=(const RegionLeaderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegionLeaderRequest(RegionLeaderRequest&& from) noexcept
    : RegionLeaderRequest() {
    *this = ::std::move(from);
  }

  inline RegionLeaderRequest& operator=(RegionLeaderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionLeaderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegionLeaderRequest* internal_default_instance() {
    return reinterpret_cast<const RegionLeaderRequest*>(
               &_RegionLeaderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(RegionLeaderRequest* other);
  friend void swap(RegionLeaderRequest& a, RegionLeaderRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegionLeaderRequest* New() const final {
    return CreateMaybeMessage<RegionLeaderRequest>(NULL);
  }

  RegionLeaderRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegionLeaderRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegionLeaderRequest& from);
  void MergeFrom(const RegionLeaderRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionLeaderRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.RegionLeaderRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegionLeaderResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.RegionLeaderResponse) */ {
 public:
  RegionLeaderResponse();
  virtual ~RegionLeaderResponse();

  RegionLeaderResponse(const RegionLeaderResponse& from);

  inline RegionLeaderResponse& operator=(const RegionLeaderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegionLeaderResponse(RegionLeaderResponse&& from) noexcept
    : RegionLeaderResponse() {
    *this = ::std::move(from);
  }

  inline RegionLeaderResponse& operator=(RegionLeaderResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionLeaderResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegionLeaderResponse* internal_default_instance() {
    return reinterpret_cast<const RegionLeaderResponse*>(
               &_RegionLeaderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(RegionLeaderResponse* other);
  friend void swap(RegionLeaderResponse& a, RegionLeaderResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegionLeaderResponse* New() const final {
    return CreateMaybeMessage<RegionLeaderResponse>(NULL);
  }

  RegionLeaderResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegionLeaderResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegionLeaderResponse& from);
  void MergeFrom(const RegionLeaderResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionLeaderResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metapb.Peer leader = 1;
  bool has_leader() const;
  void clear_leader();
  static const int kLeaderFieldNumber = 1;
  private:
  const ::metapb::Peer& _internal_leader() const;
  public:
  const ::metapb::Peer& leader() const;
  ::metapb::Peer* release_leader();
  ::metapb::Peer* mutable_leader();
  void set_allocated_leader(::metapb::Peer* leader);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.RegionLeaderResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metapb::Peer* leader_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegionDetailRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.RegionDetailRequest) */ {
 public:
  RegionDetailRequest();
  virtual ~RegionDetailRequest();

  RegionDetailRequest(const RegionDetailRequest& from);

  inline RegionDetailRequest& operator=(const RegionDetailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegionDetailRequest(RegionDetailRequest&& from) noexcept
    : RegionDetailRequest() {
    *this = ::std::move(from);
  }

  inline RegionDetailRequest& operator=(RegionDetailRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionDetailRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegionDetailRequest* internal_default_instance() {
    return reinterpret_cast<const RegionDetailRequest*>(
               &_RegionDetailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(RegionDetailRequest* other);
  friend void swap(RegionDetailRequest& a, RegionDetailRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegionDetailRequest* New() const final {
    return CreateMaybeMessage<RegionDetailRequest>(NULL);
  }

  RegionDetailRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegionDetailRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegionDetailRequest& from);
  void MergeFrom(const RegionDetailRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionDetailRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_cmdpb.RegionDetailRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegionDetailResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.RegionDetailResponse) */ {
 public:
  RegionDetailResponse();
  virtual ~RegionDetailResponse();

  RegionDetailResponse(const RegionDetailResponse& from);

  inline RegionDetailResponse& operator=(const RegionDetailResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegionDetailResponse(RegionDetailResponse&& from) noexcept
    : RegionDetailResponse() {
    *this = ::std::move(from);
  }

  inline RegionDetailResponse& operator=(RegionDetailResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionDetailResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegionDetailResponse* internal_default_instance() {
    return reinterpret_cast<const RegionDetailResponse*>(
               &_RegionDetailResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(RegionDetailResponse* other);
  friend void swap(RegionDetailResponse& a, RegionDetailResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegionDetailResponse* New() const final {
    return CreateMaybeMessage<RegionDetailResponse>(NULL);
  }

  RegionDetailResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegionDetailResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegionDetailResponse& from);
  void MergeFrom(const RegionDetailResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionDetailResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metapb.Region region = 1;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 1;
  private:
  const ::metapb::Region& _internal_region() const;
  public:
  const ::metapb::Region& region() const;
  ::metapb::Region* release_region();
  ::metapb::Region* mutable_region();
  void set_allocated_region(::metapb::Region* region);

  // .metapb.Peer leader = 2;
  bool has_leader() const;
  void clear_leader();
  static const int kLeaderFieldNumber = 2;
  private:
  const ::metapb::Peer& _internal_leader() const;
  public:
  const ::metapb::Peer& leader() const;
  ::metapb::Peer* release_leader();
  ::metapb::Peer* mutable_leader();
  void set_allocated_leader(::metapb::Peer* leader);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.RegionDetailResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metapb::Region* region_;
  ::metapb::Peer* leader_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StatusRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.StatusRequest) */ {
 public:
  StatusRequest();
  virtual ~StatusRequest();

  StatusRequest(const StatusRequest& from);

  inline StatusRequest& operator=(const StatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatusRequest(StatusRequest&& from) noexcept
    : StatusRequest() {
    *this = ::std::move(from);
  }

  inline StatusRequest& operator=(StatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusRequest* internal_default_instance() {
    return reinterpret_cast<const StatusRequest*>(
               &_StatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(StatusRequest* other);
  friend void swap(StatusRequest& a, StatusRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatusRequest* New() const final {
    return CreateMaybeMessage<StatusRequest>(NULL);
  }

  StatusRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StatusRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StatusRequest& from);
  void MergeFrom(const StatusRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .raft_cmdpb.RegionLeaderRequest region_leader = 2;
  bool has_region_leader() const;
  void clear_region_leader();
  static const int kRegionLeaderFieldNumber = 2;
  private:
  const ::raft_cmdpb::RegionLeaderRequest& _internal_region_leader() const;
  public:
  const ::raft_cmdpb::RegionLeaderRequest& region_leader() const;
  ::raft_cmdpb::RegionLeaderRequest* release_region_leader();
  ::raft_cmdpb::RegionLeaderRequest* mutable_region_leader();
  void set_allocated_region_leader(::raft_cmdpb::RegionLeaderRequest* region_leader);

  // .raft_cmdpb.RegionDetailRequest region_detail = 3;
  bool has_region_detail() const;
  void clear_region_detail();
  static const int kRegionDetailFieldNumber = 3;
  private:
  const ::raft_cmdpb::RegionDetailRequest& _internal_region_detail() const;
  public:
  const ::raft_cmdpb::RegionDetailRequest& region_detail() const;
  ::raft_cmdpb::RegionDetailRequest* release_region_detail();
  ::raft_cmdpb::RegionDetailRequest* mutable_region_detail();
  void set_allocated_region_detail(::raft_cmdpb::RegionDetailRequest* region_detail);

  // .raft_cmdpb.StatusCmdType cmd_type = 1;
  void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  ::raft_cmdpb::StatusCmdType cmd_type() const;
  void set_cmd_type(::raft_cmdpb::StatusCmdType value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.StatusRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::raft_cmdpb::RegionLeaderRequest* region_leader_;
  ::raft_cmdpb::RegionDetailRequest* region_detail_;
  int cmd_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StatusResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.StatusResponse) */ {
 public:
  StatusResponse();
  virtual ~StatusResponse();

  StatusResponse(const StatusResponse& from);

  inline StatusResponse& operator=(const StatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatusResponse(StatusResponse&& from) noexcept
    : StatusResponse() {
    *this = ::std::move(from);
  }

  inline StatusResponse& operator=(StatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusResponse* internal_default_instance() {
    return reinterpret_cast<const StatusResponse*>(
               &_StatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(StatusResponse* other);
  friend void swap(StatusResponse& a, StatusResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatusResponse* New() const final {
    return CreateMaybeMessage<StatusResponse>(NULL);
  }

  StatusResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StatusResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StatusResponse& from);
  void MergeFrom(const StatusResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .raft_cmdpb.RegionLeaderResponse region_leader = 2;
  bool has_region_leader() const;
  void clear_region_leader();
  static const int kRegionLeaderFieldNumber = 2;
  private:
  const ::raft_cmdpb::RegionLeaderResponse& _internal_region_leader() const;
  public:
  const ::raft_cmdpb::RegionLeaderResponse& region_leader() const;
  ::raft_cmdpb::RegionLeaderResponse* release_region_leader();
  ::raft_cmdpb::RegionLeaderResponse* mutable_region_leader();
  void set_allocated_region_leader(::raft_cmdpb::RegionLeaderResponse* region_leader);

  // .raft_cmdpb.RegionDetailResponse region_detail = 3;
  bool has_region_detail() const;
  void clear_region_detail();
  static const int kRegionDetailFieldNumber = 3;
  private:
  const ::raft_cmdpb::RegionDetailResponse& _internal_region_detail() const;
  public:
  const ::raft_cmdpb::RegionDetailResponse& region_detail() const;
  ::raft_cmdpb::RegionDetailResponse* release_region_detail();
  ::raft_cmdpb::RegionDetailResponse* mutable_region_detail();
  void set_allocated_region_detail(::raft_cmdpb::RegionDetailResponse* region_detail);

  // .raft_cmdpb.StatusCmdType cmd_type = 1;
  void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 1;
  ::raft_cmdpb::StatusCmdType cmd_type() const;
  void set_cmd_type(::raft_cmdpb::StatusCmdType value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.StatusResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::raft_cmdpb::RegionLeaderResponse* region_leader_;
  ::raft_cmdpb::RegionDetailResponse* region_detail_;
  int cmd_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RaftRequestHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.RaftRequestHeader) */ {
 public:
  RaftRequestHeader();
  virtual ~RaftRequestHeader();

  RaftRequestHeader(const RaftRequestHeader& from);

  inline RaftRequestHeader& operator=(const RaftRequestHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RaftRequestHeader(RaftRequestHeader&& from) noexcept
    : RaftRequestHeader() {
    *this = ::std::move(from);
  }

  inline RaftRequestHeader& operator=(RaftRequestHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftRequestHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RaftRequestHeader* internal_default_instance() {
    return reinterpret_cast<const RaftRequestHeader*>(
               &_RaftRequestHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(RaftRequestHeader* other);
  friend void swap(RaftRequestHeader& a, RaftRequestHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RaftRequestHeader* New() const final {
    return CreateMaybeMessage<RaftRequestHeader>(NULL);
  }

  RaftRequestHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RaftRequestHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RaftRequestHeader& from);
  void MergeFrom(const RaftRequestHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftRequestHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes uuid = 4;
  void clear_uuid();
  static const int kUuidFieldNumber = 4;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // .metapb.Peer peer = 2;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 2;
  private:
  const ::metapb::Peer& _internal_peer() const;
  public:
  const ::metapb::Peer& peer() const;
  ::metapb::Peer* release_peer();
  ::metapb::Peer* mutable_peer();
  void set_allocated_peer(::metapb::Peer* peer);

  // .metapb.RegionEpoch region_epoch = 5;
  bool has_region_epoch() const;
  void clear_region_epoch();
  static const int kRegionEpochFieldNumber = 5;
  private:
  const ::metapb::RegionEpoch& _internal_region_epoch() const;
  public:
  const ::metapb::RegionEpoch& region_epoch() const;
  ::metapb::RegionEpoch* release_region_epoch();
  ::metapb::RegionEpoch* mutable_region_epoch();
  void set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch);

  // uint64 region_id = 1;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  ::google::protobuf::uint64 region_id() const;
  void set_region_id(::google::protobuf::uint64 value);

  // uint64 term = 6;
  void clear_term();
  static const int kTermFieldNumber = 6;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // bool read_quorum = 3;
  void clear_read_quorum();
  static const int kReadQuorumFieldNumber = 3;
  bool read_quorum() const;
  void set_read_quorum(bool value);

  // bool sync_log = 7;
  void clear_sync_log();
  static const int kSyncLogFieldNumber = 7;
  bool sync_log() const;
  void set_sync_log(bool value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.RaftRequestHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::metapb::Peer* peer_;
  ::metapb::RegionEpoch* region_epoch_;
  ::google::protobuf::uint64 region_id_;
  ::google::protobuf::uint64 term_;
  bool read_quorum_;
  bool sync_log_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RaftResponseHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.RaftResponseHeader) */ {
 public:
  RaftResponseHeader();
  virtual ~RaftResponseHeader();

  RaftResponseHeader(const RaftResponseHeader& from);

  inline RaftResponseHeader& operator=(const RaftResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RaftResponseHeader(RaftResponseHeader&& from) noexcept
    : RaftResponseHeader() {
    *this = ::std::move(from);
  }

  inline RaftResponseHeader& operator=(RaftResponseHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftResponseHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RaftResponseHeader* internal_default_instance() {
    return reinterpret_cast<const RaftResponseHeader*>(
               &_RaftResponseHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(RaftResponseHeader* other);
  friend void swap(RaftResponseHeader& a, RaftResponseHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RaftResponseHeader* New() const final {
    return CreateMaybeMessage<RaftResponseHeader>(NULL);
  }

  RaftResponseHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RaftResponseHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RaftResponseHeader& from);
  void MergeFrom(const RaftResponseHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftResponseHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes uuid = 2;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // .errorpb.Error error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::errorpb::Error& _internal_error() const;
  public:
  const ::errorpb::Error& error() const;
  ::errorpb::Error* release_error();
  ::errorpb::Error* mutable_error();
  void set_allocated_error(::errorpb::Error* error);

  // uint64 current_term = 3;
  void clear_current_term();
  static const int kCurrentTermFieldNumber = 3;
  ::google::protobuf::uint64 current_term() const;
  void set_current_term(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.RaftResponseHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::errorpb::Error* error_;
  ::google::protobuf::uint64 current_term_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RaftCmdRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.RaftCmdRequest) */ {
 public:
  RaftCmdRequest();
  virtual ~RaftCmdRequest();

  RaftCmdRequest(const RaftCmdRequest& from);

  inline RaftCmdRequest& operator=(const RaftCmdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RaftCmdRequest(RaftCmdRequest&& from) noexcept
    : RaftCmdRequest() {
    *this = ::std::move(from);
  }

  inline RaftCmdRequest& operator=(RaftCmdRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftCmdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RaftCmdRequest* internal_default_instance() {
    return reinterpret_cast<const RaftCmdRequest*>(
               &_RaftCmdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(RaftCmdRequest* other);
  friend void swap(RaftCmdRequest& a, RaftCmdRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RaftCmdRequest* New() const final {
    return CreateMaybeMessage<RaftCmdRequest>(NULL);
  }

  RaftCmdRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RaftCmdRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RaftCmdRequest& from);
  void MergeFrom(const RaftCmdRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftCmdRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .raft_cmdpb.Request requests = 2;
  int requests_size() const;
  void clear_requests();
  static const int kRequestsFieldNumber = 2;
  ::raft_cmdpb::Request* mutable_requests(int index);
  ::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Request >*
      mutable_requests();
  const ::raft_cmdpb::Request& requests(int index) const;
  ::raft_cmdpb::Request* add_requests();
  const ::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Request >&
      requests() const;

  // .raft_cmdpb.RaftRequestHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::raft_cmdpb::RaftRequestHeader& _internal_header() const;
  public:
  const ::raft_cmdpb::RaftRequestHeader& header() const;
  ::raft_cmdpb::RaftRequestHeader* release_header();
  ::raft_cmdpb::RaftRequestHeader* mutable_header();
  void set_allocated_header(::raft_cmdpb::RaftRequestHeader* header);

  // .raft_cmdpb.AdminRequest admin_request = 3;
  bool has_admin_request() const;
  void clear_admin_request();
  static const int kAdminRequestFieldNumber = 3;
  private:
  const ::raft_cmdpb::AdminRequest& _internal_admin_request() const;
  public:
  const ::raft_cmdpb::AdminRequest& admin_request() const;
  ::raft_cmdpb::AdminRequest* release_admin_request();
  ::raft_cmdpb::AdminRequest* mutable_admin_request();
  void set_allocated_admin_request(::raft_cmdpb::AdminRequest* admin_request);

  // .raft_cmdpb.StatusRequest status_request = 4;
  bool has_status_request() const;
  void clear_status_request();
  static const int kStatusRequestFieldNumber = 4;
  private:
  const ::raft_cmdpb::StatusRequest& _internal_status_request() const;
  public:
  const ::raft_cmdpb::StatusRequest& status_request() const;
  ::raft_cmdpb::StatusRequest* release_status_request();
  ::raft_cmdpb::StatusRequest* mutable_status_request();
  void set_allocated_status_request(::raft_cmdpb::StatusRequest* status_request);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.RaftCmdRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Request > requests_;
  ::raft_cmdpb::RaftRequestHeader* header_;
  ::raft_cmdpb::AdminRequest* admin_request_;
  ::raft_cmdpb::StatusRequest* status_request_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RaftCmdResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_cmdpb.RaftCmdResponse) */ {
 public:
  RaftCmdResponse();
  virtual ~RaftCmdResponse();

  RaftCmdResponse(const RaftCmdResponse& from);

  inline RaftCmdResponse& operator=(const RaftCmdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RaftCmdResponse(RaftCmdResponse&& from) noexcept
    : RaftCmdResponse() {
    *this = ::std::move(from);
  }

  inline RaftCmdResponse& operator=(RaftCmdResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftCmdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RaftCmdResponse* internal_default_instance() {
    return reinterpret_cast<const RaftCmdResponse*>(
               &_RaftCmdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(RaftCmdResponse* other);
  friend void swap(RaftCmdResponse& a, RaftCmdResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RaftCmdResponse* New() const final {
    return CreateMaybeMessage<RaftCmdResponse>(NULL);
  }

  RaftCmdResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RaftCmdResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RaftCmdResponse& from);
  void MergeFrom(const RaftCmdResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftCmdResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .raft_cmdpb.Response responses = 2;
  int responses_size() const;
  void clear_responses();
  static const int kResponsesFieldNumber = 2;
  ::raft_cmdpb::Response* mutable_responses(int index);
  ::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Response >*
      mutable_responses();
  const ::raft_cmdpb::Response& responses(int index) const;
  ::raft_cmdpb::Response* add_responses();
  const ::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Response >&
      responses() const;

  // .raft_cmdpb.RaftResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::raft_cmdpb::RaftResponseHeader& _internal_header() const;
  public:
  const ::raft_cmdpb::RaftResponseHeader& header() const;
  ::raft_cmdpb::RaftResponseHeader* release_header();
  ::raft_cmdpb::RaftResponseHeader* mutable_header();
  void set_allocated_header(::raft_cmdpb::RaftResponseHeader* header);

  // .raft_cmdpb.AdminResponse admin_response = 3;
  bool has_admin_response() const;
  void clear_admin_response();
  static const int kAdminResponseFieldNumber = 3;
  private:
  const ::raft_cmdpb::AdminResponse& _internal_admin_response() const;
  public:
  const ::raft_cmdpb::AdminResponse& admin_response() const;
  ::raft_cmdpb::AdminResponse* release_admin_response();
  ::raft_cmdpb::AdminResponse* mutable_admin_response();
  void set_allocated_admin_response(::raft_cmdpb::AdminResponse* admin_response);

  // .raft_cmdpb.StatusResponse status_response = 4;
  bool has_status_response() const;
  void clear_status_response();
  static const int kStatusResponseFieldNumber = 4;
  private:
  const ::raft_cmdpb::StatusResponse& _internal_status_response() const;
  public:
  const ::raft_cmdpb::StatusResponse& status_response() const;
  ::raft_cmdpb::StatusResponse* release_status_response();
  ::raft_cmdpb::StatusResponse* mutable_status_response();
  void set_allocated_status_response(::raft_cmdpb::StatusResponse* status_response);

  // @@protoc_insertion_point(class_scope:raft_cmdpb.RaftCmdResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Response > responses_;
  ::raft_cmdpb::RaftResponseHeader* header_;
  ::raft_cmdpb::AdminResponse* admin_response_;
  ::raft_cmdpb::StatusResponse* status_response_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_5fcmdpb_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetRequest

// string cf = 1;
inline void GetRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRequest::cf() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.GetRequest.cf)
  return cf_.GetNoArena();
}
inline void GetRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.GetRequest.cf)
}
#if LANG_CXX11
inline void GetRequest::set_cf(::std::string&& value) {
  
  cf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.GetRequest.cf)
}
#endif
inline void GetRequest::set_cf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.GetRequest.cf)
}
inline void GetRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.GetRequest.cf)
}
inline ::std::string* GetRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.GetRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRequest::release_cf() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.GetRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.GetRequest.cf)
}

// bytes key = 2;
inline void GetRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRequest::key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.GetRequest.key)
  return key_.GetNoArena();
}
inline void GetRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.GetRequest.key)
}
#if LANG_CXX11
inline void GetRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.GetRequest.key)
}
#endif
inline void GetRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.GetRequest.key)
}
inline void GetRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.GetRequest.key)
}
inline ::std::string* GetRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.GetRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRequest::release_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.GetRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.GetRequest.key)
}

// -------------------------------------------------------------------

// GetResponse

// bytes value = 1;
inline void GetResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetResponse::value() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.GetResponse.value)
  return value_.GetNoArena();
}
inline void GetResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.GetResponse.value)
}
#if LANG_CXX11
inline void GetResponse::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.GetResponse.value)
}
#endif
inline void GetResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.GetResponse.value)
}
inline void GetResponse::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.GetResponse.value)
}
inline ::std::string* GetResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.GetResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetResponse::release_value() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.GetResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.GetResponse.value)
}

// -------------------------------------------------------------------

// PutRequest

// string cf = 1;
inline void PutRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutRequest::cf() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.PutRequest.cf)
  return cf_.GetNoArena();
}
inline void PutRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.PutRequest.cf)
}
#if LANG_CXX11
inline void PutRequest::set_cf(::std::string&& value) {
  
  cf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.PutRequest.cf)
}
#endif
inline void PutRequest::set_cf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.PutRequest.cf)
}
inline void PutRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.PutRequest.cf)
}
inline ::std::string* PutRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.PutRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_cf() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.PutRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.PutRequest.cf)
}

// bytes key = 2;
inline void PutRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutRequest::key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.PutRequest.key)
  return key_.GetNoArena();
}
inline void PutRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.PutRequest.key)
}
#if LANG_CXX11
inline void PutRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.PutRequest.key)
}
#endif
inline void PutRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.PutRequest.key)
}
inline void PutRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.PutRequest.key)
}
inline ::std::string* PutRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.PutRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.PutRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.PutRequest.key)
}

// bytes value = 3;
inline void PutRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutRequest::value() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.PutRequest.value)
  return value_.GetNoArena();
}
inline void PutRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.PutRequest.value)
}
#if LANG_CXX11
inline void PutRequest::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.PutRequest.value)
}
#endif
inline void PutRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.PutRequest.value)
}
inline void PutRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.PutRequest.value)
}
inline ::std::string* PutRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.PutRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_value() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.PutRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.PutRequest.value)
}

// -------------------------------------------------------------------

// PutResponse

// -------------------------------------------------------------------

// DeleteRequest

// string cf = 1;
inline void DeleteRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteRequest::cf() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.DeleteRequest.cf)
  return cf_.GetNoArena();
}
inline void DeleteRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.DeleteRequest.cf)
}
#if LANG_CXX11
inline void DeleteRequest::set_cf(::std::string&& value) {
  
  cf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.DeleteRequest.cf)
}
#endif
inline void DeleteRequest::set_cf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.DeleteRequest.cf)
}
inline void DeleteRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.DeleteRequest.cf)
}
inline ::std::string* DeleteRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.DeleteRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteRequest::release_cf() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.DeleteRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.DeleteRequest.cf)
}

// bytes key = 2;
inline void DeleteRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteRequest::key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.DeleteRequest.key)
  return key_.GetNoArena();
}
inline void DeleteRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.DeleteRequest.key)
}
#if LANG_CXX11
inline void DeleteRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.DeleteRequest.key)
}
#endif
inline void DeleteRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.DeleteRequest.key)
}
inline void DeleteRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.DeleteRequest.key)
}
inline ::std::string* DeleteRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.DeleteRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteRequest::release_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.DeleteRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.DeleteRequest.key)
}

// -------------------------------------------------------------------

// DeleteResponse

// -------------------------------------------------------------------

// DeleteRangeRequest

// string cf = 1;
inline void DeleteRangeRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteRangeRequest::cf() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.DeleteRangeRequest.cf)
  return cf_.GetNoArena();
}
inline void DeleteRangeRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.DeleteRangeRequest.cf)
}
#if LANG_CXX11
inline void DeleteRangeRequest::set_cf(::std::string&& value) {
  
  cf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.DeleteRangeRequest.cf)
}
#endif
inline void DeleteRangeRequest::set_cf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.DeleteRangeRequest.cf)
}
inline void DeleteRangeRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.DeleteRangeRequest.cf)
}
inline ::std::string* DeleteRangeRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.DeleteRangeRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteRangeRequest::release_cf() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.DeleteRangeRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRangeRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.DeleteRangeRequest.cf)
}

// bytes start_key = 2;
inline void DeleteRangeRequest::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteRangeRequest::start_key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.DeleteRangeRequest.start_key)
  return start_key_.GetNoArena();
}
inline void DeleteRangeRequest::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.DeleteRangeRequest.start_key)
}
#if LANG_CXX11
inline void DeleteRangeRequest::set_start_key(::std::string&& value) {
  
  start_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.DeleteRangeRequest.start_key)
}
#endif
inline void DeleteRangeRequest::set_start_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.DeleteRangeRequest.start_key)
}
inline void DeleteRangeRequest::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.DeleteRangeRequest.start_key)
}
inline ::std::string* DeleteRangeRequest::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.DeleteRangeRequest.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteRangeRequest::release_start_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.DeleteRangeRequest.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRangeRequest::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.DeleteRangeRequest.start_key)
}

// bytes end_key = 3;
inline void DeleteRangeRequest::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteRangeRequest::end_key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.DeleteRangeRequest.end_key)
  return end_key_.GetNoArena();
}
inline void DeleteRangeRequest::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.DeleteRangeRequest.end_key)
}
#if LANG_CXX11
inline void DeleteRangeRequest::set_end_key(::std::string&& value) {
  
  end_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.DeleteRangeRequest.end_key)
}
#endif
inline void DeleteRangeRequest::set_end_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.DeleteRangeRequest.end_key)
}
inline void DeleteRangeRequest::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.DeleteRangeRequest.end_key)
}
inline ::std::string* DeleteRangeRequest::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.DeleteRangeRequest.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteRangeRequest::release_end_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.DeleteRangeRequest.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRangeRequest::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.DeleteRangeRequest.end_key)
}

// -------------------------------------------------------------------

// DeleteRangeResponse

// -------------------------------------------------------------------

// SnapRequest

// -------------------------------------------------------------------

// SnapResponse

// .metapb.Region region = 1;
inline bool SnapResponse::has_region() const {
  return this != internal_default_instance() && region_ != NULL;
}
inline const ::metapb::Region& SnapResponse::_internal_region() const {
  return *region_;
}
inline const ::metapb::Region& SnapResponse::region() const {
  const ::metapb::Region* p = region_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.SnapResponse.region)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Region*>(
      &::metapb::_Region_default_instance_);
}
inline ::metapb::Region* SnapResponse::release_region() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.SnapResponse.region)
  
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
inline ::metapb::Region* SnapResponse::mutable_region() {
  
  if (region_ == NULL) {
    auto* p = CreateMaybeMessage<::metapb::Region>(GetArenaNoVirtual());
    region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SnapResponse.region)
  return region_;
}
inline void SnapResponse::set_allocated_region(::metapb::Region* region) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(region_);
  }
  if (region) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      region = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    
  } else {
    
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SnapResponse.region)
}

// -------------------------------------------------------------------

// PrewriteRequest

// bytes key = 1;
inline void PrewriteRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrewriteRequest::key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.PrewriteRequest.key)
  return key_.GetNoArena();
}
inline void PrewriteRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.PrewriteRequest.key)
}
#if LANG_CXX11
inline void PrewriteRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.PrewriteRequest.key)
}
#endif
inline void PrewriteRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.PrewriteRequest.key)
}
inline void PrewriteRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.PrewriteRequest.key)
}
inline ::std::string* PrewriteRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.PrewriteRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrewriteRequest::release_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.PrewriteRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrewriteRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.PrewriteRequest.key)
}

// bytes value = 2;
inline void PrewriteRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrewriteRequest::value() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.PrewriteRequest.value)
  return value_.GetNoArena();
}
inline void PrewriteRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.PrewriteRequest.value)
}
#if LANG_CXX11
inline void PrewriteRequest::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.PrewriteRequest.value)
}
#endif
inline void PrewriteRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.PrewriteRequest.value)
}
inline void PrewriteRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.PrewriteRequest.value)
}
inline ::std::string* PrewriteRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.PrewriteRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrewriteRequest::release_value() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.PrewriteRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrewriteRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.PrewriteRequest.value)
}

// bytes lock = 3;
inline void PrewriteRequest::clear_lock() {
  lock_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrewriteRequest::lock() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.PrewriteRequest.lock)
  return lock_.GetNoArena();
}
inline void PrewriteRequest::set_lock(const ::std::string& value) {
  
  lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.PrewriteRequest.lock)
}
#if LANG_CXX11
inline void PrewriteRequest::set_lock(::std::string&& value) {
  
  lock_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.PrewriteRequest.lock)
}
#endif
inline void PrewriteRequest::set_lock(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.PrewriteRequest.lock)
}
inline void PrewriteRequest::set_lock(const void* value, size_t size) {
  
  lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.PrewriteRequest.lock)
}
inline ::std::string* PrewriteRequest::mutable_lock() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.PrewriteRequest.lock)
  return lock_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrewriteRequest::release_lock() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.PrewriteRequest.lock)
  
  return lock_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrewriteRequest::set_allocated_lock(::std::string* lock) {
  if (lock != NULL) {
    
  } else {
    
  }
  lock_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lock);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.PrewriteRequest.lock)
}

// -------------------------------------------------------------------

// PrewriteResponse

// -------------------------------------------------------------------

// IngestSSTRequest

// .import_sstpb.SSTMeta sst = 1;
inline bool IngestSSTRequest::has_sst() const {
  return this != internal_default_instance() && sst_ != NULL;
}
inline const ::import_sstpb::SSTMeta& IngestSSTRequest::_internal_sst() const {
  return *sst_;
}
inline const ::import_sstpb::SSTMeta& IngestSSTRequest::sst() const {
  const ::import_sstpb::SSTMeta* p = sst_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.IngestSSTRequest.sst)
  return p != NULL ? *p : *reinterpret_cast<const ::import_sstpb::SSTMeta*>(
      &::import_sstpb::_SSTMeta_default_instance_);
}
inline ::import_sstpb::SSTMeta* IngestSSTRequest::release_sst() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.IngestSSTRequest.sst)
  
  ::import_sstpb::SSTMeta* temp = sst_;
  sst_ = NULL;
  return temp;
}
inline ::import_sstpb::SSTMeta* IngestSSTRequest::mutable_sst() {
  
  if (sst_ == NULL) {
    auto* p = CreateMaybeMessage<::import_sstpb::SSTMeta>(GetArenaNoVirtual());
    sst_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.IngestSSTRequest.sst)
  return sst_;
}
inline void IngestSSTRequest::set_allocated_sst(::import_sstpb::SSTMeta* sst) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sst_);
  }
  if (sst) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sst = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sst, submessage_arena);
    }
    
  } else {
    
  }
  sst_ = sst;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.IngestSSTRequest.sst)
}

// -------------------------------------------------------------------

// IngestSSTResponse

// -------------------------------------------------------------------

// Request

// .raft_cmdpb.CmdType cmd_type = 1;
inline void Request::clear_cmd_type() {
  cmd_type_ = 0;
}
inline ::raft_cmdpb::CmdType Request::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.cmd_type)
  return static_cast< ::raft_cmdpb::CmdType >(cmd_type_);
}
inline void Request::set_cmd_type(::raft_cmdpb::CmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.Request.cmd_type)
}

// .raft_cmdpb.GetRequest get = 2;
inline bool Request::has_get() const {
  return this != internal_default_instance() && get_ != NULL;
}
inline void Request::clear_get() {
  if (GetArenaNoVirtual() == NULL && get_ != NULL) {
    delete get_;
  }
  get_ = NULL;
}
inline const ::raft_cmdpb::GetRequest& Request::_internal_get() const {
  return *get_;
}
inline const ::raft_cmdpb::GetRequest& Request::get() const {
  const ::raft_cmdpb::GetRequest* p = get_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.get)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::GetRequest*>(
      &::raft_cmdpb::_GetRequest_default_instance_);
}
inline ::raft_cmdpb::GetRequest* Request::release_get() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Request.get)
  
  ::raft_cmdpb::GetRequest* temp = get_;
  get_ = NULL;
  return temp;
}
inline ::raft_cmdpb::GetRequest* Request::mutable_get() {
  
  if (get_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::GetRequest>(GetArenaNoVirtual());
    get_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.get)
  return get_;
}
inline void Request::set_allocated_get(::raft_cmdpb::GetRequest* get) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete get_;
  }
  if (get) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get, submessage_arena);
    }
    
  } else {
    
  }
  get_ = get;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.get)
}

// .raft_cmdpb.PutRequest put = 4;
inline bool Request::has_put() const {
  return this != internal_default_instance() && put_ != NULL;
}
inline void Request::clear_put() {
  if (GetArenaNoVirtual() == NULL && put_ != NULL) {
    delete put_;
  }
  put_ = NULL;
}
inline const ::raft_cmdpb::PutRequest& Request::_internal_put() const {
  return *put_;
}
inline const ::raft_cmdpb::PutRequest& Request::put() const {
  const ::raft_cmdpb::PutRequest* p = put_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.put)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::PutRequest*>(
      &::raft_cmdpb::_PutRequest_default_instance_);
}
inline ::raft_cmdpb::PutRequest* Request::release_put() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Request.put)
  
  ::raft_cmdpb::PutRequest* temp = put_;
  put_ = NULL;
  return temp;
}
inline ::raft_cmdpb::PutRequest* Request::mutable_put() {
  
  if (put_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::PutRequest>(GetArenaNoVirtual());
    put_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.put)
  return put_;
}
inline void Request::set_allocated_put(::raft_cmdpb::PutRequest* put) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete put_;
  }
  if (put) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      put = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, put, submessage_arena);
    }
    
  } else {
    
  }
  put_ = put;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.put)
}

// .raft_cmdpb.DeleteRequest delete = 5;
inline bool Request::has_delete_() const {
  return this != internal_default_instance() && delete__ != NULL;
}
inline void Request::clear_delete_() {
  if (GetArenaNoVirtual() == NULL && delete__ != NULL) {
    delete delete__;
  }
  delete__ = NULL;
}
inline const ::raft_cmdpb::DeleteRequest& Request::_internal_delete_() const {
  return *delete__;
}
inline const ::raft_cmdpb::DeleteRequest& Request::delete_() const {
  const ::raft_cmdpb::DeleteRequest* p = delete__;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.delete)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::DeleteRequest*>(
      &::raft_cmdpb::_DeleteRequest_default_instance_);
}
inline ::raft_cmdpb::DeleteRequest* Request::release_delete_() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Request.delete)
  
  ::raft_cmdpb::DeleteRequest* temp = delete__;
  delete__ = NULL;
  return temp;
}
inline ::raft_cmdpb::DeleteRequest* Request::mutable_delete_() {
  
  if (delete__ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::DeleteRequest>(GetArenaNoVirtual());
    delete__ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.delete)
  return delete__;
}
inline void Request::set_allocated_delete_(::raft_cmdpb::DeleteRequest* delete_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete delete__;
  }
  if (delete_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      delete_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, delete_, submessage_arena);
    }
    
  } else {
    
  }
  delete__ = delete_;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.delete)
}

// .raft_cmdpb.SnapRequest snap = 6;
inline bool Request::has_snap() const {
  return this != internal_default_instance() && snap_ != NULL;
}
inline void Request::clear_snap() {
  if (GetArenaNoVirtual() == NULL && snap_ != NULL) {
    delete snap_;
  }
  snap_ = NULL;
}
inline const ::raft_cmdpb::SnapRequest& Request::_internal_snap() const {
  return *snap_;
}
inline const ::raft_cmdpb::SnapRequest& Request::snap() const {
  const ::raft_cmdpb::SnapRequest* p = snap_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.snap)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::SnapRequest*>(
      &::raft_cmdpb::_SnapRequest_default_instance_);
}
inline ::raft_cmdpb::SnapRequest* Request::release_snap() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Request.snap)
  
  ::raft_cmdpb::SnapRequest* temp = snap_;
  snap_ = NULL;
  return temp;
}
inline ::raft_cmdpb::SnapRequest* Request::mutable_snap() {
  
  if (snap_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::SnapRequest>(GetArenaNoVirtual());
    snap_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.snap)
  return snap_;
}
inline void Request::set_allocated_snap(::raft_cmdpb::SnapRequest* snap) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete snap_;
  }
  if (snap) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      snap = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, snap, submessage_arena);
    }
    
  } else {
    
  }
  snap_ = snap;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.snap)
}

// .raft_cmdpb.PrewriteRequest prewrite = 7;
inline bool Request::has_prewrite() const {
  return this != internal_default_instance() && prewrite_ != NULL;
}
inline void Request::clear_prewrite() {
  if (GetArenaNoVirtual() == NULL && prewrite_ != NULL) {
    delete prewrite_;
  }
  prewrite_ = NULL;
}
inline const ::raft_cmdpb::PrewriteRequest& Request::_internal_prewrite() const {
  return *prewrite_;
}
inline const ::raft_cmdpb::PrewriteRequest& Request::prewrite() const {
  const ::raft_cmdpb::PrewriteRequest* p = prewrite_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.prewrite)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::PrewriteRequest*>(
      &::raft_cmdpb::_PrewriteRequest_default_instance_);
}
inline ::raft_cmdpb::PrewriteRequest* Request::release_prewrite() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Request.prewrite)
  
  ::raft_cmdpb::PrewriteRequest* temp = prewrite_;
  prewrite_ = NULL;
  return temp;
}
inline ::raft_cmdpb::PrewriteRequest* Request::mutable_prewrite() {
  
  if (prewrite_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::PrewriteRequest>(GetArenaNoVirtual());
    prewrite_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.prewrite)
  return prewrite_;
}
inline void Request::set_allocated_prewrite(::raft_cmdpb::PrewriteRequest* prewrite) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prewrite_;
  }
  if (prewrite) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prewrite = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prewrite, submessage_arena);
    }
    
  } else {
    
  }
  prewrite_ = prewrite;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.prewrite)
}

// .raft_cmdpb.DeleteRangeRequest delete_range = 8;
inline bool Request::has_delete_range() const {
  return this != internal_default_instance() && delete_range_ != NULL;
}
inline void Request::clear_delete_range() {
  if (GetArenaNoVirtual() == NULL && delete_range_ != NULL) {
    delete delete_range_;
  }
  delete_range_ = NULL;
}
inline const ::raft_cmdpb::DeleteRangeRequest& Request::_internal_delete_range() const {
  return *delete_range_;
}
inline const ::raft_cmdpb::DeleteRangeRequest& Request::delete_range() const {
  const ::raft_cmdpb::DeleteRangeRequest* p = delete_range_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.delete_range)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::DeleteRangeRequest*>(
      &::raft_cmdpb::_DeleteRangeRequest_default_instance_);
}
inline ::raft_cmdpb::DeleteRangeRequest* Request::release_delete_range() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Request.delete_range)
  
  ::raft_cmdpb::DeleteRangeRequest* temp = delete_range_;
  delete_range_ = NULL;
  return temp;
}
inline ::raft_cmdpb::DeleteRangeRequest* Request::mutable_delete_range() {
  
  if (delete_range_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::DeleteRangeRequest>(GetArenaNoVirtual());
    delete_range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.delete_range)
  return delete_range_;
}
inline void Request::set_allocated_delete_range(::raft_cmdpb::DeleteRangeRequest* delete_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete delete_range_;
  }
  if (delete_range) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      delete_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, delete_range, submessage_arena);
    }
    
  } else {
    
  }
  delete_range_ = delete_range;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.delete_range)
}

// .raft_cmdpb.IngestSSTRequest ingest_sst = 9;
inline bool Request::has_ingest_sst() const {
  return this != internal_default_instance() && ingest_sst_ != NULL;
}
inline void Request::clear_ingest_sst() {
  if (GetArenaNoVirtual() == NULL && ingest_sst_ != NULL) {
    delete ingest_sst_;
  }
  ingest_sst_ = NULL;
}
inline const ::raft_cmdpb::IngestSSTRequest& Request::_internal_ingest_sst() const {
  return *ingest_sst_;
}
inline const ::raft_cmdpb::IngestSSTRequest& Request::ingest_sst() const {
  const ::raft_cmdpb::IngestSSTRequest* p = ingest_sst_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.ingest_sst)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::IngestSSTRequest*>(
      &::raft_cmdpb::_IngestSSTRequest_default_instance_);
}
inline ::raft_cmdpb::IngestSSTRequest* Request::release_ingest_sst() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Request.ingest_sst)
  
  ::raft_cmdpb::IngestSSTRequest* temp = ingest_sst_;
  ingest_sst_ = NULL;
  return temp;
}
inline ::raft_cmdpb::IngestSSTRequest* Request::mutable_ingest_sst() {
  
  if (ingest_sst_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::IngestSSTRequest>(GetArenaNoVirtual());
    ingest_sst_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.ingest_sst)
  return ingest_sst_;
}
inline void Request::set_allocated_ingest_sst(::raft_cmdpb::IngestSSTRequest* ingest_sst) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ingest_sst_;
  }
  if (ingest_sst) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ingest_sst = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ingest_sst, submessage_arena);
    }
    
  } else {
    
  }
  ingest_sst_ = ingest_sst;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.ingest_sst)
}

// -------------------------------------------------------------------

// Response

// .raft_cmdpb.CmdType cmd_type = 1;
inline void Response::clear_cmd_type() {
  cmd_type_ = 0;
}
inline ::raft_cmdpb::CmdType Response::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.cmd_type)
  return static_cast< ::raft_cmdpb::CmdType >(cmd_type_);
}
inline void Response::set_cmd_type(::raft_cmdpb::CmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.Response.cmd_type)
}

// .raft_cmdpb.GetResponse get = 2;
inline bool Response::has_get() const {
  return this != internal_default_instance() && get_ != NULL;
}
inline void Response::clear_get() {
  if (GetArenaNoVirtual() == NULL && get_ != NULL) {
    delete get_;
  }
  get_ = NULL;
}
inline const ::raft_cmdpb::GetResponse& Response::_internal_get() const {
  return *get_;
}
inline const ::raft_cmdpb::GetResponse& Response::get() const {
  const ::raft_cmdpb::GetResponse* p = get_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.get)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::GetResponse*>(
      &::raft_cmdpb::_GetResponse_default_instance_);
}
inline ::raft_cmdpb::GetResponse* Response::release_get() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Response.get)
  
  ::raft_cmdpb::GetResponse* temp = get_;
  get_ = NULL;
  return temp;
}
inline ::raft_cmdpb::GetResponse* Response::mutable_get() {
  
  if (get_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::GetResponse>(GetArenaNoVirtual());
    get_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.get)
  return get_;
}
inline void Response::set_allocated_get(::raft_cmdpb::GetResponse* get) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete get_;
  }
  if (get) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      get = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, get, submessage_arena);
    }
    
  } else {
    
  }
  get_ = get;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.get)
}

// .raft_cmdpb.PutResponse put = 4;
inline bool Response::has_put() const {
  return this != internal_default_instance() && put_ != NULL;
}
inline void Response::clear_put() {
  if (GetArenaNoVirtual() == NULL && put_ != NULL) {
    delete put_;
  }
  put_ = NULL;
}
inline const ::raft_cmdpb::PutResponse& Response::_internal_put() const {
  return *put_;
}
inline const ::raft_cmdpb::PutResponse& Response::put() const {
  const ::raft_cmdpb::PutResponse* p = put_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.put)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::PutResponse*>(
      &::raft_cmdpb::_PutResponse_default_instance_);
}
inline ::raft_cmdpb::PutResponse* Response::release_put() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Response.put)
  
  ::raft_cmdpb::PutResponse* temp = put_;
  put_ = NULL;
  return temp;
}
inline ::raft_cmdpb::PutResponse* Response::mutable_put() {
  
  if (put_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::PutResponse>(GetArenaNoVirtual());
    put_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.put)
  return put_;
}
inline void Response::set_allocated_put(::raft_cmdpb::PutResponse* put) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete put_;
  }
  if (put) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      put = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, put, submessage_arena);
    }
    
  } else {
    
  }
  put_ = put;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.put)
}

// .raft_cmdpb.DeleteResponse delete = 5;
inline bool Response::has_delete_() const {
  return this != internal_default_instance() && delete__ != NULL;
}
inline void Response::clear_delete_() {
  if (GetArenaNoVirtual() == NULL && delete__ != NULL) {
    delete delete__;
  }
  delete__ = NULL;
}
inline const ::raft_cmdpb::DeleteResponse& Response::_internal_delete_() const {
  return *delete__;
}
inline const ::raft_cmdpb::DeleteResponse& Response::delete_() const {
  const ::raft_cmdpb::DeleteResponse* p = delete__;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.delete)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::DeleteResponse*>(
      &::raft_cmdpb::_DeleteResponse_default_instance_);
}
inline ::raft_cmdpb::DeleteResponse* Response::release_delete_() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Response.delete)
  
  ::raft_cmdpb::DeleteResponse* temp = delete__;
  delete__ = NULL;
  return temp;
}
inline ::raft_cmdpb::DeleteResponse* Response::mutable_delete_() {
  
  if (delete__ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::DeleteResponse>(GetArenaNoVirtual());
    delete__ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.delete)
  return delete__;
}
inline void Response::set_allocated_delete_(::raft_cmdpb::DeleteResponse* delete_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete delete__;
  }
  if (delete_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      delete_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, delete_, submessage_arena);
    }
    
  } else {
    
  }
  delete__ = delete_;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.delete)
}

// .raft_cmdpb.SnapResponse snap = 6;
inline bool Response::has_snap() const {
  return this != internal_default_instance() && snap_ != NULL;
}
inline void Response::clear_snap() {
  if (GetArenaNoVirtual() == NULL && snap_ != NULL) {
    delete snap_;
  }
  snap_ = NULL;
}
inline const ::raft_cmdpb::SnapResponse& Response::_internal_snap() const {
  return *snap_;
}
inline const ::raft_cmdpb::SnapResponse& Response::snap() const {
  const ::raft_cmdpb::SnapResponse* p = snap_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.snap)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::SnapResponse*>(
      &::raft_cmdpb::_SnapResponse_default_instance_);
}
inline ::raft_cmdpb::SnapResponse* Response::release_snap() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Response.snap)
  
  ::raft_cmdpb::SnapResponse* temp = snap_;
  snap_ = NULL;
  return temp;
}
inline ::raft_cmdpb::SnapResponse* Response::mutable_snap() {
  
  if (snap_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::SnapResponse>(GetArenaNoVirtual());
    snap_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.snap)
  return snap_;
}
inline void Response::set_allocated_snap(::raft_cmdpb::SnapResponse* snap) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete snap_;
  }
  if (snap) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      snap = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, snap, submessage_arena);
    }
    
  } else {
    
  }
  snap_ = snap;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.snap)
}

// .raft_cmdpb.PrewriteResponse prewrite = 7;
inline bool Response::has_prewrite() const {
  return this != internal_default_instance() && prewrite_ != NULL;
}
inline void Response::clear_prewrite() {
  if (GetArenaNoVirtual() == NULL && prewrite_ != NULL) {
    delete prewrite_;
  }
  prewrite_ = NULL;
}
inline const ::raft_cmdpb::PrewriteResponse& Response::_internal_prewrite() const {
  return *prewrite_;
}
inline const ::raft_cmdpb::PrewriteResponse& Response::prewrite() const {
  const ::raft_cmdpb::PrewriteResponse* p = prewrite_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.prewrite)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::PrewriteResponse*>(
      &::raft_cmdpb::_PrewriteResponse_default_instance_);
}
inline ::raft_cmdpb::PrewriteResponse* Response::release_prewrite() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Response.prewrite)
  
  ::raft_cmdpb::PrewriteResponse* temp = prewrite_;
  prewrite_ = NULL;
  return temp;
}
inline ::raft_cmdpb::PrewriteResponse* Response::mutable_prewrite() {
  
  if (prewrite_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::PrewriteResponse>(GetArenaNoVirtual());
    prewrite_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.prewrite)
  return prewrite_;
}
inline void Response::set_allocated_prewrite(::raft_cmdpb::PrewriteResponse* prewrite) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prewrite_;
  }
  if (prewrite) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prewrite = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prewrite, submessage_arena);
    }
    
  } else {
    
  }
  prewrite_ = prewrite;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.prewrite)
}

// .raft_cmdpb.DeleteRangeResponse delte_range = 8;
inline bool Response::has_delte_range() const {
  return this != internal_default_instance() && delte_range_ != NULL;
}
inline void Response::clear_delte_range() {
  if (GetArenaNoVirtual() == NULL && delte_range_ != NULL) {
    delete delte_range_;
  }
  delte_range_ = NULL;
}
inline const ::raft_cmdpb::DeleteRangeResponse& Response::_internal_delte_range() const {
  return *delte_range_;
}
inline const ::raft_cmdpb::DeleteRangeResponse& Response::delte_range() const {
  const ::raft_cmdpb::DeleteRangeResponse* p = delte_range_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.delte_range)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::DeleteRangeResponse*>(
      &::raft_cmdpb::_DeleteRangeResponse_default_instance_);
}
inline ::raft_cmdpb::DeleteRangeResponse* Response::release_delte_range() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Response.delte_range)
  
  ::raft_cmdpb::DeleteRangeResponse* temp = delte_range_;
  delte_range_ = NULL;
  return temp;
}
inline ::raft_cmdpb::DeleteRangeResponse* Response::mutable_delte_range() {
  
  if (delte_range_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::DeleteRangeResponse>(GetArenaNoVirtual());
    delte_range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.delte_range)
  return delte_range_;
}
inline void Response::set_allocated_delte_range(::raft_cmdpb::DeleteRangeResponse* delte_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete delte_range_;
  }
  if (delte_range) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      delte_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, delte_range, submessage_arena);
    }
    
  } else {
    
  }
  delte_range_ = delte_range;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.delte_range)
}

// .raft_cmdpb.IngestSSTResponse ingest_sst = 9;
inline bool Response::has_ingest_sst() const {
  return this != internal_default_instance() && ingest_sst_ != NULL;
}
inline void Response::clear_ingest_sst() {
  if (GetArenaNoVirtual() == NULL && ingest_sst_ != NULL) {
    delete ingest_sst_;
  }
  ingest_sst_ = NULL;
}
inline const ::raft_cmdpb::IngestSSTResponse& Response::_internal_ingest_sst() const {
  return *ingest_sst_;
}
inline const ::raft_cmdpb::IngestSSTResponse& Response::ingest_sst() const {
  const ::raft_cmdpb::IngestSSTResponse* p = ingest_sst_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.ingest_sst)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::IngestSSTResponse*>(
      &::raft_cmdpb::_IngestSSTResponse_default_instance_);
}
inline ::raft_cmdpb::IngestSSTResponse* Response::release_ingest_sst() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Response.ingest_sst)
  
  ::raft_cmdpb::IngestSSTResponse* temp = ingest_sst_;
  ingest_sst_ = NULL;
  return temp;
}
inline ::raft_cmdpb::IngestSSTResponse* Response::mutable_ingest_sst() {
  
  if (ingest_sst_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::IngestSSTResponse>(GetArenaNoVirtual());
    ingest_sst_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.ingest_sst)
  return ingest_sst_;
}
inline void Response::set_allocated_ingest_sst(::raft_cmdpb::IngestSSTResponse* ingest_sst) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ingest_sst_;
  }
  if (ingest_sst) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ingest_sst = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ingest_sst, submessage_arena);
    }
    
  } else {
    
  }
  ingest_sst_ = ingest_sst;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.ingest_sst)
}

// -------------------------------------------------------------------

// ChangePeerRequest

// .eraftpb.ConfChangeType change_type = 1;
inline void ChangePeerRequest::clear_change_type() {
  change_type_ = 0;
}
inline ::eraftpb::ConfChangeType ChangePeerRequest::change_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.ChangePeerRequest.change_type)
  return static_cast< ::eraftpb::ConfChangeType >(change_type_);
}
inline void ChangePeerRequest::set_change_type(::eraftpb::ConfChangeType value) {
  
  change_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.ChangePeerRequest.change_type)
}

// .metapb.Peer peer = 2;
inline bool ChangePeerRequest::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline const ::metapb::Peer& ChangePeerRequest::_internal_peer() const {
  return *peer_;
}
inline const ::metapb::Peer& ChangePeerRequest::peer() const {
  const ::metapb::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.ChangePeerRequest.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Peer*>(
      &::metapb::_Peer_default_instance_);
}
inline ::metapb::Peer* ChangePeerRequest::release_peer() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.ChangePeerRequest.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline ::metapb::Peer* ChangePeerRequest::mutable_peer() {
  
  if (peer_ == NULL) {
    auto* p = CreateMaybeMessage<::metapb::Peer>(GetArenaNoVirtual());
    peer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.ChangePeerRequest.peer)
  return peer_;
}
inline void ChangePeerRequest::set_allocated_peer(::metapb::Peer* peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(peer_);
  }
  if (peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.ChangePeerRequest.peer)
}

// -------------------------------------------------------------------

// ChangePeerResponse

// .metapb.Region region = 1;
inline bool ChangePeerResponse::has_region() const {
  return this != internal_default_instance() && region_ != NULL;
}
inline const ::metapb::Region& ChangePeerResponse::_internal_region() const {
  return *region_;
}
inline const ::metapb::Region& ChangePeerResponse::region() const {
  const ::metapb::Region* p = region_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.ChangePeerResponse.region)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Region*>(
      &::metapb::_Region_default_instance_);
}
inline ::metapb::Region* ChangePeerResponse::release_region() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.ChangePeerResponse.region)
  
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
inline ::metapb::Region* ChangePeerResponse::mutable_region() {
  
  if (region_ == NULL) {
    auto* p = CreateMaybeMessage<::metapb::Region>(GetArenaNoVirtual());
    region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.ChangePeerResponse.region)
  return region_;
}
inline void ChangePeerResponse::set_allocated_region(::metapb::Region* region) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(region_);
  }
  if (region) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      region = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    
  } else {
    
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.ChangePeerResponse.region)
}

// -------------------------------------------------------------------

// SplitRequest

// bytes split_key = 1;
inline void SplitRequest::clear_split_key() {
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SplitRequest::split_key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitRequest.split_key)
  return split_key_.GetNoArena();
}
inline void SplitRequest::set_split_key(const ::std::string& value) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.SplitRequest.split_key)
}
#if LANG_CXX11
inline void SplitRequest::set_split_key(::std::string&& value) {
  
  split_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.SplitRequest.split_key)
}
#endif
inline void SplitRequest::set_split_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.SplitRequest.split_key)
}
inline void SplitRequest::set_split_key(const void* value, size_t size) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.SplitRequest.split_key)
}
inline ::std::string* SplitRequest::mutable_split_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SplitRequest.split_key)
  return split_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SplitRequest::release_split_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.SplitRequest.split_key)
  
  return split_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SplitRequest::set_allocated_split_key(::std::string* split_key) {
  if (split_key != NULL) {
    
  } else {
    
  }
  split_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), split_key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SplitRequest.split_key)
}

// uint64 new_region_id = 2;
inline void SplitRequest::clear_new_region_id() {
  new_region_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SplitRequest::new_region_id() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitRequest.new_region_id)
  return new_region_id_;
}
inline void SplitRequest::set_new_region_id(::google::protobuf::uint64 value) {
  
  new_region_id_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.SplitRequest.new_region_id)
}

// repeated uint64 new_peer_ids = 3;
inline int SplitRequest::new_peer_ids_size() const {
  return new_peer_ids_.size();
}
inline void SplitRequest::clear_new_peer_ids() {
  new_peer_ids_.Clear();
}
inline ::google::protobuf::uint64 SplitRequest::new_peer_ids(int index) const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitRequest.new_peer_ids)
  return new_peer_ids_.Get(index);
}
inline void SplitRequest::set_new_peer_ids(int index, ::google::protobuf::uint64 value) {
  new_peer_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.SplitRequest.new_peer_ids)
}
inline void SplitRequest::add_new_peer_ids(::google::protobuf::uint64 value) {
  new_peer_ids_.Add(value);
  // @@protoc_insertion_point(field_add:raft_cmdpb.SplitRequest.new_peer_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SplitRequest::new_peer_ids() const {
  // @@protoc_insertion_point(field_list:raft_cmdpb.SplitRequest.new_peer_ids)
  return new_peer_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SplitRequest::mutable_new_peer_ids() {
  // @@protoc_insertion_point(field_mutable_list:raft_cmdpb.SplitRequest.new_peer_ids)
  return &new_peer_ids_;
}

// bool right_derive = 4;
inline void SplitRequest::clear_right_derive() {
  right_derive_ = false;
}
inline bool SplitRequest::right_derive() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitRequest.right_derive)
  return right_derive_;
}
inline void SplitRequest::set_right_derive(bool value) {
  
  right_derive_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.SplitRequest.right_derive)
}

// -------------------------------------------------------------------

// SplitResponse

// .metapb.Region left = 1;
inline bool SplitResponse::has_left() const {
  return this != internal_default_instance() && left_ != NULL;
}
inline const ::metapb::Region& SplitResponse::_internal_left() const {
  return *left_;
}
inline const ::metapb::Region& SplitResponse::left() const {
  const ::metapb::Region* p = left_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitResponse.left)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Region*>(
      &::metapb::_Region_default_instance_);
}
inline ::metapb::Region* SplitResponse::release_left() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.SplitResponse.left)
  
  ::metapb::Region* temp = left_;
  left_ = NULL;
  return temp;
}
inline ::metapb::Region* SplitResponse::mutable_left() {
  
  if (left_ == NULL) {
    auto* p = CreateMaybeMessage<::metapb::Region>(GetArenaNoVirtual());
    left_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SplitResponse.left)
  return left_;
}
inline void SplitResponse::set_allocated_left(::metapb::Region* left) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(left_);
  }
  if (left) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      left = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, left, submessage_arena);
    }
    
  } else {
    
  }
  left_ = left;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SplitResponse.left)
}

// .metapb.Region right = 2;
inline bool SplitResponse::has_right() const {
  return this != internal_default_instance() && right_ != NULL;
}
inline const ::metapb::Region& SplitResponse::_internal_right() const {
  return *right_;
}
inline const ::metapb::Region& SplitResponse::right() const {
  const ::metapb::Region* p = right_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitResponse.right)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Region*>(
      &::metapb::_Region_default_instance_);
}
inline ::metapb::Region* SplitResponse::release_right() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.SplitResponse.right)
  
  ::metapb::Region* temp = right_;
  right_ = NULL;
  return temp;
}
inline ::metapb::Region* SplitResponse::mutable_right() {
  
  if (right_ == NULL) {
    auto* p = CreateMaybeMessage<::metapb::Region>(GetArenaNoVirtual());
    right_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SplitResponse.right)
  return right_;
}
inline void SplitResponse::set_allocated_right(::metapb::Region* right) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(right_);
  }
  if (right) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      right = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    
  } else {
    
  }
  right_ = right;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SplitResponse.right)
}

// -------------------------------------------------------------------

// CompactLogRequest

// uint64 compact_index = 1;
inline void CompactLogRequest::clear_compact_index() {
  compact_index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CompactLogRequest::compact_index() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.CompactLogRequest.compact_index)
  return compact_index_;
}
inline void CompactLogRequest::set_compact_index(::google::protobuf::uint64 value) {
  
  compact_index_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.CompactLogRequest.compact_index)
}

// uint64 compact_term = 2;
inline void CompactLogRequest::clear_compact_term() {
  compact_term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CompactLogRequest::compact_term() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.CompactLogRequest.compact_term)
  return compact_term_;
}
inline void CompactLogRequest::set_compact_term(::google::protobuf::uint64 value) {
  
  compact_term_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.CompactLogRequest.compact_term)
}

// -------------------------------------------------------------------

// CompactLogResponse

// -------------------------------------------------------------------

// TransferLeaderRequest

// .metapb.Peer peer = 1;
inline bool TransferLeaderRequest::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline const ::metapb::Peer& TransferLeaderRequest::_internal_peer() const {
  return *peer_;
}
inline const ::metapb::Peer& TransferLeaderRequest::peer() const {
  const ::metapb::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.TransferLeaderRequest.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Peer*>(
      &::metapb::_Peer_default_instance_);
}
inline ::metapb::Peer* TransferLeaderRequest::release_peer() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.TransferLeaderRequest.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline ::metapb::Peer* TransferLeaderRequest::mutable_peer() {
  
  if (peer_ == NULL) {
    auto* p = CreateMaybeMessage<::metapb::Peer>(GetArenaNoVirtual());
    peer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.TransferLeaderRequest.peer)
  return peer_;
}
inline void TransferLeaderRequest::set_allocated_peer(::metapb::Peer* peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(peer_);
  }
  if (peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.TransferLeaderRequest.peer)
}

// -------------------------------------------------------------------

// TransferLeaderResponse

// -------------------------------------------------------------------

// VerifyHashRequest

// uint64 index = 1;
inline void VerifyHashRequest::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 VerifyHashRequest::index() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.VerifyHashRequest.index)
  return index_;
}
inline void VerifyHashRequest::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.VerifyHashRequest.index)
}

// bytes hash = 2;
inline void VerifyHashRequest::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VerifyHashRequest::hash() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.VerifyHashRequest.hash)
  return hash_.GetNoArena();
}
inline void VerifyHashRequest::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.VerifyHashRequest.hash)
}
#if LANG_CXX11
inline void VerifyHashRequest::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.VerifyHashRequest.hash)
}
#endif
inline void VerifyHashRequest::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.VerifyHashRequest.hash)
}
inline void VerifyHashRequest::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.VerifyHashRequest.hash)
}
inline ::std::string* VerifyHashRequest::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.VerifyHashRequest.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyHashRequest::release_hash() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.VerifyHashRequest.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyHashRequest::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.VerifyHashRequest.hash)
}

// -------------------------------------------------------------------

// VerifyHashResponse

// -------------------------------------------------------------------

// PrepareMergeRequest

// uint64 min_index = 1;
inline void PrepareMergeRequest::clear_min_index() {
  min_index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PrepareMergeRequest::min_index() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.PrepareMergeRequest.min_index)
  return min_index_;
}
inline void PrepareMergeRequest::set_min_index(::google::protobuf::uint64 value) {
  
  min_index_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.PrepareMergeRequest.min_index)
}

// .metapb.Region target = 2;
inline bool PrepareMergeRequest::has_target() const {
  return this != internal_default_instance() && target_ != NULL;
}
inline const ::metapb::Region& PrepareMergeRequest::_internal_target() const {
  return *target_;
}
inline const ::metapb::Region& PrepareMergeRequest::target() const {
  const ::metapb::Region* p = target_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.PrepareMergeRequest.target)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Region*>(
      &::metapb::_Region_default_instance_);
}
inline ::metapb::Region* PrepareMergeRequest::release_target() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.PrepareMergeRequest.target)
  
  ::metapb::Region* temp = target_;
  target_ = NULL;
  return temp;
}
inline ::metapb::Region* PrepareMergeRequest::mutable_target() {
  
  if (target_ == NULL) {
    auto* p = CreateMaybeMessage<::metapb::Region>(GetArenaNoVirtual());
    target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.PrepareMergeRequest.target)
  return target_;
}
inline void PrepareMergeRequest::set_allocated_target(::metapb::Region* target) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(target_);
  }
  if (target) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      target = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.PrepareMergeRequest.target)
}

// -------------------------------------------------------------------

// PrepareMergeResponse

// -------------------------------------------------------------------

// CommitMergeRequest

// .metapb.Region source = 1;
inline bool CommitMergeRequest::has_source() const {
  return this != internal_default_instance() && source_ != NULL;
}
inline const ::metapb::Region& CommitMergeRequest::_internal_source() const {
  return *source_;
}
inline const ::metapb::Region& CommitMergeRequest::source() const {
  const ::metapb::Region* p = source_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.CommitMergeRequest.source)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Region*>(
      &::metapb::_Region_default_instance_);
}
inline ::metapb::Region* CommitMergeRequest::release_source() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.CommitMergeRequest.source)
  
  ::metapb::Region* temp = source_;
  source_ = NULL;
  return temp;
}
inline ::metapb::Region* CommitMergeRequest::mutable_source() {
  
  if (source_ == NULL) {
    auto* p = CreateMaybeMessage<::metapb::Region>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.CommitMergeRequest.source)
  return source_;
}
inline void CommitMergeRequest::set_allocated_source(::metapb::Region* source) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(source_);
  }
  if (source) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.CommitMergeRequest.source)
}

// uint64 commit = 2;
inline void CommitMergeRequest::clear_commit() {
  commit_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CommitMergeRequest::commit() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.CommitMergeRequest.commit)
  return commit_;
}
inline void CommitMergeRequest::set_commit(::google::protobuf::uint64 value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.CommitMergeRequest.commit)
}

// repeated .eraftpb.Entry entries = 3;
inline int CommitMergeRequest::entries_size() const {
  return entries_.size();
}
inline ::eraftpb::Entry* CommitMergeRequest::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.CommitMergeRequest.entries)
  return entries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::eraftpb::Entry >*
CommitMergeRequest::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:raft_cmdpb.CommitMergeRequest.entries)
  return &entries_;
}
inline const ::eraftpb::Entry& CommitMergeRequest::entries(int index) const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.CommitMergeRequest.entries)
  return entries_.Get(index);
}
inline ::eraftpb::Entry* CommitMergeRequest::add_entries() {
  // @@protoc_insertion_point(field_add:raft_cmdpb.CommitMergeRequest.entries)
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::eraftpb::Entry >&
CommitMergeRequest::entries() const {
  // @@protoc_insertion_point(field_list:raft_cmdpb.CommitMergeRequest.entries)
  return entries_;
}

// -------------------------------------------------------------------

// CommitMergeResponse

// -------------------------------------------------------------------

// RollbackMergeRequest

// uint64 commit = 1;
inline void RollbackMergeRequest::clear_commit() {
  commit_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RollbackMergeRequest::commit() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RollbackMergeRequest.commit)
  return commit_;
}
inline void RollbackMergeRequest::set_commit(::google::protobuf::uint64 value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.RollbackMergeRequest.commit)
}

// -------------------------------------------------------------------

// RollbackMergeResponse

// -------------------------------------------------------------------

// AdminRequest

// .raft_cmdpb.AdminCmdType cmd_type = 1;
inline void AdminRequest::clear_cmd_type() {
  cmd_type_ = 0;
}
inline ::raft_cmdpb::AdminCmdType AdminRequest::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.cmd_type)
  return static_cast< ::raft_cmdpb::AdminCmdType >(cmd_type_);
}
inline void AdminRequest::set_cmd_type(::raft_cmdpb::AdminCmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.AdminRequest.cmd_type)
}

// .raft_cmdpb.ChangePeerRequest change_peer = 2;
inline bool AdminRequest::has_change_peer() const {
  return this != internal_default_instance() && change_peer_ != NULL;
}
inline void AdminRequest::clear_change_peer() {
  if (GetArenaNoVirtual() == NULL && change_peer_ != NULL) {
    delete change_peer_;
  }
  change_peer_ = NULL;
}
inline const ::raft_cmdpb::ChangePeerRequest& AdminRequest::_internal_change_peer() const {
  return *change_peer_;
}
inline const ::raft_cmdpb::ChangePeerRequest& AdminRequest::change_peer() const {
  const ::raft_cmdpb::ChangePeerRequest* p = change_peer_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.change_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::ChangePeerRequest*>(
      &::raft_cmdpb::_ChangePeerRequest_default_instance_);
}
inline ::raft_cmdpb::ChangePeerRequest* AdminRequest::release_change_peer() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminRequest.change_peer)
  
  ::raft_cmdpb::ChangePeerRequest* temp = change_peer_;
  change_peer_ = NULL;
  return temp;
}
inline ::raft_cmdpb::ChangePeerRequest* AdminRequest::mutable_change_peer() {
  
  if (change_peer_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::ChangePeerRequest>(GetArenaNoVirtual());
    change_peer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.change_peer)
  return change_peer_;
}
inline void AdminRequest::set_allocated_change_peer(::raft_cmdpb::ChangePeerRequest* change_peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete change_peer_;
  }
  if (change_peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      change_peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, change_peer, submessage_arena);
    }
    
  } else {
    
  }
  change_peer_ = change_peer;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.change_peer)
}

// .raft_cmdpb.SplitRequest split = 3;
inline bool AdminRequest::has_split() const {
  return this != internal_default_instance() && split_ != NULL;
}
inline void AdminRequest::clear_split() {
  if (GetArenaNoVirtual() == NULL && split_ != NULL) {
    delete split_;
  }
  split_ = NULL;
}
inline const ::raft_cmdpb::SplitRequest& AdminRequest::_internal_split() const {
  return *split_;
}
inline const ::raft_cmdpb::SplitRequest& AdminRequest::split() const {
  const ::raft_cmdpb::SplitRequest* p = split_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.split)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::SplitRequest*>(
      &::raft_cmdpb::_SplitRequest_default_instance_);
}
inline ::raft_cmdpb::SplitRequest* AdminRequest::release_split() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminRequest.split)
  
  ::raft_cmdpb::SplitRequest* temp = split_;
  split_ = NULL;
  return temp;
}
inline ::raft_cmdpb::SplitRequest* AdminRequest::mutable_split() {
  
  if (split_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::SplitRequest>(GetArenaNoVirtual());
    split_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.split)
  return split_;
}
inline void AdminRequest::set_allocated_split(::raft_cmdpb::SplitRequest* split) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete split_;
  }
  if (split) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      split = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, split, submessage_arena);
    }
    
  } else {
    
  }
  split_ = split;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.split)
}

// .raft_cmdpb.CompactLogRequest compact_log = 4;
inline bool AdminRequest::has_compact_log() const {
  return this != internal_default_instance() && compact_log_ != NULL;
}
inline void AdminRequest::clear_compact_log() {
  if (GetArenaNoVirtual() == NULL && compact_log_ != NULL) {
    delete compact_log_;
  }
  compact_log_ = NULL;
}
inline const ::raft_cmdpb::CompactLogRequest& AdminRequest::_internal_compact_log() const {
  return *compact_log_;
}
inline const ::raft_cmdpb::CompactLogRequest& AdminRequest::compact_log() const {
  const ::raft_cmdpb::CompactLogRequest* p = compact_log_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.compact_log)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::CompactLogRequest*>(
      &::raft_cmdpb::_CompactLogRequest_default_instance_);
}
inline ::raft_cmdpb::CompactLogRequest* AdminRequest::release_compact_log() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminRequest.compact_log)
  
  ::raft_cmdpb::CompactLogRequest* temp = compact_log_;
  compact_log_ = NULL;
  return temp;
}
inline ::raft_cmdpb::CompactLogRequest* AdminRequest::mutable_compact_log() {
  
  if (compact_log_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::CompactLogRequest>(GetArenaNoVirtual());
    compact_log_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.compact_log)
  return compact_log_;
}
inline void AdminRequest::set_allocated_compact_log(::raft_cmdpb::CompactLogRequest* compact_log) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete compact_log_;
  }
  if (compact_log) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      compact_log = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, compact_log, submessage_arena);
    }
    
  } else {
    
  }
  compact_log_ = compact_log;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.compact_log)
}

// .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
inline bool AdminRequest::has_transfer_leader() const {
  return this != internal_default_instance() && transfer_leader_ != NULL;
}
inline void AdminRequest::clear_transfer_leader() {
  if (GetArenaNoVirtual() == NULL && transfer_leader_ != NULL) {
    delete transfer_leader_;
  }
  transfer_leader_ = NULL;
}
inline const ::raft_cmdpb::TransferLeaderRequest& AdminRequest::_internal_transfer_leader() const {
  return *transfer_leader_;
}
inline const ::raft_cmdpb::TransferLeaderRequest& AdminRequest::transfer_leader() const {
  const ::raft_cmdpb::TransferLeaderRequest* p = transfer_leader_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.transfer_leader)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::TransferLeaderRequest*>(
      &::raft_cmdpb::_TransferLeaderRequest_default_instance_);
}
inline ::raft_cmdpb::TransferLeaderRequest* AdminRequest::release_transfer_leader() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminRequest.transfer_leader)
  
  ::raft_cmdpb::TransferLeaderRequest* temp = transfer_leader_;
  transfer_leader_ = NULL;
  return temp;
}
inline ::raft_cmdpb::TransferLeaderRequest* AdminRequest::mutable_transfer_leader() {
  
  if (transfer_leader_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::TransferLeaderRequest>(GetArenaNoVirtual());
    transfer_leader_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.transfer_leader)
  return transfer_leader_;
}
inline void AdminRequest::set_allocated_transfer_leader(::raft_cmdpb::TransferLeaderRequest* transfer_leader) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transfer_leader_;
  }
  if (transfer_leader) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transfer_leader = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transfer_leader, submessage_arena);
    }
    
  } else {
    
  }
  transfer_leader_ = transfer_leader;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.transfer_leader)
}

// .raft_cmdpb.VerifyHashRequest verify_hash = 6;
inline bool AdminRequest::has_verify_hash() const {
  return this != internal_default_instance() && verify_hash_ != NULL;
}
inline void AdminRequest::clear_verify_hash() {
  if (GetArenaNoVirtual() == NULL && verify_hash_ != NULL) {
    delete verify_hash_;
  }
  verify_hash_ = NULL;
}
inline const ::raft_cmdpb::VerifyHashRequest& AdminRequest::_internal_verify_hash() const {
  return *verify_hash_;
}
inline const ::raft_cmdpb::VerifyHashRequest& AdminRequest::verify_hash() const {
  const ::raft_cmdpb::VerifyHashRequest* p = verify_hash_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.verify_hash)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::VerifyHashRequest*>(
      &::raft_cmdpb::_VerifyHashRequest_default_instance_);
}
inline ::raft_cmdpb::VerifyHashRequest* AdminRequest::release_verify_hash() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminRequest.verify_hash)
  
  ::raft_cmdpb::VerifyHashRequest* temp = verify_hash_;
  verify_hash_ = NULL;
  return temp;
}
inline ::raft_cmdpb::VerifyHashRequest* AdminRequest::mutable_verify_hash() {
  
  if (verify_hash_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::VerifyHashRequest>(GetArenaNoVirtual());
    verify_hash_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.verify_hash)
  return verify_hash_;
}
inline void AdminRequest::set_allocated_verify_hash(::raft_cmdpb::VerifyHashRequest* verify_hash) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete verify_hash_;
  }
  if (verify_hash) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      verify_hash = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, verify_hash, submessage_arena);
    }
    
  } else {
    
  }
  verify_hash_ = verify_hash;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.verify_hash)
}

// .raft_cmdpb.PrepareMergeRequest prepare_merge = 7;
inline bool AdminRequest::has_prepare_merge() const {
  return this != internal_default_instance() && prepare_merge_ != NULL;
}
inline void AdminRequest::clear_prepare_merge() {
  if (GetArenaNoVirtual() == NULL && prepare_merge_ != NULL) {
    delete prepare_merge_;
  }
  prepare_merge_ = NULL;
}
inline const ::raft_cmdpb::PrepareMergeRequest& AdminRequest::_internal_prepare_merge() const {
  return *prepare_merge_;
}
inline const ::raft_cmdpb::PrepareMergeRequest& AdminRequest::prepare_merge() const {
  const ::raft_cmdpb::PrepareMergeRequest* p = prepare_merge_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.prepare_merge)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::PrepareMergeRequest*>(
      &::raft_cmdpb::_PrepareMergeRequest_default_instance_);
}
inline ::raft_cmdpb::PrepareMergeRequest* AdminRequest::release_prepare_merge() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminRequest.prepare_merge)
  
  ::raft_cmdpb::PrepareMergeRequest* temp = prepare_merge_;
  prepare_merge_ = NULL;
  return temp;
}
inline ::raft_cmdpb::PrepareMergeRequest* AdminRequest::mutable_prepare_merge() {
  
  if (prepare_merge_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::PrepareMergeRequest>(GetArenaNoVirtual());
    prepare_merge_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.prepare_merge)
  return prepare_merge_;
}
inline void AdminRequest::set_allocated_prepare_merge(::raft_cmdpb::PrepareMergeRequest* prepare_merge) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prepare_merge_;
  }
  if (prepare_merge) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prepare_merge = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prepare_merge, submessage_arena);
    }
    
  } else {
    
  }
  prepare_merge_ = prepare_merge;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.prepare_merge)
}

// .raft_cmdpb.CommitMergeRequest commit_merge = 8;
inline bool AdminRequest::has_commit_merge() const {
  return this != internal_default_instance() && commit_merge_ != NULL;
}
inline void AdminRequest::clear_commit_merge() {
  if (GetArenaNoVirtual() == NULL && commit_merge_ != NULL) {
    delete commit_merge_;
  }
  commit_merge_ = NULL;
}
inline const ::raft_cmdpb::CommitMergeRequest& AdminRequest::_internal_commit_merge() const {
  return *commit_merge_;
}
inline const ::raft_cmdpb::CommitMergeRequest& AdminRequest::commit_merge() const {
  const ::raft_cmdpb::CommitMergeRequest* p = commit_merge_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.commit_merge)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::CommitMergeRequest*>(
      &::raft_cmdpb::_CommitMergeRequest_default_instance_);
}
inline ::raft_cmdpb::CommitMergeRequest* AdminRequest::release_commit_merge() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminRequest.commit_merge)
  
  ::raft_cmdpb::CommitMergeRequest* temp = commit_merge_;
  commit_merge_ = NULL;
  return temp;
}
inline ::raft_cmdpb::CommitMergeRequest* AdminRequest::mutable_commit_merge() {
  
  if (commit_merge_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::CommitMergeRequest>(GetArenaNoVirtual());
    commit_merge_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.commit_merge)
  return commit_merge_;
}
inline void AdminRequest::set_allocated_commit_merge(::raft_cmdpb::CommitMergeRequest* commit_merge) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commit_merge_;
  }
  if (commit_merge) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      commit_merge = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, commit_merge, submessage_arena);
    }
    
  } else {
    
  }
  commit_merge_ = commit_merge;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.commit_merge)
}

// .raft_cmdpb.RollbackMergeRequest rollback_merge = 9;
inline bool AdminRequest::has_rollback_merge() const {
  return this != internal_default_instance() && rollback_merge_ != NULL;
}
inline void AdminRequest::clear_rollback_merge() {
  if (GetArenaNoVirtual() == NULL && rollback_merge_ != NULL) {
    delete rollback_merge_;
  }
  rollback_merge_ = NULL;
}
inline const ::raft_cmdpb::RollbackMergeRequest& AdminRequest::_internal_rollback_merge() const {
  return *rollback_merge_;
}
inline const ::raft_cmdpb::RollbackMergeRequest& AdminRequest::rollback_merge() const {
  const ::raft_cmdpb::RollbackMergeRequest* p = rollback_merge_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.rollback_merge)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::RollbackMergeRequest*>(
      &::raft_cmdpb::_RollbackMergeRequest_default_instance_);
}
inline ::raft_cmdpb::RollbackMergeRequest* AdminRequest::release_rollback_merge() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminRequest.rollback_merge)
  
  ::raft_cmdpb::RollbackMergeRequest* temp = rollback_merge_;
  rollback_merge_ = NULL;
  return temp;
}
inline ::raft_cmdpb::RollbackMergeRequest* AdminRequest::mutable_rollback_merge() {
  
  if (rollback_merge_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::RollbackMergeRequest>(GetArenaNoVirtual());
    rollback_merge_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.rollback_merge)
  return rollback_merge_;
}
inline void AdminRequest::set_allocated_rollback_merge(::raft_cmdpb::RollbackMergeRequest* rollback_merge) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rollback_merge_;
  }
  if (rollback_merge) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rollback_merge = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rollback_merge, submessage_arena);
    }
    
  } else {
    
  }
  rollback_merge_ = rollback_merge;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.rollback_merge)
}

// -------------------------------------------------------------------

// AdminResponse

// .raft_cmdpb.AdminCmdType cmd_type = 1;
inline void AdminResponse::clear_cmd_type() {
  cmd_type_ = 0;
}
inline ::raft_cmdpb::AdminCmdType AdminResponse::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.cmd_type)
  return static_cast< ::raft_cmdpb::AdminCmdType >(cmd_type_);
}
inline void AdminResponse::set_cmd_type(::raft_cmdpb::AdminCmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.AdminResponse.cmd_type)
}

// .raft_cmdpb.ChangePeerResponse change_peer = 2;
inline bool AdminResponse::has_change_peer() const {
  return this != internal_default_instance() && change_peer_ != NULL;
}
inline void AdminResponse::clear_change_peer() {
  if (GetArenaNoVirtual() == NULL && change_peer_ != NULL) {
    delete change_peer_;
  }
  change_peer_ = NULL;
}
inline const ::raft_cmdpb::ChangePeerResponse& AdminResponse::_internal_change_peer() const {
  return *change_peer_;
}
inline const ::raft_cmdpb::ChangePeerResponse& AdminResponse::change_peer() const {
  const ::raft_cmdpb::ChangePeerResponse* p = change_peer_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.change_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::ChangePeerResponse*>(
      &::raft_cmdpb::_ChangePeerResponse_default_instance_);
}
inline ::raft_cmdpb::ChangePeerResponse* AdminResponse::release_change_peer() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminResponse.change_peer)
  
  ::raft_cmdpb::ChangePeerResponse* temp = change_peer_;
  change_peer_ = NULL;
  return temp;
}
inline ::raft_cmdpb::ChangePeerResponse* AdminResponse::mutable_change_peer() {
  
  if (change_peer_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::ChangePeerResponse>(GetArenaNoVirtual());
    change_peer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.change_peer)
  return change_peer_;
}
inline void AdminResponse::set_allocated_change_peer(::raft_cmdpb::ChangePeerResponse* change_peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete change_peer_;
  }
  if (change_peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      change_peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, change_peer, submessage_arena);
    }
    
  } else {
    
  }
  change_peer_ = change_peer;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.change_peer)
}

// .raft_cmdpb.SplitResponse split = 3;
inline bool AdminResponse::has_split() const {
  return this != internal_default_instance() && split_ != NULL;
}
inline void AdminResponse::clear_split() {
  if (GetArenaNoVirtual() == NULL && split_ != NULL) {
    delete split_;
  }
  split_ = NULL;
}
inline const ::raft_cmdpb::SplitResponse& AdminResponse::_internal_split() const {
  return *split_;
}
inline const ::raft_cmdpb::SplitResponse& AdminResponse::split() const {
  const ::raft_cmdpb::SplitResponse* p = split_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.split)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::SplitResponse*>(
      &::raft_cmdpb::_SplitResponse_default_instance_);
}
inline ::raft_cmdpb::SplitResponse* AdminResponse::release_split() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminResponse.split)
  
  ::raft_cmdpb::SplitResponse* temp = split_;
  split_ = NULL;
  return temp;
}
inline ::raft_cmdpb::SplitResponse* AdminResponse::mutable_split() {
  
  if (split_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::SplitResponse>(GetArenaNoVirtual());
    split_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.split)
  return split_;
}
inline void AdminResponse::set_allocated_split(::raft_cmdpb::SplitResponse* split) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete split_;
  }
  if (split) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      split = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, split, submessage_arena);
    }
    
  } else {
    
  }
  split_ = split;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.split)
}

// .raft_cmdpb.CompactLogResponse compact_log = 4;
inline bool AdminResponse::has_compact_log() const {
  return this != internal_default_instance() && compact_log_ != NULL;
}
inline void AdminResponse::clear_compact_log() {
  if (GetArenaNoVirtual() == NULL && compact_log_ != NULL) {
    delete compact_log_;
  }
  compact_log_ = NULL;
}
inline const ::raft_cmdpb::CompactLogResponse& AdminResponse::_internal_compact_log() const {
  return *compact_log_;
}
inline const ::raft_cmdpb::CompactLogResponse& AdminResponse::compact_log() const {
  const ::raft_cmdpb::CompactLogResponse* p = compact_log_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.compact_log)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::CompactLogResponse*>(
      &::raft_cmdpb::_CompactLogResponse_default_instance_);
}
inline ::raft_cmdpb::CompactLogResponse* AdminResponse::release_compact_log() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminResponse.compact_log)
  
  ::raft_cmdpb::CompactLogResponse* temp = compact_log_;
  compact_log_ = NULL;
  return temp;
}
inline ::raft_cmdpb::CompactLogResponse* AdminResponse::mutable_compact_log() {
  
  if (compact_log_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::CompactLogResponse>(GetArenaNoVirtual());
    compact_log_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.compact_log)
  return compact_log_;
}
inline void AdminResponse::set_allocated_compact_log(::raft_cmdpb::CompactLogResponse* compact_log) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete compact_log_;
  }
  if (compact_log) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      compact_log = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, compact_log, submessage_arena);
    }
    
  } else {
    
  }
  compact_log_ = compact_log;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.compact_log)
}

// .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
inline bool AdminResponse::has_transfer_leader() const {
  return this != internal_default_instance() && transfer_leader_ != NULL;
}
inline void AdminResponse::clear_transfer_leader() {
  if (GetArenaNoVirtual() == NULL && transfer_leader_ != NULL) {
    delete transfer_leader_;
  }
  transfer_leader_ = NULL;
}
inline const ::raft_cmdpb::TransferLeaderResponse& AdminResponse::_internal_transfer_leader() const {
  return *transfer_leader_;
}
inline const ::raft_cmdpb::TransferLeaderResponse& AdminResponse::transfer_leader() const {
  const ::raft_cmdpb::TransferLeaderResponse* p = transfer_leader_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.transfer_leader)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::TransferLeaderResponse*>(
      &::raft_cmdpb::_TransferLeaderResponse_default_instance_);
}
inline ::raft_cmdpb::TransferLeaderResponse* AdminResponse::release_transfer_leader() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminResponse.transfer_leader)
  
  ::raft_cmdpb::TransferLeaderResponse* temp = transfer_leader_;
  transfer_leader_ = NULL;
  return temp;
}
inline ::raft_cmdpb::TransferLeaderResponse* AdminResponse::mutable_transfer_leader() {
  
  if (transfer_leader_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::TransferLeaderResponse>(GetArenaNoVirtual());
    transfer_leader_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.transfer_leader)
  return transfer_leader_;
}
inline void AdminResponse::set_allocated_transfer_leader(::raft_cmdpb::TransferLeaderResponse* transfer_leader) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transfer_leader_;
  }
  if (transfer_leader) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transfer_leader = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transfer_leader, submessage_arena);
    }
    
  } else {
    
  }
  transfer_leader_ = transfer_leader;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.transfer_leader)
}

// .raft_cmdpb.VerifyHashResponse verify_hash = 6;
inline bool AdminResponse::has_verify_hash() const {
  return this != internal_default_instance() && verify_hash_ != NULL;
}
inline void AdminResponse::clear_verify_hash() {
  if (GetArenaNoVirtual() == NULL && verify_hash_ != NULL) {
    delete verify_hash_;
  }
  verify_hash_ = NULL;
}
inline const ::raft_cmdpb::VerifyHashResponse& AdminResponse::_internal_verify_hash() const {
  return *verify_hash_;
}
inline const ::raft_cmdpb::VerifyHashResponse& AdminResponse::verify_hash() const {
  const ::raft_cmdpb::VerifyHashResponse* p = verify_hash_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.verify_hash)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::VerifyHashResponse*>(
      &::raft_cmdpb::_VerifyHashResponse_default_instance_);
}
inline ::raft_cmdpb::VerifyHashResponse* AdminResponse::release_verify_hash() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminResponse.verify_hash)
  
  ::raft_cmdpb::VerifyHashResponse* temp = verify_hash_;
  verify_hash_ = NULL;
  return temp;
}
inline ::raft_cmdpb::VerifyHashResponse* AdminResponse::mutable_verify_hash() {
  
  if (verify_hash_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::VerifyHashResponse>(GetArenaNoVirtual());
    verify_hash_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.verify_hash)
  return verify_hash_;
}
inline void AdminResponse::set_allocated_verify_hash(::raft_cmdpb::VerifyHashResponse* verify_hash) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete verify_hash_;
  }
  if (verify_hash) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      verify_hash = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, verify_hash, submessage_arena);
    }
    
  } else {
    
  }
  verify_hash_ = verify_hash;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.verify_hash)
}

// .raft_cmdpb.PrepareMergeResponse prepare_merge = 7;
inline bool AdminResponse::has_prepare_merge() const {
  return this != internal_default_instance() && prepare_merge_ != NULL;
}
inline void AdminResponse::clear_prepare_merge() {
  if (GetArenaNoVirtual() == NULL && prepare_merge_ != NULL) {
    delete prepare_merge_;
  }
  prepare_merge_ = NULL;
}
inline const ::raft_cmdpb::PrepareMergeResponse& AdminResponse::_internal_prepare_merge() const {
  return *prepare_merge_;
}
inline const ::raft_cmdpb::PrepareMergeResponse& AdminResponse::prepare_merge() const {
  const ::raft_cmdpb::PrepareMergeResponse* p = prepare_merge_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.prepare_merge)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::PrepareMergeResponse*>(
      &::raft_cmdpb::_PrepareMergeResponse_default_instance_);
}
inline ::raft_cmdpb::PrepareMergeResponse* AdminResponse::release_prepare_merge() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminResponse.prepare_merge)
  
  ::raft_cmdpb::PrepareMergeResponse* temp = prepare_merge_;
  prepare_merge_ = NULL;
  return temp;
}
inline ::raft_cmdpb::PrepareMergeResponse* AdminResponse::mutable_prepare_merge() {
  
  if (prepare_merge_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::PrepareMergeResponse>(GetArenaNoVirtual());
    prepare_merge_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.prepare_merge)
  return prepare_merge_;
}
inline void AdminResponse::set_allocated_prepare_merge(::raft_cmdpb::PrepareMergeResponse* prepare_merge) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prepare_merge_;
  }
  if (prepare_merge) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prepare_merge = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prepare_merge, submessage_arena);
    }
    
  } else {
    
  }
  prepare_merge_ = prepare_merge;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.prepare_merge)
}

// .raft_cmdpb.CommitMergeResponse commit_merge = 8;
inline bool AdminResponse::has_commit_merge() const {
  return this != internal_default_instance() && commit_merge_ != NULL;
}
inline void AdminResponse::clear_commit_merge() {
  if (GetArenaNoVirtual() == NULL && commit_merge_ != NULL) {
    delete commit_merge_;
  }
  commit_merge_ = NULL;
}
inline const ::raft_cmdpb::CommitMergeResponse& AdminResponse::_internal_commit_merge() const {
  return *commit_merge_;
}
inline const ::raft_cmdpb::CommitMergeResponse& AdminResponse::commit_merge() const {
  const ::raft_cmdpb::CommitMergeResponse* p = commit_merge_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.commit_merge)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::CommitMergeResponse*>(
      &::raft_cmdpb::_CommitMergeResponse_default_instance_);
}
inline ::raft_cmdpb::CommitMergeResponse* AdminResponse::release_commit_merge() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminResponse.commit_merge)
  
  ::raft_cmdpb::CommitMergeResponse* temp = commit_merge_;
  commit_merge_ = NULL;
  return temp;
}
inline ::raft_cmdpb::CommitMergeResponse* AdminResponse::mutable_commit_merge() {
  
  if (commit_merge_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::CommitMergeResponse>(GetArenaNoVirtual());
    commit_merge_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.commit_merge)
  return commit_merge_;
}
inline void AdminResponse::set_allocated_commit_merge(::raft_cmdpb::CommitMergeResponse* commit_merge) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commit_merge_;
  }
  if (commit_merge) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      commit_merge = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, commit_merge, submessage_arena);
    }
    
  } else {
    
  }
  commit_merge_ = commit_merge;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.commit_merge)
}

// .raft_cmdpb.RollbackMergeResponse rollback_merge = 9;
inline bool AdminResponse::has_rollback_merge() const {
  return this != internal_default_instance() && rollback_merge_ != NULL;
}
inline void AdminResponse::clear_rollback_merge() {
  if (GetArenaNoVirtual() == NULL && rollback_merge_ != NULL) {
    delete rollback_merge_;
  }
  rollback_merge_ = NULL;
}
inline const ::raft_cmdpb::RollbackMergeResponse& AdminResponse::_internal_rollback_merge() const {
  return *rollback_merge_;
}
inline const ::raft_cmdpb::RollbackMergeResponse& AdminResponse::rollback_merge() const {
  const ::raft_cmdpb::RollbackMergeResponse* p = rollback_merge_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.rollback_merge)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::RollbackMergeResponse*>(
      &::raft_cmdpb::_RollbackMergeResponse_default_instance_);
}
inline ::raft_cmdpb::RollbackMergeResponse* AdminResponse::release_rollback_merge() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminResponse.rollback_merge)
  
  ::raft_cmdpb::RollbackMergeResponse* temp = rollback_merge_;
  rollback_merge_ = NULL;
  return temp;
}
inline ::raft_cmdpb::RollbackMergeResponse* AdminResponse::mutable_rollback_merge() {
  
  if (rollback_merge_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::RollbackMergeResponse>(GetArenaNoVirtual());
    rollback_merge_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.rollback_merge)
  return rollback_merge_;
}
inline void AdminResponse::set_allocated_rollback_merge(::raft_cmdpb::RollbackMergeResponse* rollback_merge) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rollback_merge_;
  }
  if (rollback_merge) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rollback_merge = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rollback_merge, submessage_arena);
    }
    
  } else {
    
  }
  rollback_merge_ = rollback_merge;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.rollback_merge)
}

// -------------------------------------------------------------------

// RegionLeaderRequest

// -------------------------------------------------------------------

// RegionLeaderResponse

// .metapb.Peer leader = 1;
inline bool RegionLeaderResponse::has_leader() const {
  return this != internal_default_instance() && leader_ != NULL;
}
inline const ::metapb::Peer& RegionLeaderResponse::_internal_leader() const {
  return *leader_;
}
inline const ::metapb::Peer& RegionLeaderResponse::leader() const {
  const ::metapb::Peer* p = leader_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.RegionLeaderResponse.leader)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Peer*>(
      &::metapb::_Peer_default_instance_);
}
inline ::metapb::Peer* RegionLeaderResponse::release_leader() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RegionLeaderResponse.leader)
  
  ::metapb::Peer* temp = leader_;
  leader_ = NULL;
  return temp;
}
inline ::metapb::Peer* RegionLeaderResponse::mutable_leader() {
  
  if (leader_ == NULL) {
    auto* p = CreateMaybeMessage<::metapb::Peer>(GetArenaNoVirtual());
    leader_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RegionLeaderResponse.leader)
  return leader_;
}
inline void RegionLeaderResponse::set_allocated_leader(::metapb::Peer* leader) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(leader_);
  }
  if (leader) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      leader = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leader, submessage_arena);
    }
    
  } else {
    
  }
  leader_ = leader;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RegionLeaderResponse.leader)
}

// -------------------------------------------------------------------

// RegionDetailRequest

// -------------------------------------------------------------------

// RegionDetailResponse

// .metapb.Region region = 1;
inline bool RegionDetailResponse::has_region() const {
  return this != internal_default_instance() && region_ != NULL;
}
inline const ::metapb::Region& RegionDetailResponse::_internal_region() const {
  return *region_;
}
inline const ::metapb::Region& RegionDetailResponse::region() const {
  const ::metapb::Region* p = region_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.RegionDetailResponse.region)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Region*>(
      &::metapb::_Region_default_instance_);
}
inline ::metapb::Region* RegionDetailResponse::release_region() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RegionDetailResponse.region)
  
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
inline ::metapb::Region* RegionDetailResponse::mutable_region() {
  
  if (region_ == NULL) {
    auto* p = CreateMaybeMessage<::metapb::Region>(GetArenaNoVirtual());
    region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RegionDetailResponse.region)
  return region_;
}
inline void RegionDetailResponse::set_allocated_region(::metapb::Region* region) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(region_);
  }
  if (region) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      region = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    
  } else {
    
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RegionDetailResponse.region)
}

// .metapb.Peer leader = 2;
inline bool RegionDetailResponse::has_leader() const {
  return this != internal_default_instance() && leader_ != NULL;
}
inline const ::metapb::Peer& RegionDetailResponse::_internal_leader() const {
  return *leader_;
}
inline const ::metapb::Peer& RegionDetailResponse::leader() const {
  const ::metapb::Peer* p = leader_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.RegionDetailResponse.leader)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Peer*>(
      &::metapb::_Peer_default_instance_);
}
inline ::metapb::Peer* RegionDetailResponse::release_leader() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RegionDetailResponse.leader)
  
  ::metapb::Peer* temp = leader_;
  leader_ = NULL;
  return temp;
}
inline ::metapb::Peer* RegionDetailResponse::mutable_leader() {
  
  if (leader_ == NULL) {
    auto* p = CreateMaybeMessage<::metapb::Peer>(GetArenaNoVirtual());
    leader_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RegionDetailResponse.leader)
  return leader_;
}
inline void RegionDetailResponse::set_allocated_leader(::metapb::Peer* leader) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(leader_);
  }
  if (leader) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      leader = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leader, submessage_arena);
    }
    
  } else {
    
  }
  leader_ = leader;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RegionDetailResponse.leader)
}

// -------------------------------------------------------------------

// StatusRequest

// .raft_cmdpb.StatusCmdType cmd_type = 1;
inline void StatusRequest::clear_cmd_type() {
  cmd_type_ = 0;
}
inline ::raft_cmdpb::StatusCmdType StatusRequest::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.StatusRequest.cmd_type)
  return static_cast< ::raft_cmdpb::StatusCmdType >(cmd_type_);
}
inline void StatusRequest::set_cmd_type(::raft_cmdpb::StatusCmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.StatusRequest.cmd_type)
}

// .raft_cmdpb.RegionLeaderRequest region_leader = 2;
inline bool StatusRequest::has_region_leader() const {
  return this != internal_default_instance() && region_leader_ != NULL;
}
inline void StatusRequest::clear_region_leader() {
  if (GetArenaNoVirtual() == NULL && region_leader_ != NULL) {
    delete region_leader_;
  }
  region_leader_ = NULL;
}
inline const ::raft_cmdpb::RegionLeaderRequest& StatusRequest::_internal_region_leader() const {
  return *region_leader_;
}
inline const ::raft_cmdpb::RegionLeaderRequest& StatusRequest::region_leader() const {
  const ::raft_cmdpb::RegionLeaderRequest* p = region_leader_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.StatusRequest.region_leader)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::RegionLeaderRequest*>(
      &::raft_cmdpb::_RegionLeaderRequest_default_instance_);
}
inline ::raft_cmdpb::RegionLeaderRequest* StatusRequest::release_region_leader() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.StatusRequest.region_leader)
  
  ::raft_cmdpb::RegionLeaderRequest* temp = region_leader_;
  region_leader_ = NULL;
  return temp;
}
inline ::raft_cmdpb::RegionLeaderRequest* StatusRequest::mutable_region_leader() {
  
  if (region_leader_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::RegionLeaderRequest>(GetArenaNoVirtual());
    region_leader_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.StatusRequest.region_leader)
  return region_leader_;
}
inline void StatusRequest::set_allocated_region_leader(::raft_cmdpb::RegionLeaderRequest* region_leader) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete region_leader_;
  }
  if (region_leader) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      region_leader = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, region_leader, submessage_arena);
    }
    
  } else {
    
  }
  region_leader_ = region_leader;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.StatusRequest.region_leader)
}

// .raft_cmdpb.RegionDetailRequest region_detail = 3;
inline bool StatusRequest::has_region_detail() const {
  return this != internal_default_instance() && region_detail_ != NULL;
}
inline void StatusRequest::clear_region_detail() {
  if (GetArenaNoVirtual() == NULL && region_detail_ != NULL) {
    delete region_detail_;
  }
  region_detail_ = NULL;
}
inline const ::raft_cmdpb::RegionDetailRequest& StatusRequest::_internal_region_detail() const {
  return *region_detail_;
}
inline const ::raft_cmdpb::RegionDetailRequest& StatusRequest::region_detail() const {
  const ::raft_cmdpb::RegionDetailRequest* p = region_detail_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.StatusRequest.region_detail)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::RegionDetailRequest*>(
      &::raft_cmdpb::_RegionDetailRequest_default_instance_);
}
inline ::raft_cmdpb::RegionDetailRequest* StatusRequest::release_region_detail() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.StatusRequest.region_detail)
  
  ::raft_cmdpb::RegionDetailRequest* temp = region_detail_;
  region_detail_ = NULL;
  return temp;
}
inline ::raft_cmdpb::RegionDetailRequest* StatusRequest::mutable_region_detail() {
  
  if (region_detail_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::RegionDetailRequest>(GetArenaNoVirtual());
    region_detail_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.StatusRequest.region_detail)
  return region_detail_;
}
inline void StatusRequest::set_allocated_region_detail(::raft_cmdpb::RegionDetailRequest* region_detail) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete region_detail_;
  }
  if (region_detail) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      region_detail = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, region_detail, submessage_arena);
    }
    
  } else {
    
  }
  region_detail_ = region_detail;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.StatusRequest.region_detail)
}

// -------------------------------------------------------------------

// StatusResponse

// .raft_cmdpb.StatusCmdType cmd_type = 1;
inline void StatusResponse::clear_cmd_type() {
  cmd_type_ = 0;
}
inline ::raft_cmdpb::StatusCmdType StatusResponse::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.StatusResponse.cmd_type)
  return static_cast< ::raft_cmdpb::StatusCmdType >(cmd_type_);
}
inline void StatusResponse::set_cmd_type(::raft_cmdpb::StatusCmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.StatusResponse.cmd_type)
}

// .raft_cmdpb.RegionLeaderResponse region_leader = 2;
inline bool StatusResponse::has_region_leader() const {
  return this != internal_default_instance() && region_leader_ != NULL;
}
inline void StatusResponse::clear_region_leader() {
  if (GetArenaNoVirtual() == NULL && region_leader_ != NULL) {
    delete region_leader_;
  }
  region_leader_ = NULL;
}
inline const ::raft_cmdpb::RegionLeaderResponse& StatusResponse::_internal_region_leader() const {
  return *region_leader_;
}
inline const ::raft_cmdpb::RegionLeaderResponse& StatusResponse::region_leader() const {
  const ::raft_cmdpb::RegionLeaderResponse* p = region_leader_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.StatusResponse.region_leader)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::RegionLeaderResponse*>(
      &::raft_cmdpb::_RegionLeaderResponse_default_instance_);
}
inline ::raft_cmdpb::RegionLeaderResponse* StatusResponse::release_region_leader() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.StatusResponse.region_leader)
  
  ::raft_cmdpb::RegionLeaderResponse* temp = region_leader_;
  region_leader_ = NULL;
  return temp;
}
inline ::raft_cmdpb::RegionLeaderResponse* StatusResponse::mutable_region_leader() {
  
  if (region_leader_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::RegionLeaderResponse>(GetArenaNoVirtual());
    region_leader_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.StatusResponse.region_leader)
  return region_leader_;
}
inline void StatusResponse::set_allocated_region_leader(::raft_cmdpb::RegionLeaderResponse* region_leader) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete region_leader_;
  }
  if (region_leader) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      region_leader = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, region_leader, submessage_arena);
    }
    
  } else {
    
  }
  region_leader_ = region_leader;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.StatusResponse.region_leader)
}

// .raft_cmdpb.RegionDetailResponse region_detail = 3;
inline bool StatusResponse::has_region_detail() const {
  return this != internal_default_instance() && region_detail_ != NULL;
}
inline void StatusResponse::clear_region_detail() {
  if (GetArenaNoVirtual() == NULL && region_detail_ != NULL) {
    delete region_detail_;
  }
  region_detail_ = NULL;
}
inline const ::raft_cmdpb::RegionDetailResponse& StatusResponse::_internal_region_detail() const {
  return *region_detail_;
}
inline const ::raft_cmdpb::RegionDetailResponse& StatusResponse::region_detail() const {
  const ::raft_cmdpb::RegionDetailResponse* p = region_detail_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.StatusResponse.region_detail)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::RegionDetailResponse*>(
      &::raft_cmdpb::_RegionDetailResponse_default_instance_);
}
inline ::raft_cmdpb::RegionDetailResponse* StatusResponse::release_region_detail() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.StatusResponse.region_detail)
  
  ::raft_cmdpb::RegionDetailResponse* temp = region_detail_;
  region_detail_ = NULL;
  return temp;
}
inline ::raft_cmdpb::RegionDetailResponse* StatusResponse::mutable_region_detail() {
  
  if (region_detail_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::RegionDetailResponse>(GetArenaNoVirtual());
    region_detail_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.StatusResponse.region_detail)
  return region_detail_;
}
inline void StatusResponse::set_allocated_region_detail(::raft_cmdpb::RegionDetailResponse* region_detail) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete region_detail_;
  }
  if (region_detail) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      region_detail = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, region_detail, submessage_arena);
    }
    
  } else {
    
  }
  region_detail_ = region_detail;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.StatusResponse.region_detail)
}

// -------------------------------------------------------------------

// RaftRequestHeader

// uint64 region_id = 1;
inline void RaftRequestHeader::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftRequestHeader::region_id() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.region_id)
  return region_id_;
}
inline void RaftRequestHeader::set_region_id(::google::protobuf::uint64 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftRequestHeader.region_id)
}

// .metapb.Peer peer = 2;
inline bool RaftRequestHeader::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline const ::metapb::Peer& RaftRequestHeader::_internal_peer() const {
  return *peer_;
}
inline const ::metapb::Peer& RaftRequestHeader::peer() const {
  const ::metapb::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Peer*>(
      &::metapb::_Peer_default_instance_);
}
inline ::metapb::Peer* RaftRequestHeader::release_peer() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftRequestHeader.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline ::metapb::Peer* RaftRequestHeader::mutable_peer() {
  
  if (peer_ == NULL) {
    auto* p = CreateMaybeMessage<::metapb::Peer>(GetArenaNoVirtual());
    peer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftRequestHeader.peer)
  return peer_;
}
inline void RaftRequestHeader::set_allocated_peer(::metapb::Peer* peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(peer_);
  }
  if (peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftRequestHeader.peer)
}

// bool read_quorum = 3;
inline void RaftRequestHeader::clear_read_quorum() {
  read_quorum_ = false;
}
inline bool RaftRequestHeader::read_quorum() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.read_quorum)
  return read_quorum_;
}
inline void RaftRequestHeader::set_read_quorum(bool value) {
  
  read_quorum_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftRequestHeader.read_quorum)
}

// bytes uuid = 4;
inline void RaftRequestHeader::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RaftRequestHeader::uuid() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.uuid)
  return uuid_.GetNoArena();
}
inline void RaftRequestHeader::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftRequestHeader.uuid)
}
#if LANG_CXX11
inline void RaftRequestHeader::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.RaftRequestHeader.uuid)
}
#endif
inline void RaftRequestHeader::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.RaftRequestHeader.uuid)
}
inline void RaftRequestHeader::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.RaftRequestHeader.uuid)
}
inline ::std::string* RaftRequestHeader::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftRequestHeader.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RaftRequestHeader::release_uuid() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftRequestHeader.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RaftRequestHeader::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftRequestHeader.uuid)
}

// .metapb.RegionEpoch region_epoch = 5;
inline bool RaftRequestHeader::has_region_epoch() const {
  return this != internal_default_instance() && region_epoch_ != NULL;
}
inline const ::metapb::RegionEpoch& RaftRequestHeader::_internal_region_epoch() const {
  return *region_epoch_;
}
inline const ::metapb::RegionEpoch& RaftRequestHeader::region_epoch() const {
  const ::metapb::RegionEpoch* p = region_epoch_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.region_epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::RegionEpoch*>(
      &::metapb::_RegionEpoch_default_instance_);
}
inline ::metapb::RegionEpoch* RaftRequestHeader::release_region_epoch() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftRequestHeader.region_epoch)
  
  ::metapb::RegionEpoch* temp = region_epoch_;
  region_epoch_ = NULL;
  return temp;
}
inline ::metapb::RegionEpoch* RaftRequestHeader::mutable_region_epoch() {
  
  if (region_epoch_ == NULL) {
    auto* p = CreateMaybeMessage<::metapb::RegionEpoch>(GetArenaNoVirtual());
    region_epoch_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftRequestHeader.region_epoch)
  return region_epoch_;
}
inline void RaftRequestHeader::set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(region_epoch_);
  }
  if (region_epoch) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      region_epoch = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, region_epoch, submessage_arena);
    }
    
  } else {
    
  }
  region_epoch_ = region_epoch;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftRequestHeader.region_epoch)
}

// uint64 term = 6;
inline void RaftRequestHeader::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftRequestHeader::term() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.term)
  return term_;
}
inline void RaftRequestHeader::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftRequestHeader.term)
}

// bool sync_log = 7;
inline void RaftRequestHeader::clear_sync_log() {
  sync_log_ = false;
}
inline bool RaftRequestHeader::sync_log() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.sync_log)
  return sync_log_;
}
inline void RaftRequestHeader::set_sync_log(bool value) {
  
  sync_log_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftRequestHeader.sync_log)
}

// -------------------------------------------------------------------

// RaftResponseHeader

// .errorpb.Error error = 1;
inline bool RaftResponseHeader::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::errorpb::Error& RaftResponseHeader::_internal_error() const {
  return *error_;
}
inline const ::errorpb::Error& RaftResponseHeader::error() const {
  const ::errorpb::Error* p = error_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftResponseHeader.error)
  return p != NULL ? *p : *reinterpret_cast<const ::errorpb::Error*>(
      &::errorpb::_Error_default_instance_);
}
inline ::errorpb::Error* RaftResponseHeader::release_error() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftResponseHeader.error)
  
  ::errorpb::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::errorpb::Error* RaftResponseHeader::mutable_error() {
  
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::errorpb::Error>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftResponseHeader.error)
  return error_;
}
inline void RaftResponseHeader::set_allocated_error(::errorpb::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftResponseHeader.error)
}

// bytes uuid = 2;
inline void RaftResponseHeader::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RaftResponseHeader::uuid() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftResponseHeader.uuid)
  return uuid_.GetNoArena();
}
inline void RaftResponseHeader::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftResponseHeader.uuid)
}
#if LANG_CXX11
inline void RaftResponseHeader::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_cmdpb.RaftResponseHeader.uuid)
}
#endif
inline void RaftResponseHeader::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.RaftResponseHeader.uuid)
}
inline void RaftResponseHeader::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.RaftResponseHeader.uuid)
}
inline ::std::string* RaftResponseHeader::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftResponseHeader.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RaftResponseHeader::release_uuid() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftResponseHeader.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RaftResponseHeader::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftResponseHeader.uuid)
}

// uint64 current_term = 3;
inline void RaftResponseHeader::clear_current_term() {
  current_term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftResponseHeader::current_term() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftResponseHeader.current_term)
  return current_term_;
}
inline void RaftResponseHeader::set_current_term(::google::protobuf::uint64 value) {
  
  current_term_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftResponseHeader.current_term)
}

// -------------------------------------------------------------------

// RaftCmdRequest

// .raft_cmdpb.RaftRequestHeader header = 1;
inline bool RaftCmdRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void RaftCmdRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::raft_cmdpb::RaftRequestHeader& RaftCmdRequest::_internal_header() const {
  return *header_;
}
inline const ::raft_cmdpb::RaftRequestHeader& RaftCmdRequest::header() const {
  const ::raft_cmdpb::RaftRequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::RaftRequestHeader*>(
      &::raft_cmdpb::_RaftRequestHeader_default_instance_);
}
inline ::raft_cmdpb::RaftRequestHeader* RaftCmdRequest::release_header() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftCmdRequest.header)
  
  ::raft_cmdpb::RaftRequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::raft_cmdpb::RaftRequestHeader* RaftCmdRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::RaftRequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdRequest.header)
  return header_;
}
inline void RaftCmdRequest::set_allocated_header(::raft_cmdpb::RaftRequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdRequest.header)
}

// repeated .raft_cmdpb.Request requests = 2;
inline int RaftCmdRequest::requests_size() const {
  return requests_.size();
}
inline void RaftCmdRequest::clear_requests() {
  requests_.Clear();
}
inline ::raft_cmdpb::Request* RaftCmdRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdRequest.requests)
  return requests_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Request >*
RaftCmdRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:raft_cmdpb.RaftCmdRequest.requests)
  return &requests_;
}
inline const ::raft_cmdpb::Request& RaftCmdRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdRequest.requests)
  return requests_.Get(index);
}
inline ::raft_cmdpb::Request* RaftCmdRequest::add_requests() {
  // @@protoc_insertion_point(field_add:raft_cmdpb.RaftCmdRequest.requests)
  return requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Request >&
RaftCmdRequest::requests() const {
  // @@protoc_insertion_point(field_list:raft_cmdpb.RaftCmdRequest.requests)
  return requests_;
}

// .raft_cmdpb.AdminRequest admin_request = 3;
inline bool RaftCmdRequest::has_admin_request() const {
  return this != internal_default_instance() && admin_request_ != NULL;
}
inline void RaftCmdRequest::clear_admin_request() {
  if (GetArenaNoVirtual() == NULL && admin_request_ != NULL) {
    delete admin_request_;
  }
  admin_request_ = NULL;
}
inline const ::raft_cmdpb::AdminRequest& RaftCmdRequest::_internal_admin_request() const {
  return *admin_request_;
}
inline const ::raft_cmdpb::AdminRequest& RaftCmdRequest::admin_request() const {
  const ::raft_cmdpb::AdminRequest* p = admin_request_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdRequest.admin_request)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::AdminRequest*>(
      &::raft_cmdpb::_AdminRequest_default_instance_);
}
inline ::raft_cmdpb::AdminRequest* RaftCmdRequest::release_admin_request() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftCmdRequest.admin_request)
  
  ::raft_cmdpb::AdminRequest* temp = admin_request_;
  admin_request_ = NULL;
  return temp;
}
inline ::raft_cmdpb::AdminRequest* RaftCmdRequest::mutable_admin_request() {
  
  if (admin_request_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::AdminRequest>(GetArenaNoVirtual());
    admin_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdRequest.admin_request)
  return admin_request_;
}
inline void RaftCmdRequest::set_allocated_admin_request(::raft_cmdpb::AdminRequest* admin_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete admin_request_;
  }
  if (admin_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      admin_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, admin_request, submessage_arena);
    }
    
  } else {
    
  }
  admin_request_ = admin_request;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdRequest.admin_request)
}

// .raft_cmdpb.StatusRequest status_request = 4;
inline bool RaftCmdRequest::has_status_request() const {
  return this != internal_default_instance() && status_request_ != NULL;
}
inline void RaftCmdRequest::clear_status_request() {
  if (GetArenaNoVirtual() == NULL && status_request_ != NULL) {
    delete status_request_;
  }
  status_request_ = NULL;
}
inline const ::raft_cmdpb::StatusRequest& RaftCmdRequest::_internal_status_request() const {
  return *status_request_;
}
inline const ::raft_cmdpb::StatusRequest& RaftCmdRequest::status_request() const {
  const ::raft_cmdpb::StatusRequest* p = status_request_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdRequest.status_request)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::StatusRequest*>(
      &::raft_cmdpb::_StatusRequest_default_instance_);
}
inline ::raft_cmdpb::StatusRequest* RaftCmdRequest::release_status_request() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftCmdRequest.status_request)
  
  ::raft_cmdpb::StatusRequest* temp = status_request_;
  status_request_ = NULL;
  return temp;
}
inline ::raft_cmdpb::StatusRequest* RaftCmdRequest::mutable_status_request() {
  
  if (status_request_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::StatusRequest>(GetArenaNoVirtual());
    status_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdRequest.status_request)
  return status_request_;
}
inline void RaftCmdRequest::set_allocated_status_request(::raft_cmdpb::StatusRequest* status_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_request_;
  }
  if (status_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status_request, submessage_arena);
    }
    
  } else {
    
  }
  status_request_ = status_request;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdRequest.status_request)
}

// -------------------------------------------------------------------

// RaftCmdResponse

// .raft_cmdpb.RaftResponseHeader header = 1;
inline bool RaftCmdResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void RaftCmdResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::raft_cmdpb::RaftResponseHeader& RaftCmdResponse::_internal_header() const {
  return *header_;
}
inline const ::raft_cmdpb::RaftResponseHeader& RaftCmdResponse::header() const {
  const ::raft_cmdpb::RaftResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::RaftResponseHeader*>(
      &::raft_cmdpb::_RaftResponseHeader_default_instance_);
}
inline ::raft_cmdpb::RaftResponseHeader* RaftCmdResponse::release_header() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftCmdResponse.header)
  
  ::raft_cmdpb::RaftResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::raft_cmdpb::RaftResponseHeader* RaftCmdResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::RaftResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdResponse.header)
  return header_;
}
inline void RaftCmdResponse::set_allocated_header(::raft_cmdpb::RaftResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdResponse.header)
}

// repeated .raft_cmdpb.Response responses = 2;
inline int RaftCmdResponse::responses_size() const {
  return responses_.size();
}
inline void RaftCmdResponse::clear_responses() {
  responses_.Clear();
}
inline ::raft_cmdpb::Response* RaftCmdResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdResponse.responses)
  return responses_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Response >*
RaftCmdResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:raft_cmdpb.RaftCmdResponse.responses)
  return &responses_;
}
inline const ::raft_cmdpb::Response& RaftCmdResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdResponse.responses)
  return responses_.Get(index);
}
inline ::raft_cmdpb::Response* RaftCmdResponse::add_responses() {
  // @@protoc_insertion_point(field_add:raft_cmdpb.RaftCmdResponse.responses)
  return responses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Response >&
RaftCmdResponse::responses() const {
  // @@protoc_insertion_point(field_list:raft_cmdpb.RaftCmdResponse.responses)
  return responses_;
}

// .raft_cmdpb.AdminResponse admin_response = 3;
inline bool RaftCmdResponse::has_admin_response() const {
  return this != internal_default_instance() && admin_response_ != NULL;
}
inline void RaftCmdResponse::clear_admin_response() {
  if (GetArenaNoVirtual() == NULL && admin_response_ != NULL) {
    delete admin_response_;
  }
  admin_response_ = NULL;
}
inline const ::raft_cmdpb::AdminResponse& RaftCmdResponse::_internal_admin_response() const {
  return *admin_response_;
}
inline const ::raft_cmdpb::AdminResponse& RaftCmdResponse::admin_response() const {
  const ::raft_cmdpb::AdminResponse* p = admin_response_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdResponse.admin_response)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::AdminResponse*>(
      &::raft_cmdpb::_AdminResponse_default_instance_);
}
inline ::raft_cmdpb::AdminResponse* RaftCmdResponse::release_admin_response() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftCmdResponse.admin_response)
  
  ::raft_cmdpb::AdminResponse* temp = admin_response_;
  admin_response_ = NULL;
  return temp;
}
inline ::raft_cmdpb::AdminResponse* RaftCmdResponse::mutable_admin_response() {
  
  if (admin_response_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::AdminResponse>(GetArenaNoVirtual());
    admin_response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdResponse.admin_response)
  return admin_response_;
}
inline void RaftCmdResponse::set_allocated_admin_response(::raft_cmdpb::AdminResponse* admin_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete admin_response_;
  }
  if (admin_response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      admin_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, admin_response, submessage_arena);
    }
    
  } else {
    
  }
  admin_response_ = admin_response;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdResponse.admin_response)
}

// .raft_cmdpb.StatusResponse status_response = 4;
inline bool RaftCmdResponse::has_status_response() const {
  return this != internal_default_instance() && status_response_ != NULL;
}
inline void RaftCmdResponse::clear_status_response() {
  if (GetArenaNoVirtual() == NULL && status_response_ != NULL) {
    delete status_response_;
  }
  status_response_ = NULL;
}
inline const ::raft_cmdpb::StatusResponse& RaftCmdResponse::_internal_status_response() const {
  return *status_response_;
}
inline const ::raft_cmdpb::StatusResponse& RaftCmdResponse::status_response() const {
  const ::raft_cmdpb::StatusResponse* p = status_response_;
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdResponse.status_response)
  return p != NULL ? *p : *reinterpret_cast<const ::raft_cmdpb::StatusResponse*>(
      &::raft_cmdpb::_StatusResponse_default_instance_);
}
inline ::raft_cmdpb::StatusResponse* RaftCmdResponse::release_status_response() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftCmdResponse.status_response)
  
  ::raft_cmdpb::StatusResponse* temp = status_response_;
  status_response_ = NULL;
  return temp;
}
inline ::raft_cmdpb::StatusResponse* RaftCmdResponse::mutable_status_response() {
  
  if (status_response_ == NULL) {
    auto* p = CreateMaybeMessage<::raft_cmdpb::StatusResponse>(GetArenaNoVirtual());
    status_response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdResponse.status_response)
  return status_response_;
}
inline void RaftCmdResponse::set_allocated_status_response(::raft_cmdpb::StatusResponse* status_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_response_;
  }
  if (status_response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status_response, submessage_arena);
    }
    
  } else {
    
  }
  status_response_ = status_response;
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdResponse.status_response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft_cmdpb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::raft_cmdpb::CmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raft_cmdpb::CmdType>() {
  return ::raft_cmdpb::CmdType_descriptor();
}
template <> struct is_proto_enum< ::raft_cmdpb::AdminCmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raft_cmdpb::AdminCmdType>() {
  return ::raft_cmdpb::AdminCmdType_descriptor();
}
template <> struct is_proto_enum< ::raft_cmdpb::StatusCmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raft_cmdpb::StatusCmdType>() {
  return ::raft_cmdpb::StatusCmdType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_raft_5fcmdpb_2eproto
