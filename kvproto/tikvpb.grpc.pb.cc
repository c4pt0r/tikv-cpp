// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tikvpb.proto

#include "tikvpb.pb.h"
#include "tikvpb.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace tikvpb {

static const char* Tikv_method_names[] = {
  "/tikvpb.Tikv/KvGet",
  "/tikvpb.Tikv/KvScan",
  "/tikvpb.Tikv/KvPrewrite",
  "/tikvpb.Tikv/KvCommit",
  "/tikvpb.Tikv/KvImport",
  "/tikvpb.Tikv/KvCleanup",
  "/tikvpb.Tikv/KvBatchGet",
  "/tikvpb.Tikv/KvBatchRollback",
  "/tikvpb.Tikv/KvScanLock",
  "/tikvpb.Tikv/KvResolveLock",
  "/tikvpb.Tikv/KvGC",
  "/tikvpb.Tikv/KvDeleteRange",
  "/tikvpb.Tikv/RawGet",
  "/tikvpb.Tikv/RawBatchGet",
  "/tikvpb.Tikv/RawPut",
  "/tikvpb.Tikv/RawBatchPut",
  "/tikvpb.Tikv/RawDelete",
  "/tikvpb.Tikv/RawBatchDelete",
  "/tikvpb.Tikv/RawScan",
  "/tikvpb.Tikv/RawDeleteRange",
  "/tikvpb.Tikv/RawBatchScan",
  "/tikvpb.Tikv/Coprocessor",
  "/tikvpb.Tikv/CoprocessorStream",
  "/tikvpb.Tikv/Raft",
  "/tikvpb.Tikv/Snapshot",
  "/tikvpb.Tikv/SplitRegion",
  "/tikvpb.Tikv/MvccGetByKey",
  "/tikvpb.Tikv/MvccGetByStartTs",
};

std::unique_ptr< Tikv::Stub> Tikv::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Tikv::Stub> stub(new Tikv::Stub(channel));
  return stub;
}

Tikv::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_KvGet_(Tikv_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KvScan_(Tikv_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KvPrewrite_(Tikv_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KvCommit_(Tikv_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KvImport_(Tikv_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KvCleanup_(Tikv_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KvBatchGet_(Tikv_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KvBatchRollback_(Tikv_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KvScanLock_(Tikv_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KvResolveLock_(Tikv_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KvGC_(Tikv_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KvDeleteRange_(Tikv_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RawGet_(Tikv_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RawBatchGet_(Tikv_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RawPut_(Tikv_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RawBatchPut_(Tikv_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RawDelete_(Tikv_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RawBatchDelete_(Tikv_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RawScan_(Tikv_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RawDeleteRange_(Tikv_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RawBatchScan_(Tikv_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Coprocessor_(Tikv_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CoprocessorStream_(Tikv_method_names[22], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Raft_(Tikv_method_names[23], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_Snapshot_(Tikv_method_names[24], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_SplitRegion_(Tikv_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MvccGetByKey_(Tikv_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MvccGetByStartTs_(Tikv_method_names[27], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Tikv::Stub::KvGet(::grpc::ClientContext* context, const ::kvrpcpb::GetRequest& request, ::kvrpcpb::GetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvGet_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::GetResponse>* Tikv::Stub::AsyncKvGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::GetResponse>::Create(channel_.get(), cq, rpcmethod_KvGet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::GetResponse>* Tikv::Stub::PrepareAsyncKvGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::GetResponse>::Create(channel_.get(), cq, rpcmethod_KvGet_, context, request, false);
}

::grpc::Status Tikv::Stub::KvScan(::grpc::ClientContext* context, const ::kvrpcpb::ScanRequest& request, ::kvrpcpb::ScanResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvScan_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::ScanResponse>* Tikv::Stub::AsyncKvScanRaw(::grpc::ClientContext* context, const ::kvrpcpb::ScanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::ScanResponse>::Create(channel_.get(), cq, rpcmethod_KvScan_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::ScanResponse>* Tikv::Stub::PrepareAsyncKvScanRaw(::grpc::ClientContext* context, const ::kvrpcpb::ScanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::ScanResponse>::Create(channel_.get(), cq, rpcmethod_KvScan_, context, request, false);
}

::grpc::Status Tikv::Stub::KvPrewrite(::grpc::ClientContext* context, const ::kvrpcpb::PrewriteRequest& request, ::kvrpcpb::PrewriteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvPrewrite_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::PrewriteResponse>* Tikv::Stub::AsyncKvPrewriteRaw(::grpc::ClientContext* context, const ::kvrpcpb::PrewriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::PrewriteResponse>::Create(channel_.get(), cq, rpcmethod_KvPrewrite_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::PrewriteResponse>* Tikv::Stub::PrepareAsyncKvPrewriteRaw(::grpc::ClientContext* context, const ::kvrpcpb::PrewriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::PrewriteResponse>::Create(channel_.get(), cq, rpcmethod_KvPrewrite_, context, request, false);
}

::grpc::Status Tikv::Stub::KvCommit(::grpc::ClientContext* context, const ::kvrpcpb::CommitRequest& request, ::kvrpcpb::CommitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvCommit_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::CommitResponse>* Tikv::Stub::AsyncKvCommitRaw(::grpc::ClientContext* context, const ::kvrpcpb::CommitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::CommitResponse>::Create(channel_.get(), cq, rpcmethod_KvCommit_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::CommitResponse>* Tikv::Stub::PrepareAsyncKvCommitRaw(::grpc::ClientContext* context, const ::kvrpcpb::CommitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::CommitResponse>::Create(channel_.get(), cq, rpcmethod_KvCommit_, context, request, false);
}

::grpc::Status Tikv::Stub::KvImport(::grpc::ClientContext* context, const ::kvrpcpb::ImportRequest& request, ::kvrpcpb::ImportResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvImport_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::ImportResponse>* Tikv::Stub::AsyncKvImportRaw(::grpc::ClientContext* context, const ::kvrpcpb::ImportRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::ImportResponse>::Create(channel_.get(), cq, rpcmethod_KvImport_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::ImportResponse>* Tikv::Stub::PrepareAsyncKvImportRaw(::grpc::ClientContext* context, const ::kvrpcpb::ImportRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::ImportResponse>::Create(channel_.get(), cq, rpcmethod_KvImport_, context, request, false);
}

::grpc::Status Tikv::Stub::KvCleanup(::grpc::ClientContext* context, const ::kvrpcpb::CleanupRequest& request, ::kvrpcpb::CleanupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvCleanup_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::CleanupResponse>* Tikv::Stub::AsyncKvCleanupRaw(::grpc::ClientContext* context, const ::kvrpcpb::CleanupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::CleanupResponse>::Create(channel_.get(), cq, rpcmethod_KvCleanup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::CleanupResponse>* Tikv::Stub::PrepareAsyncKvCleanupRaw(::grpc::ClientContext* context, const ::kvrpcpb::CleanupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::CleanupResponse>::Create(channel_.get(), cq, rpcmethod_KvCleanup_, context, request, false);
}

::grpc::Status Tikv::Stub::KvBatchGet(::grpc::ClientContext* context, const ::kvrpcpb::BatchGetRequest& request, ::kvrpcpb::BatchGetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvBatchGet_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::BatchGetResponse>* Tikv::Stub::AsyncKvBatchGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::BatchGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::BatchGetResponse>::Create(channel_.get(), cq, rpcmethod_KvBatchGet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::BatchGetResponse>* Tikv::Stub::PrepareAsyncKvBatchGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::BatchGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::BatchGetResponse>::Create(channel_.get(), cq, rpcmethod_KvBatchGet_, context, request, false);
}

::grpc::Status Tikv::Stub::KvBatchRollback(::grpc::ClientContext* context, const ::kvrpcpb::BatchRollbackRequest& request, ::kvrpcpb::BatchRollbackResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvBatchRollback_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::BatchRollbackResponse>* Tikv::Stub::AsyncKvBatchRollbackRaw(::grpc::ClientContext* context, const ::kvrpcpb::BatchRollbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::BatchRollbackResponse>::Create(channel_.get(), cq, rpcmethod_KvBatchRollback_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::BatchRollbackResponse>* Tikv::Stub::PrepareAsyncKvBatchRollbackRaw(::grpc::ClientContext* context, const ::kvrpcpb::BatchRollbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::BatchRollbackResponse>::Create(channel_.get(), cq, rpcmethod_KvBatchRollback_, context, request, false);
}

::grpc::Status Tikv::Stub::KvScanLock(::grpc::ClientContext* context, const ::kvrpcpb::ScanLockRequest& request, ::kvrpcpb::ScanLockResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvScanLock_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::ScanLockResponse>* Tikv::Stub::AsyncKvScanLockRaw(::grpc::ClientContext* context, const ::kvrpcpb::ScanLockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::ScanLockResponse>::Create(channel_.get(), cq, rpcmethod_KvScanLock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::ScanLockResponse>* Tikv::Stub::PrepareAsyncKvScanLockRaw(::grpc::ClientContext* context, const ::kvrpcpb::ScanLockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::ScanLockResponse>::Create(channel_.get(), cq, rpcmethod_KvScanLock_, context, request, false);
}

::grpc::Status Tikv::Stub::KvResolveLock(::grpc::ClientContext* context, const ::kvrpcpb::ResolveLockRequest& request, ::kvrpcpb::ResolveLockResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvResolveLock_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::ResolveLockResponse>* Tikv::Stub::AsyncKvResolveLockRaw(::grpc::ClientContext* context, const ::kvrpcpb::ResolveLockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::ResolveLockResponse>::Create(channel_.get(), cq, rpcmethod_KvResolveLock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::ResolveLockResponse>* Tikv::Stub::PrepareAsyncKvResolveLockRaw(::grpc::ClientContext* context, const ::kvrpcpb::ResolveLockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::ResolveLockResponse>::Create(channel_.get(), cq, rpcmethod_KvResolveLock_, context, request, false);
}

::grpc::Status Tikv::Stub::KvGC(::grpc::ClientContext* context, const ::kvrpcpb::GCRequest& request, ::kvrpcpb::GCResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvGC_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::GCResponse>* Tikv::Stub::AsyncKvGCRaw(::grpc::ClientContext* context, const ::kvrpcpb::GCRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::GCResponse>::Create(channel_.get(), cq, rpcmethod_KvGC_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::GCResponse>* Tikv::Stub::PrepareAsyncKvGCRaw(::grpc::ClientContext* context, const ::kvrpcpb::GCRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::GCResponse>::Create(channel_.get(), cq, rpcmethod_KvGC_, context, request, false);
}

::grpc::Status Tikv::Stub::KvDeleteRange(::grpc::ClientContext* context, const ::kvrpcpb::DeleteRangeRequest& request, ::kvrpcpb::DeleteRangeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvDeleteRange_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::DeleteRangeResponse>* Tikv::Stub::AsyncKvDeleteRangeRaw(::grpc::ClientContext* context, const ::kvrpcpb::DeleteRangeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::DeleteRangeResponse>::Create(channel_.get(), cq, rpcmethod_KvDeleteRange_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::DeleteRangeResponse>* Tikv::Stub::PrepareAsyncKvDeleteRangeRaw(::grpc::ClientContext* context, const ::kvrpcpb::DeleteRangeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::DeleteRangeResponse>::Create(channel_.get(), cq, rpcmethod_KvDeleteRange_, context, request, false);
}

::grpc::Status Tikv::Stub::RawGet(::grpc::ClientContext* context, const ::kvrpcpb::RawGetRequest& request, ::kvrpcpb::RawGetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RawGet_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawGetResponse>* Tikv::Stub::AsyncRawGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::RawGetResponse>::Create(channel_.get(), cq, rpcmethod_RawGet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawGetResponse>* Tikv::Stub::PrepareAsyncRawGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::RawGetResponse>::Create(channel_.get(), cq, rpcmethod_RawGet_, context, request, false);
}

::grpc::Status Tikv::Stub::RawBatchGet(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchGetRequest& request, ::kvrpcpb::RawBatchGetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RawBatchGet_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchGetResponse>* Tikv::Stub::AsyncRawBatchGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::RawBatchGetResponse>::Create(channel_.get(), cq, rpcmethod_RawBatchGet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchGetResponse>* Tikv::Stub::PrepareAsyncRawBatchGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::RawBatchGetResponse>::Create(channel_.get(), cq, rpcmethod_RawBatchGet_, context, request, false);
}

::grpc::Status Tikv::Stub::RawPut(::grpc::ClientContext* context, const ::kvrpcpb::RawPutRequest& request, ::kvrpcpb::RawPutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RawPut_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawPutResponse>* Tikv::Stub::AsyncRawPutRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawPutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::RawPutResponse>::Create(channel_.get(), cq, rpcmethod_RawPut_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawPutResponse>* Tikv::Stub::PrepareAsyncRawPutRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawPutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::RawPutResponse>::Create(channel_.get(), cq, rpcmethod_RawPut_, context, request, false);
}

::grpc::Status Tikv::Stub::RawBatchPut(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchPutRequest& request, ::kvrpcpb::RawBatchPutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RawBatchPut_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchPutResponse>* Tikv::Stub::AsyncRawBatchPutRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchPutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::RawBatchPutResponse>::Create(channel_.get(), cq, rpcmethod_RawBatchPut_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchPutResponse>* Tikv::Stub::PrepareAsyncRawBatchPutRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchPutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::RawBatchPutResponse>::Create(channel_.get(), cq, rpcmethod_RawBatchPut_, context, request, false);
}

::grpc::Status Tikv::Stub::RawDelete(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRequest& request, ::kvrpcpb::RawDeleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RawDelete_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawDeleteResponse>* Tikv::Stub::AsyncRawDeleteRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::RawDeleteResponse>::Create(channel_.get(), cq, rpcmethod_RawDelete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawDeleteResponse>* Tikv::Stub::PrepareAsyncRawDeleteRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::RawDeleteResponse>::Create(channel_.get(), cq, rpcmethod_RawDelete_, context, request, false);
}

::grpc::Status Tikv::Stub::RawBatchDelete(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchDeleteRequest& request, ::kvrpcpb::RawBatchDeleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RawBatchDelete_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchDeleteResponse>* Tikv::Stub::AsyncRawBatchDeleteRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::RawBatchDeleteResponse>::Create(channel_.get(), cq, rpcmethod_RawBatchDelete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchDeleteResponse>* Tikv::Stub::PrepareAsyncRawBatchDeleteRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::RawBatchDeleteResponse>::Create(channel_.get(), cq, rpcmethod_RawBatchDelete_, context, request, false);
}

::grpc::Status Tikv::Stub::RawScan(::grpc::ClientContext* context, const ::kvrpcpb::RawScanRequest& request, ::kvrpcpb::RawScanResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RawScan_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawScanResponse>* Tikv::Stub::AsyncRawScanRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawScanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::RawScanResponse>::Create(channel_.get(), cq, rpcmethod_RawScan_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawScanResponse>* Tikv::Stub::PrepareAsyncRawScanRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawScanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::RawScanResponse>::Create(channel_.get(), cq, rpcmethod_RawScan_, context, request, false);
}

::grpc::Status Tikv::Stub::RawDeleteRange(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRangeRequest& request, ::kvrpcpb::RawDeleteRangeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RawDeleteRange_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawDeleteRangeResponse>* Tikv::Stub::AsyncRawDeleteRangeRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRangeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::RawDeleteRangeResponse>::Create(channel_.get(), cq, rpcmethod_RawDeleteRange_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawDeleteRangeResponse>* Tikv::Stub::PrepareAsyncRawDeleteRangeRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRangeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::RawDeleteRangeResponse>::Create(channel_.get(), cq, rpcmethod_RawDeleteRange_, context, request, false);
}

::grpc::Status Tikv::Stub::RawBatchScan(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchScanRequest& request, ::kvrpcpb::RawBatchScanResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RawBatchScan_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchScanResponse>* Tikv::Stub::AsyncRawBatchScanRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchScanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::RawBatchScanResponse>::Create(channel_.get(), cq, rpcmethod_RawBatchScan_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawBatchScanResponse>* Tikv::Stub::PrepareAsyncRawBatchScanRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawBatchScanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::RawBatchScanResponse>::Create(channel_.get(), cq, rpcmethod_RawBatchScan_, context, request, false);
}

::grpc::Status Tikv::Stub::Coprocessor(::grpc::ClientContext* context, const ::coprocessor::Request& request, ::coprocessor::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Coprocessor_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::coprocessor::Response>* Tikv::Stub::AsyncCoprocessorRaw(::grpc::ClientContext* context, const ::coprocessor::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::coprocessor::Response>::Create(channel_.get(), cq, rpcmethod_Coprocessor_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::coprocessor::Response>* Tikv::Stub::PrepareAsyncCoprocessorRaw(::grpc::ClientContext* context, const ::coprocessor::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::coprocessor::Response>::Create(channel_.get(), cq, rpcmethod_Coprocessor_, context, request, false);
}

::grpc::ClientReader< ::coprocessor::Response>* Tikv::Stub::CoprocessorStreamRaw(::grpc::ClientContext* context, const ::coprocessor::Request& request) {
  return ::grpc::internal::ClientReaderFactory< ::coprocessor::Response>::Create(channel_.get(), rpcmethod_CoprocessorStream_, context, request);
}

::grpc::ClientAsyncReader< ::coprocessor::Response>* Tikv::Stub::AsyncCoprocessorStreamRaw(::grpc::ClientContext* context, const ::coprocessor::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::coprocessor::Response>::Create(channel_.get(), cq, rpcmethod_CoprocessorStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::coprocessor::Response>* Tikv::Stub::PrepareAsyncCoprocessorStreamRaw(::grpc::ClientContext* context, const ::coprocessor::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::coprocessor::Response>::Create(channel_.get(), cq, rpcmethod_CoprocessorStream_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::raft_serverpb::RaftMessage>* Tikv::Stub::RaftRaw(::grpc::ClientContext* context, ::raft_serverpb::Done* response) {
  return ::grpc::internal::ClientWriterFactory< ::raft_serverpb::RaftMessage>::Create(channel_.get(), rpcmethod_Raft_, context, response);
}

::grpc::ClientAsyncWriter< ::raft_serverpb::RaftMessage>* Tikv::Stub::AsyncRaftRaw(::grpc::ClientContext* context, ::raft_serverpb::Done* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::raft_serverpb::RaftMessage>::Create(channel_.get(), cq, rpcmethod_Raft_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::raft_serverpb::RaftMessage>* Tikv::Stub::PrepareAsyncRaftRaw(::grpc::ClientContext* context, ::raft_serverpb::Done* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::raft_serverpb::RaftMessage>::Create(channel_.get(), cq, rpcmethod_Raft_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::raft_serverpb::SnapshotChunk>* Tikv::Stub::SnapshotRaw(::grpc::ClientContext* context, ::raft_serverpb::Done* response) {
  return ::grpc::internal::ClientWriterFactory< ::raft_serverpb::SnapshotChunk>::Create(channel_.get(), rpcmethod_Snapshot_, context, response);
}

::grpc::ClientAsyncWriter< ::raft_serverpb::SnapshotChunk>* Tikv::Stub::AsyncSnapshotRaw(::grpc::ClientContext* context, ::raft_serverpb::Done* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::raft_serverpb::SnapshotChunk>::Create(channel_.get(), cq, rpcmethod_Snapshot_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::raft_serverpb::SnapshotChunk>* Tikv::Stub::PrepareAsyncSnapshotRaw(::grpc::ClientContext* context, ::raft_serverpb::Done* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::raft_serverpb::SnapshotChunk>::Create(channel_.get(), cq, rpcmethod_Snapshot_, context, response, false, nullptr);
}

::grpc::Status Tikv::Stub::SplitRegion(::grpc::ClientContext* context, const ::kvrpcpb::SplitRegionRequest& request, ::kvrpcpb::SplitRegionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SplitRegion_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::SplitRegionResponse>* Tikv::Stub::AsyncSplitRegionRaw(::grpc::ClientContext* context, const ::kvrpcpb::SplitRegionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::SplitRegionResponse>::Create(channel_.get(), cq, rpcmethod_SplitRegion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::SplitRegionResponse>* Tikv::Stub::PrepareAsyncSplitRegionRaw(::grpc::ClientContext* context, const ::kvrpcpb::SplitRegionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::SplitRegionResponse>::Create(channel_.get(), cq, rpcmethod_SplitRegion_, context, request, false);
}

::grpc::Status Tikv::Stub::MvccGetByKey(::grpc::ClientContext* context, const ::kvrpcpb::MvccGetByKeyRequest& request, ::kvrpcpb::MvccGetByKeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MvccGetByKey_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::MvccGetByKeyResponse>* Tikv::Stub::AsyncMvccGetByKeyRaw(::grpc::ClientContext* context, const ::kvrpcpb::MvccGetByKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::MvccGetByKeyResponse>::Create(channel_.get(), cq, rpcmethod_MvccGetByKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::MvccGetByKeyResponse>* Tikv::Stub::PrepareAsyncMvccGetByKeyRaw(::grpc::ClientContext* context, const ::kvrpcpb::MvccGetByKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::MvccGetByKeyResponse>::Create(channel_.get(), cq, rpcmethod_MvccGetByKey_, context, request, false);
}

::grpc::Status Tikv::Stub::MvccGetByStartTs(::grpc::ClientContext* context, const ::kvrpcpb::MvccGetByStartTsRequest& request, ::kvrpcpb::MvccGetByStartTsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MvccGetByStartTs_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::MvccGetByStartTsResponse>* Tikv::Stub::AsyncMvccGetByStartTsRaw(::grpc::ClientContext* context, const ::kvrpcpb::MvccGetByStartTsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::MvccGetByStartTsResponse>::Create(channel_.get(), cq, rpcmethod_MvccGetByStartTs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::MvccGetByStartTsResponse>* Tikv::Stub::PrepareAsyncMvccGetByStartTsRaw(::grpc::ClientContext* context, const ::kvrpcpb::MvccGetByStartTsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::MvccGetByStartTsResponse>::Create(channel_.get(), cq, rpcmethod_MvccGetByStartTs_, context, request, false);
}

Tikv::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tikv::Service, ::kvrpcpb::GetRequest, ::kvrpcpb::GetResponse>(
          std::mem_fn(&Tikv::Service::KvGet), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tikv::Service, ::kvrpcpb::ScanRequest, ::kvrpcpb::ScanResponse>(
          std::mem_fn(&Tikv::Service::KvScan), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tikv::Service, ::kvrpcpb::PrewriteRequest, ::kvrpcpb::PrewriteResponse>(
          std::mem_fn(&Tikv::Service::KvPrewrite), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tikv::Service, ::kvrpcpb::CommitRequest, ::kvrpcpb::CommitResponse>(
          std::mem_fn(&Tikv::Service::KvCommit), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tikv::Service, ::kvrpcpb::ImportRequest, ::kvrpcpb::ImportResponse>(
          std::mem_fn(&Tikv::Service::KvImport), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tikv::Service, ::kvrpcpb::CleanupRequest, ::kvrpcpb::CleanupResponse>(
          std::mem_fn(&Tikv::Service::KvCleanup), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tikv::Service, ::kvrpcpb::BatchGetRequest, ::kvrpcpb::BatchGetResponse>(
          std::mem_fn(&Tikv::Service::KvBatchGet), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tikv::Service, ::kvrpcpb::BatchRollbackRequest, ::kvrpcpb::BatchRollbackResponse>(
          std::mem_fn(&Tikv::Service::KvBatchRollback), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tikv::Service, ::kvrpcpb::ScanLockRequest, ::kvrpcpb::ScanLockResponse>(
          std::mem_fn(&Tikv::Service::KvScanLock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tikv::Service, ::kvrpcpb::ResolveLockRequest, ::kvrpcpb::ResolveLockResponse>(
          std::mem_fn(&Tikv::Service::KvResolveLock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tikv::Service, ::kvrpcpb::GCRequest, ::kvrpcpb::GCResponse>(
          std::mem_fn(&Tikv::Service::KvGC), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tikv::Service, ::kvrpcpb::DeleteRangeRequest, ::kvrpcpb::DeleteRangeResponse>(
          std::mem_fn(&Tikv::Service::KvDeleteRange), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tikv::Service, ::kvrpcpb::RawGetRequest, ::kvrpcpb::RawGetResponse>(
          std::mem_fn(&Tikv::Service::RawGet), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tikv::Service, ::kvrpcpb::RawBatchGetRequest, ::kvrpcpb::RawBatchGetResponse>(
          std::mem_fn(&Tikv::Service::RawBatchGet), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tikv::Service, ::kvrpcpb::RawPutRequest, ::kvrpcpb::RawPutResponse>(
          std::mem_fn(&Tikv::Service::RawPut), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tikv::Service, ::kvrpcpb::RawBatchPutRequest, ::kvrpcpb::RawBatchPutResponse>(
          std::mem_fn(&Tikv::Service::RawBatchPut), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tikv::Service, ::kvrpcpb::RawDeleteRequest, ::kvrpcpb::RawDeleteResponse>(
          std::mem_fn(&Tikv::Service::RawDelete), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tikv::Service, ::kvrpcpb::RawBatchDeleteRequest, ::kvrpcpb::RawBatchDeleteResponse>(
          std::mem_fn(&Tikv::Service::RawBatchDelete), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tikv::Service, ::kvrpcpb::RawScanRequest, ::kvrpcpb::RawScanResponse>(
          std::mem_fn(&Tikv::Service::RawScan), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tikv::Service, ::kvrpcpb::RawDeleteRangeRequest, ::kvrpcpb::RawDeleteRangeResponse>(
          std::mem_fn(&Tikv::Service::RawDeleteRange), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tikv::Service, ::kvrpcpb::RawBatchScanRequest, ::kvrpcpb::RawBatchScanResponse>(
          std::mem_fn(&Tikv::Service::RawBatchScan), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tikv::Service, ::coprocessor::Request, ::coprocessor::Response>(
          std::mem_fn(&Tikv::Service::Coprocessor), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[22],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Tikv::Service, ::coprocessor::Request, ::coprocessor::Response>(
          std::mem_fn(&Tikv::Service::CoprocessorStream), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[23],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Tikv::Service, ::raft_serverpb::RaftMessage, ::raft_serverpb::Done>(
          std::mem_fn(&Tikv::Service::Raft), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[24],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Tikv::Service, ::raft_serverpb::SnapshotChunk, ::raft_serverpb::Done>(
          std::mem_fn(&Tikv::Service::Snapshot), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tikv::Service, ::kvrpcpb::SplitRegionRequest, ::kvrpcpb::SplitRegionResponse>(
          std::mem_fn(&Tikv::Service::SplitRegion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tikv::Service, ::kvrpcpb::MvccGetByKeyRequest, ::kvrpcpb::MvccGetByKeyResponse>(
          std::mem_fn(&Tikv::Service::MvccGetByKey), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tikv_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tikv::Service, ::kvrpcpb::MvccGetByStartTsRequest, ::kvrpcpb::MvccGetByStartTsResponse>(
          std::mem_fn(&Tikv::Service::MvccGetByStartTs), this)));
}

Tikv::Service::~Service() {
}

::grpc::Status Tikv::Service::KvGet(::grpc::ServerContext* context, const ::kvrpcpb::GetRequest* request, ::kvrpcpb::GetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::KvScan(::grpc::ServerContext* context, const ::kvrpcpb::ScanRequest* request, ::kvrpcpb::ScanResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::KvPrewrite(::grpc::ServerContext* context, const ::kvrpcpb::PrewriteRequest* request, ::kvrpcpb::PrewriteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::KvCommit(::grpc::ServerContext* context, const ::kvrpcpb::CommitRequest* request, ::kvrpcpb::CommitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::KvImport(::grpc::ServerContext* context, const ::kvrpcpb::ImportRequest* request, ::kvrpcpb::ImportResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::KvCleanup(::grpc::ServerContext* context, const ::kvrpcpb::CleanupRequest* request, ::kvrpcpb::CleanupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::KvBatchGet(::grpc::ServerContext* context, const ::kvrpcpb::BatchGetRequest* request, ::kvrpcpb::BatchGetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::KvBatchRollback(::grpc::ServerContext* context, const ::kvrpcpb::BatchRollbackRequest* request, ::kvrpcpb::BatchRollbackResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::KvScanLock(::grpc::ServerContext* context, const ::kvrpcpb::ScanLockRequest* request, ::kvrpcpb::ScanLockResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::KvResolveLock(::grpc::ServerContext* context, const ::kvrpcpb::ResolveLockRequest* request, ::kvrpcpb::ResolveLockResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::KvGC(::grpc::ServerContext* context, const ::kvrpcpb::GCRequest* request, ::kvrpcpb::GCResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::KvDeleteRange(::grpc::ServerContext* context, const ::kvrpcpb::DeleteRangeRequest* request, ::kvrpcpb::DeleteRangeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::RawGet(::grpc::ServerContext* context, const ::kvrpcpb::RawGetRequest* request, ::kvrpcpb::RawGetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::RawBatchGet(::grpc::ServerContext* context, const ::kvrpcpb::RawBatchGetRequest* request, ::kvrpcpb::RawBatchGetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::RawPut(::grpc::ServerContext* context, const ::kvrpcpb::RawPutRequest* request, ::kvrpcpb::RawPutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::RawBatchPut(::grpc::ServerContext* context, const ::kvrpcpb::RawBatchPutRequest* request, ::kvrpcpb::RawBatchPutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::RawDelete(::grpc::ServerContext* context, const ::kvrpcpb::RawDeleteRequest* request, ::kvrpcpb::RawDeleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::RawBatchDelete(::grpc::ServerContext* context, const ::kvrpcpb::RawBatchDeleteRequest* request, ::kvrpcpb::RawBatchDeleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::RawScan(::grpc::ServerContext* context, const ::kvrpcpb::RawScanRequest* request, ::kvrpcpb::RawScanResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::RawDeleteRange(::grpc::ServerContext* context, const ::kvrpcpb::RawDeleteRangeRequest* request, ::kvrpcpb::RawDeleteRangeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::RawBatchScan(::grpc::ServerContext* context, const ::kvrpcpb::RawBatchScanRequest* request, ::kvrpcpb::RawBatchScanResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::Coprocessor(::grpc::ServerContext* context, const ::coprocessor::Request* request, ::coprocessor::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::CoprocessorStream(::grpc::ServerContext* context, const ::coprocessor::Request* request, ::grpc::ServerWriter< ::coprocessor::Response>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::Raft(::grpc::ServerContext* context, ::grpc::ServerReader< ::raft_serverpb::RaftMessage>* reader, ::raft_serverpb::Done* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::Snapshot(::grpc::ServerContext* context, ::grpc::ServerReader< ::raft_serverpb::SnapshotChunk>* reader, ::raft_serverpb::Done* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::SplitRegion(::grpc::ServerContext* context, const ::kvrpcpb::SplitRegionRequest* request, ::kvrpcpb::SplitRegionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::MvccGetByKey(::grpc::ServerContext* context, const ::kvrpcpb::MvccGetByKeyRequest* request, ::kvrpcpb::MvccGetByKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tikv::Service::MvccGetByStartTs(::grpc::ServerContext* context, const ::kvrpcpb::MvccGetByStartTsRequest* request, ::kvrpcpb::MvccGetByStartTsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tikvpb

