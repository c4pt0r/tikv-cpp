// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: import_kvpb.proto

#include "import_kvpb.pb.h"
#include "import_kvpb.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace import_kvpb {

static const char* ImportKV_method_names[] = {
  "/import_kvpb.ImportKV/SwitchMode",
  "/import_kvpb.ImportKV/OpenEngine",
  "/import_kvpb.ImportKV/WriteEngine",
  "/import_kvpb.ImportKV/CloseEngine",
  "/import_kvpb.ImportKV/ImportEngine",
  "/import_kvpb.ImportKV/CleanupEngine",
  "/import_kvpb.ImportKV/CompactCluster",
};

std::unique_ptr< ImportKV::Stub> ImportKV::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ImportKV::Stub> stub(new ImportKV::Stub(channel));
  return stub;
}

ImportKV::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SwitchMode_(ImportKV_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OpenEngine_(ImportKV_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteEngine_(ImportKV_method_names[2], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_CloseEngine_(ImportKV_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ImportEngine_(ImportKV_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CleanupEngine_(ImportKV_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CompactCluster_(ImportKV_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ImportKV::Stub::SwitchMode(::grpc::ClientContext* context, const ::import_kvpb::SwitchModeRequest& request, ::import_kvpb::SwitchModeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SwitchMode_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::import_kvpb::SwitchModeResponse>* ImportKV::Stub::AsyncSwitchModeRaw(::grpc::ClientContext* context, const ::import_kvpb::SwitchModeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::import_kvpb::SwitchModeResponse>::Create(channel_.get(), cq, rpcmethod_SwitchMode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::import_kvpb::SwitchModeResponse>* ImportKV::Stub::PrepareAsyncSwitchModeRaw(::grpc::ClientContext* context, const ::import_kvpb::SwitchModeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::import_kvpb::SwitchModeResponse>::Create(channel_.get(), cq, rpcmethod_SwitchMode_, context, request, false);
}

::grpc::Status ImportKV::Stub::OpenEngine(::grpc::ClientContext* context, const ::import_kvpb::OpenEngineRequest& request, ::import_kvpb::OpenEngineResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OpenEngine_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::import_kvpb::OpenEngineResponse>* ImportKV::Stub::AsyncOpenEngineRaw(::grpc::ClientContext* context, const ::import_kvpb::OpenEngineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::import_kvpb::OpenEngineResponse>::Create(channel_.get(), cq, rpcmethod_OpenEngine_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::import_kvpb::OpenEngineResponse>* ImportKV::Stub::PrepareAsyncOpenEngineRaw(::grpc::ClientContext* context, const ::import_kvpb::OpenEngineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::import_kvpb::OpenEngineResponse>::Create(channel_.get(), cq, rpcmethod_OpenEngine_, context, request, false);
}

::grpc::ClientWriter< ::import_kvpb::WriteEngineRequest>* ImportKV::Stub::WriteEngineRaw(::grpc::ClientContext* context, ::import_kvpb::WriteEngineResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::import_kvpb::WriteEngineRequest>::Create(channel_.get(), rpcmethod_WriteEngine_, context, response);
}

::grpc::ClientAsyncWriter< ::import_kvpb::WriteEngineRequest>* ImportKV::Stub::AsyncWriteEngineRaw(::grpc::ClientContext* context, ::import_kvpb::WriteEngineResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::import_kvpb::WriteEngineRequest>::Create(channel_.get(), cq, rpcmethod_WriteEngine_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::import_kvpb::WriteEngineRequest>* ImportKV::Stub::PrepareAsyncWriteEngineRaw(::grpc::ClientContext* context, ::import_kvpb::WriteEngineResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::import_kvpb::WriteEngineRequest>::Create(channel_.get(), cq, rpcmethod_WriteEngine_, context, response, false, nullptr);
}

::grpc::Status ImportKV::Stub::CloseEngine(::grpc::ClientContext* context, const ::import_kvpb::CloseEngineRequest& request, ::import_kvpb::CloseEngineResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CloseEngine_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::import_kvpb::CloseEngineResponse>* ImportKV::Stub::AsyncCloseEngineRaw(::grpc::ClientContext* context, const ::import_kvpb::CloseEngineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::import_kvpb::CloseEngineResponse>::Create(channel_.get(), cq, rpcmethod_CloseEngine_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::import_kvpb::CloseEngineResponse>* ImportKV::Stub::PrepareAsyncCloseEngineRaw(::grpc::ClientContext* context, const ::import_kvpb::CloseEngineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::import_kvpb::CloseEngineResponse>::Create(channel_.get(), cq, rpcmethod_CloseEngine_, context, request, false);
}

::grpc::Status ImportKV::Stub::ImportEngine(::grpc::ClientContext* context, const ::import_kvpb::ImportEngineRequest& request, ::import_kvpb::ImportEngineResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ImportEngine_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::import_kvpb::ImportEngineResponse>* ImportKV::Stub::AsyncImportEngineRaw(::grpc::ClientContext* context, const ::import_kvpb::ImportEngineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::import_kvpb::ImportEngineResponse>::Create(channel_.get(), cq, rpcmethod_ImportEngine_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::import_kvpb::ImportEngineResponse>* ImportKV::Stub::PrepareAsyncImportEngineRaw(::grpc::ClientContext* context, const ::import_kvpb::ImportEngineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::import_kvpb::ImportEngineResponse>::Create(channel_.get(), cq, rpcmethod_ImportEngine_, context, request, false);
}

::grpc::Status ImportKV::Stub::CleanupEngine(::grpc::ClientContext* context, const ::import_kvpb::CleanupEngineRequest& request, ::import_kvpb::CleanupEngineResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CleanupEngine_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::import_kvpb::CleanupEngineResponse>* ImportKV::Stub::AsyncCleanupEngineRaw(::grpc::ClientContext* context, const ::import_kvpb::CleanupEngineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::import_kvpb::CleanupEngineResponse>::Create(channel_.get(), cq, rpcmethod_CleanupEngine_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::import_kvpb::CleanupEngineResponse>* ImportKV::Stub::PrepareAsyncCleanupEngineRaw(::grpc::ClientContext* context, const ::import_kvpb::CleanupEngineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::import_kvpb::CleanupEngineResponse>::Create(channel_.get(), cq, rpcmethod_CleanupEngine_, context, request, false);
}

::grpc::Status ImportKV::Stub::CompactCluster(::grpc::ClientContext* context, const ::import_kvpb::CompactClusterRequest& request, ::import_kvpb::CompactClusterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CompactCluster_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::import_kvpb::CompactClusterResponse>* ImportKV::Stub::AsyncCompactClusterRaw(::grpc::ClientContext* context, const ::import_kvpb::CompactClusterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::import_kvpb::CompactClusterResponse>::Create(channel_.get(), cq, rpcmethod_CompactCluster_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::import_kvpb::CompactClusterResponse>* ImportKV::Stub::PrepareAsyncCompactClusterRaw(::grpc::ClientContext* context, const ::import_kvpb::CompactClusterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::import_kvpb::CompactClusterResponse>::Create(channel_.get(), cq, rpcmethod_CompactCluster_, context, request, false);
}

ImportKV::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImportKV_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImportKV::Service, ::import_kvpb::SwitchModeRequest, ::import_kvpb::SwitchModeResponse>(
          std::mem_fn(&ImportKV::Service::SwitchMode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImportKV_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImportKV::Service, ::import_kvpb::OpenEngineRequest, ::import_kvpb::OpenEngineResponse>(
          std::mem_fn(&ImportKV::Service::OpenEngine), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImportKV_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< ImportKV::Service, ::import_kvpb::WriteEngineRequest, ::import_kvpb::WriteEngineResponse>(
          std::mem_fn(&ImportKV::Service::WriteEngine), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImportKV_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImportKV::Service, ::import_kvpb::CloseEngineRequest, ::import_kvpb::CloseEngineResponse>(
          std::mem_fn(&ImportKV::Service::CloseEngine), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImportKV_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImportKV::Service, ::import_kvpb::ImportEngineRequest, ::import_kvpb::ImportEngineResponse>(
          std::mem_fn(&ImportKV::Service::ImportEngine), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImportKV_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImportKV::Service, ::import_kvpb::CleanupEngineRequest, ::import_kvpb::CleanupEngineResponse>(
          std::mem_fn(&ImportKV::Service::CleanupEngine), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImportKV_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImportKV::Service, ::import_kvpb::CompactClusterRequest, ::import_kvpb::CompactClusterResponse>(
          std::mem_fn(&ImportKV::Service::CompactCluster), this)));
}

ImportKV::Service::~Service() {
}

::grpc::Status ImportKV::Service::SwitchMode(::grpc::ServerContext* context, const ::import_kvpb::SwitchModeRequest* request, ::import_kvpb::SwitchModeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImportKV::Service::OpenEngine(::grpc::ServerContext* context, const ::import_kvpb::OpenEngineRequest* request, ::import_kvpb::OpenEngineResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImportKV::Service::WriteEngine(::grpc::ServerContext* context, ::grpc::ServerReader< ::import_kvpb::WriteEngineRequest>* reader, ::import_kvpb::WriteEngineResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImportKV::Service::CloseEngine(::grpc::ServerContext* context, const ::import_kvpb::CloseEngineRequest* request, ::import_kvpb::CloseEngineResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImportKV::Service::ImportEngine(::grpc::ServerContext* context, const ::import_kvpb::ImportEngineRequest* request, ::import_kvpb::ImportEngineResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImportKV::Service::CleanupEngine(::grpc::ServerContext* context, const ::import_kvpb::CleanupEngineRequest* request, ::import_kvpb::CleanupEngineResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImportKV::Service::CompactCluster(::grpc::ServerContext* context, const ::import_kvpb::CompactClusterRequest* request, ::import_kvpb::CompactClusterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace import_kvpb

