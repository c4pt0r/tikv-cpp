// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: import_kvpb.proto
#ifndef GRPC_import_5fkvpb_2eproto__INCLUDED
#define GRPC_import_5fkvpb_2eproto__INCLUDED

#include "import_kvpb.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace import_kvpb {

// ImportKV provides a service to import key-value pairs to TiKV.
//
// In order to import key-value pairs to TiKV, the user should:
// 1. Open an engine identified by an UUID.
// 2. Open write streams to write key-value batches to the opened engine.
//    Different streams/clients can write to the same engine concurrently.
// 3. Close the engine after all write batches have been finished. An
//    engine can only be closed when all write streams are closed. An
//    engine can only be closed once, and it can not be opened again
//    once it is closed.
// 4. Import the data in the engine to the target cluster. Note that
//    the import process is not atomic, it requires the data to be
//    idempotent on retry. An engine can only be imported after it is
//    closed. An engine can be imported multiple times, but can not be
//    imported concurrently.
// 5. Clean up the engine after it has been imported. Delete all data
//    in the engine. An engine can not be cleaned up when it is
//    writing or importing.
class ImportKV final {
 public:
  static constexpr char const* service_full_name() {
    return "import_kvpb.ImportKV";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Switch the target cluster to normal/import mode.
    virtual ::grpc::Status SwitchMode(::grpc::ClientContext* context, const ::import_kvpb::SwitchModeRequest& request, ::import_kvpb::SwitchModeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::SwitchModeResponse>> AsyncSwitchMode(::grpc::ClientContext* context, const ::import_kvpb::SwitchModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::SwitchModeResponse>>(AsyncSwitchModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::SwitchModeResponse>> PrepareAsyncSwitchMode(::grpc::ClientContext* context, const ::import_kvpb::SwitchModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::SwitchModeResponse>>(PrepareAsyncSwitchModeRaw(context, request, cq));
    }
    // Open an engine.
    virtual ::grpc::Status OpenEngine(::grpc::ClientContext* context, const ::import_kvpb::OpenEngineRequest& request, ::import_kvpb::OpenEngineResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::OpenEngineResponse>> AsyncOpenEngine(::grpc::ClientContext* context, const ::import_kvpb::OpenEngineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::OpenEngineResponse>>(AsyncOpenEngineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::OpenEngineResponse>> PrepareAsyncOpenEngine(::grpc::ClientContext* context, const ::import_kvpb::OpenEngineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::OpenEngineResponse>>(PrepareAsyncOpenEngineRaw(context, request, cq));
    }
    // Open a write stream to the engine.
    std::unique_ptr< ::grpc::ClientWriterInterface< ::import_kvpb::WriteEngineRequest>> WriteEngine(::grpc::ClientContext* context, ::import_kvpb::WriteEngineResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::import_kvpb::WriteEngineRequest>>(WriteEngineRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::import_kvpb::WriteEngineRequest>> AsyncWriteEngine(::grpc::ClientContext* context, ::import_kvpb::WriteEngineResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::import_kvpb::WriteEngineRequest>>(AsyncWriteEngineRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::import_kvpb::WriteEngineRequest>> PrepareAsyncWriteEngine(::grpc::ClientContext* context, ::import_kvpb::WriteEngineResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::import_kvpb::WriteEngineRequest>>(PrepareAsyncWriteEngineRaw(context, response, cq));
    }
    // Close the engine.
    virtual ::grpc::Status CloseEngine(::grpc::ClientContext* context, const ::import_kvpb::CloseEngineRequest& request, ::import_kvpb::CloseEngineResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::CloseEngineResponse>> AsyncCloseEngine(::grpc::ClientContext* context, const ::import_kvpb::CloseEngineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::CloseEngineResponse>>(AsyncCloseEngineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::CloseEngineResponse>> PrepareAsyncCloseEngine(::grpc::ClientContext* context, const ::import_kvpb::CloseEngineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::CloseEngineResponse>>(PrepareAsyncCloseEngineRaw(context, request, cq));
    }
    // Import the engine to the target cluster.
    virtual ::grpc::Status ImportEngine(::grpc::ClientContext* context, const ::import_kvpb::ImportEngineRequest& request, ::import_kvpb::ImportEngineResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::ImportEngineResponse>> AsyncImportEngine(::grpc::ClientContext* context, const ::import_kvpb::ImportEngineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::ImportEngineResponse>>(AsyncImportEngineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::ImportEngineResponse>> PrepareAsyncImportEngine(::grpc::ClientContext* context, const ::import_kvpb::ImportEngineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::ImportEngineResponse>>(PrepareAsyncImportEngineRaw(context, request, cq));
    }
    // Clean up the engine.
    virtual ::grpc::Status CleanupEngine(::grpc::ClientContext* context, const ::import_kvpb::CleanupEngineRequest& request, ::import_kvpb::CleanupEngineResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::CleanupEngineResponse>> AsyncCleanupEngine(::grpc::ClientContext* context, const ::import_kvpb::CleanupEngineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::CleanupEngineResponse>>(AsyncCleanupEngineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::CleanupEngineResponse>> PrepareAsyncCleanupEngine(::grpc::ClientContext* context, const ::import_kvpb::CleanupEngineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::CleanupEngineResponse>>(PrepareAsyncCleanupEngineRaw(context, request, cq));
    }
    // Compact the target cluster for better performance.
    virtual ::grpc::Status CompactCluster(::grpc::ClientContext* context, const ::import_kvpb::CompactClusterRequest& request, ::import_kvpb::CompactClusterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::CompactClusterResponse>> AsyncCompactCluster(::grpc::ClientContext* context, const ::import_kvpb::CompactClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::CompactClusterResponse>>(AsyncCompactClusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::CompactClusterResponse>> PrepareAsyncCompactCluster(::grpc::ClientContext* context, const ::import_kvpb::CompactClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::CompactClusterResponse>>(PrepareAsyncCompactClusterRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::SwitchModeResponse>* AsyncSwitchModeRaw(::grpc::ClientContext* context, const ::import_kvpb::SwitchModeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::SwitchModeResponse>* PrepareAsyncSwitchModeRaw(::grpc::ClientContext* context, const ::import_kvpb::SwitchModeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::OpenEngineResponse>* AsyncOpenEngineRaw(::grpc::ClientContext* context, const ::import_kvpb::OpenEngineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::OpenEngineResponse>* PrepareAsyncOpenEngineRaw(::grpc::ClientContext* context, const ::import_kvpb::OpenEngineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::import_kvpb::WriteEngineRequest>* WriteEngineRaw(::grpc::ClientContext* context, ::import_kvpb::WriteEngineResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::import_kvpb::WriteEngineRequest>* AsyncWriteEngineRaw(::grpc::ClientContext* context, ::import_kvpb::WriteEngineResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::import_kvpb::WriteEngineRequest>* PrepareAsyncWriteEngineRaw(::grpc::ClientContext* context, ::import_kvpb::WriteEngineResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::CloseEngineResponse>* AsyncCloseEngineRaw(::grpc::ClientContext* context, const ::import_kvpb::CloseEngineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::CloseEngineResponse>* PrepareAsyncCloseEngineRaw(::grpc::ClientContext* context, const ::import_kvpb::CloseEngineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::ImportEngineResponse>* AsyncImportEngineRaw(::grpc::ClientContext* context, const ::import_kvpb::ImportEngineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::ImportEngineResponse>* PrepareAsyncImportEngineRaw(::grpc::ClientContext* context, const ::import_kvpb::ImportEngineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::CleanupEngineResponse>* AsyncCleanupEngineRaw(::grpc::ClientContext* context, const ::import_kvpb::CleanupEngineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::CleanupEngineResponse>* PrepareAsyncCleanupEngineRaw(::grpc::ClientContext* context, const ::import_kvpb::CleanupEngineRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::CompactClusterResponse>* AsyncCompactClusterRaw(::grpc::ClientContext* context, const ::import_kvpb::CompactClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::import_kvpb::CompactClusterResponse>* PrepareAsyncCompactClusterRaw(::grpc::ClientContext* context, const ::import_kvpb::CompactClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SwitchMode(::grpc::ClientContext* context, const ::import_kvpb::SwitchModeRequest& request, ::import_kvpb::SwitchModeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::import_kvpb::SwitchModeResponse>> AsyncSwitchMode(::grpc::ClientContext* context, const ::import_kvpb::SwitchModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::import_kvpb::SwitchModeResponse>>(AsyncSwitchModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::import_kvpb::SwitchModeResponse>> PrepareAsyncSwitchMode(::grpc::ClientContext* context, const ::import_kvpb::SwitchModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::import_kvpb::SwitchModeResponse>>(PrepareAsyncSwitchModeRaw(context, request, cq));
    }
    ::grpc::Status OpenEngine(::grpc::ClientContext* context, const ::import_kvpb::OpenEngineRequest& request, ::import_kvpb::OpenEngineResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::import_kvpb::OpenEngineResponse>> AsyncOpenEngine(::grpc::ClientContext* context, const ::import_kvpb::OpenEngineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::import_kvpb::OpenEngineResponse>>(AsyncOpenEngineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::import_kvpb::OpenEngineResponse>> PrepareAsyncOpenEngine(::grpc::ClientContext* context, const ::import_kvpb::OpenEngineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::import_kvpb::OpenEngineResponse>>(PrepareAsyncOpenEngineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::import_kvpb::WriteEngineRequest>> WriteEngine(::grpc::ClientContext* context, ::import_kvpb::WriteEngineResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::import_kvpb::WriteEngineRequest>>(WriteEngineRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::import_kvpb::WriteEngineRequest>> AsyncWriteEngine(::grpc::ClientContext* context, ::import_kvpb::WriteEngineResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::import_kvpb::WriteEngineRequest>>(AsyncWriteEngineRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::import_kvpb::WriteEngineRequest>> PrepareAsyncWriteEngine(::grpc::ClientContext* context, ::import_kvpb::WriteEngineResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::import_kvpb::WriteEngineRequest>>(PrepareAsyncWriteEngineRaw(context, response, cq));
    }
    ::grpc::Status CloseEngine(::grpc::ClientContext* context, const ::import_kvpb::CloseEngineRequest& request, ::import_kvpb::CloseEngineResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::import_kvpb::CloseEngineResponse>> AsyncCloseEngine(::grpc::ClientContext* context, const ::import_kvpb::CloseEngineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::import_kvpb::CloseEngineResponse>>(AsyncCloseEngineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::import_kvpb::CloseEngineResponse>> PrepareAsyncCloseEngine(::grpc::ClientContext* context, const ::import_kvpb::CloseEngineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::import_kvpb::CloseEngineResponse>>(PrepareAsyncCloseEngineRaw(context, request, cq));
    }
    ::grpc::Status ImportEngine(::grpc::ClientContext* context, const ::import_kvpb::ImportEngineRequest& request, ::import_kvpb::ImportEngineResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::import_kvpb::ImportEngineResponse>> AsyncImportEngine(::grpc::ClientContext* context, const ::import_kvpb::ImportEngineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::import_kvpb::ImportEngineResponse>>(AsyncImportEngineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::import_kvpb::ImportEngineResponse>> PrepareAsyncImportEngine(::grpc::ClientContext* context, const ::import_kvpb::ImportEngineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::import_kvpb::ImportEngineResponse>>(PrepareAsyncImportEngineRaw(context, request, cq));
    }
    ::grpc::Status CleanupEngine(::grpc::ClientContext* context, const ::import_kvpb::CleanupEngineRequest& request, ::import_kvpb::CleanupEngineResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::import_kvpb::CleanupEngineResponse>> AsyncCleanupEngine(::grpc::ClientContext* context, const ::import_kvpb::CleanupEngineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::import_kvpb::CleanupEngineResponse>>(AsyncCleanupEngineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::import_kvpb::CleanupEngineResponse>> PrepareAsyncCleanupEngine(::grpc::ClientContext* context, const ::import_kvpb::CleanupEngineRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::import_kvpb::CleanupEngineResponse>>(PrepareAsyncCleanupEngineRaw(context, request, cq));
    }
    ::grpc::Status CompactCluster(::grpc::ClientContext* context, const ::import_kvpb::CompactClusterRequest& request, ::import_kvpb::CompactClusterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::import_kvpb::CompactClusterResponse>> AsyncCompactCluster(::grpc::ClientContext* context, const ::import_kvpb::CompactClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::import_kvpb::CompactClusterResponse>>(AsyncCompactClusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::import_kvpb::CompactClusterResponse>> PrepareAsyncCompactCluster(::grpc::ClientContext* context, const ::import_kvpb::CompactClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::import_kvpb::CompactClusterResponse>>(PrepareAsyncCompactClusterRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::import_kvpb::SwitchModeResponse>* AsyncSwitchModeRaw(::grpc::ClientContext* context, const ::import_kvpb::SwitchModeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::import_kvpb::SwitchModeResponse>* PrepareAsyncSwitchModeRaw(::grpc::ClientContext* context, const ::import_kvpb::SwitchModeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::import_kvpb::OpenEngineResponse>* AsyncOpenEngineRaw(::grpc::ClientContext* context, const ::import_kvpb::OpenEngineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::import_kvpb::OpenEngineResponse>* PrepareAsyncOpenEngineRaw(::grpc::ClientContext* context, const ::import_kvpb::OpenEngineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::import_kvpb::WriteEngineRequest>* WriteEngineRaw(::grpc::ClientContext* context, ::import_kvpb::WriteEngineResponse* response) override;
    ::grpc::ClientAsyncWriter< ::import_kvpb::WriteEngineRequest>* AsyncWriteEngineRaw(::grpc::ClientContext* context, ::import_kvpb::WriteEngineResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::import_kvpb::WriteEngineRequest>* PrepareAsyncWriteEngineRaw(::grpc::ClientContext* context, ::import_kvpb::WriteEngineResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::import_kvpb::CloseEngineResponse>* AsyncCloseEngineRaw(::grpc::ClientContext* context, const ::import_kvpb::CloseEngineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::import_kvpb::CloseEngineResponse>* PrepareAsyncCloseEngineRaw(::grpc::ClientContext* context, const ::import_kvpb::CloseEngineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::import_kvpb::ImportEngineResponse>* AsyncImportEngineRaw(::grpc::ClientContext* context, const ::import_kvpb::ImportEngineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::import_kvpb::ImportEngineResponse>* PrepareAsyncImportEngineRaw(::grpc::ClientContext* context, const ::import_kvpb::ImportEngineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::import_kvpb::CleanupEngineResponse>* AsyncCleanupEngineRaw(::grpc::ClientContext* context, const ::import_kvpb::CleanupEngineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::import_kvpb::CleanupEngineResponse>* PrepareAsyncCleanupEngineRaw(::grpc::ClientContext* context, const ::import_kvpb::CleanupEngineRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::import_kvpb::CompactClusterResponse>* AsyncCompactClusterRaw(::grpc::ClientContext* context, const ::import_kvpb::CompactClusterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::import_kvpb::CompactClusterResponse>* PrepareAsyncCompactClusterRaw(::grpc::ClientContext* context, const ::import_kvpb::CompactClusterRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SwitchMode_;
    const ::grpc::internal::RpcMethod rpcmethod_OpenEngine_;
    const ::grpc::internal::RpcMethod rpcmethod_WriteEngine_;
    const ::grpc::internal::RpcMethod rpcmethod_CloseEngine_;
    const ::grpc::internal::RpcMethod rpcmethod_ImportEngine_;
    const ::grpc::internal::RpcMethod rpcmethod_CleanupEngine_;
    const ::grpc::internal::RpcMethod rpcmethod_CompactCluster_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Switch the target cluster to normal/import mode.
    virtual ::grpc::Status SwitchMode(::grpc::ServerContext* context, const ::import_kvpb::SwitchModeRequest* request, ::import_kvpb::SwitchModeResponse* response);
    // Open an engine.
    virtual ::grpc::Status OpenEngine(::grpc::ServerContext* context, const ::import_kvpb::OpenEngineRequest* request, ::import_kvpb::OpenEngineResponse* response);
    // Open a write stream to the engine.
    virtual ::grpc::Status WriteEngine(::grpc::ServerContext* context, ::grpc::ServerReader< ::import_kvpb::WriteEngineRequest>* reader, ::import_kvpb::WriteEngineResponse* response);
    // Close the engine.
    virtual ::grpc::Status CloseEngine(::grpc::ServerContext* context, const ::import_kvpb::CloseEngineRequest* request, ::import_kvpb::CloseEngineResponse* response);
    // Import the engine to the target cluster.
    virtual ::grpc::Status ImportEngine(::grpc::ServerContext* context, const ::import_kvpb::ImportEngineRequest* request, ::import_kvpb::ImportEngineResponse* response);
    // Clean up the engine.
    virtual ::grpc::Status CleanupEngine(::grpc::ServerContext* context, const ::import_kvpb::CleanupEngineRequest* request, ::import_kvpb::CleanupEngineResponse* response);
    // Compact the target cluster for better performance.
    virtual ::grpc::Status CompactCluster(::grpc::ServerContext* context, const ::import_kvpb::CompactClusterRequest* request, ::import_kvpb::CompactClusterResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SwitchMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SwitchMode() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SwitchMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SwitchMode(::grpc::ServerContext* context, const ::import_kvpb::SwitchModeRequest* request, ::import_kvpb::SwitchModeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSwitchMode(::grpc::ServerContext* context, ::import_kvpb::SwitchModeRequest* request, ::grpc::ServerAsyncResponseWriter< ::import_kvpb::SwitchModeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OpenEngine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_OpenEngine() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_OpenEngine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenEngine(::grpc::ServerContext* context, const ::import_kvpb::OpenEngineRequest* request, ::import_kvpb::OpenEngineResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenEngine(::grpc::ServerContext* context, ::import_kvpb::OpenEngineRequest* request, ::grpc::ServerAsyncResponseWriter< ::import_kvpb::OpenEngineResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WriteEngine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_WriteEngine() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_WriteEngine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteEngine(::grpc::ServerContext* context, ::grpc::ServerReader< ::import_kvpb::WriteEngineRequest>* reader, ::import_kvpb::WriteEngineResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteEngine(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::import_kvpb::WriteEngineResponse, ::import_kvpb::WriteEngineRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseEngine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CloseEngine() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CloseEngine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseEngine(::grpc::ServerContext* context, const ::import_kvpb::CloseEngineRequest* request, ::import_kvpb::CloseEngineResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseEngine(::grpc::ServerContext* context, ::import_kvpb::CloseEngineRequest* request, ::grpc::ServerAsyncResponseWriter< ::import_kvpb::CloseEngineResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ImportEngine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ImportEngine() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ImportEngine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ImportEngine(::grpc::ServerContext* context, const ::import_kvpb::ImportEngineRequest* request, ::import_kvpb::ImportEngineResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestImportEngine(::grpc::ServerContext* context, ::import_kvpb::ImportEngineRequest* request, ::grpc::ServerAsyncResponseWriter< ::import_kvpb::ImportEngineResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CleanupEngine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CleanupEngine() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CleanupEngine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CleanupEngine(::grpc::ServerContext* context, const ::import_kvpb::CleanupEngineRequest* request, ::import_kvpb::CleanupEngineResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCleanupEngine(::grpc::ServerContext* context, ::import_kvpb::CleanupEngineRequest* request, ::grpc::ServerAsyncResponseWriter< ::import_kvpb::CleanupEngineResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CompactCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CompactCluster() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_CompactCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompactCluster(::grpc::ServerContext* context, const ::import_kvpb::CompactClusterRequest* request, ::import_kvpb::CompactClusterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompactCluster(::grpc::ServerContext* context, ::import_kvpb::CompactClusterRequest* request, ::grpc::ServerAsyncResponseWriter< ::import_kvpb::CompactClusterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SwitchMode<WithAsyncMethod_OpenEngine<WithAsyncMethod_WriteEngine<WithAsyncMethod_CloseEngine<WithAsyncMethod_ImportEngine<WithAsyncMethod_CleanupEngine<WithAsyncMethod_CompactCluster<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SwitchMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SwitchMode() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SwitchMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SwitchMode(::grpc::ServerContext* context, const ::import_kvpb::SwitchModeRequest* request, ::import_kvpb::SwitchModeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OpenEngine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_OpenEngine() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_OpenEngine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenEngine(::grpc::ServerContext* context, const ::import_kvpb::OpenEngineRequest* request, ::import_kvpb::OpenEngineResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WriteEngine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_WriteEngine() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_WriteEngine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteEngine(::grpc::ServerContext* context, ::grpc::ServerReader< ::import_kvpb::WriteEngineRequest>* reader, ::import_kvpb::WriteEngineResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseEngine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CloseEngine() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CloseEngine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseEngine(::grpc::ServerContext* context, const ::import_kvpb::CloseEngineRequest* request, ::import_kvpb::CloseEngineResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ImportEngine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ImportEngine() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ImportEngine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ImportEngine(::grpc::ServerContext* context, const ::import_kvpb::ImportEngineRequest* request, ::import_kvpb::ImportEngineResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CleanupEngine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CleanupEngine() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CleanupEngine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CleanupEngine(::grpc::ServerContext* context, const ::import_kvpb::CleanupEngineRequest* request, ::import_kvpb::CleanupEngineResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CompactCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CompactCluster() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_CompactCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompactCluster(::grpc::ServerContext* context, const ::import_kvpb::CompactClusterRequest* request, ::import_kvpb::CompactClusterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SwitchMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SwitchMode() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SwitchMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SwitchMode(::grpc::ServerContext* context, const ::import_kvpb::SwitchModeRequest* request, ::import_kvpb::SwitchModeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSwitchMode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OpenEngine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_OpenEngine() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_OpenEngine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenEngine(::grpc::ServerContext* context, const ::import_kvpb::OpenEngineRequest* request, ::import_kvpb::OpenEngineResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenEngine(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WriteEngine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_WriteEngine() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_WriteEngine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteEngine(::grpc::ServerContext* context, ::grpc::ServerReader< ::import_kvpb::WriteEngineRequest>* reader, ::import_kvpb::WriteEngineResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteEngine(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CloseEngine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CloseEngine() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CloseEngine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseEngine(::grpc::ServerContext* context, const ::import_kvpb::CloseEngineRequest* request, ::import_kvpb::CloseEngineResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseEngine(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ImportEngine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ImportEngine() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ImportEngine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ImportEngine(::grpc::ServerContext* context, const ::import_kvpb::ImportEngineRequest* request, ::import_kvpb::ImportEngineResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestImportEngine(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CleanupEngine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CleanupEngine() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CleanupEngine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CleanupEngine(::grpc::ServerContext* context, const ::import_kvpb::CleanupEngineRequest* request, ::import_kvpb::CleanupEngineResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCleanupEngine(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CompactCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CompactCluster() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_CompactCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompactCluster(::grpc::ServerContext* context, const ::import_kvpb::CompactClusterRequest* request, ::import_kvpb::CompactClusterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompactCluster(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SwitchMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SwitchMode() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::import_kvpb::SwitchModeRequest, ::import_kvpb::SwitchModeResponse>(std::bind(&WithStreamedUnaryMethod_SwitchMode<BaseClass>::StreamedSwitchMode, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SwitchMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SwitchMode(::grpc::ServerContext* context, const ::import_kvpb::SwitchModeRequest* request, ::import_kvpb::SwitchModeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSwitchMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::import_kvpb::SwitchModeRequest,::import_kvpb::SwitchModeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OpenEngine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_OpenEngine() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::import_kvpb::OpenEngineRequest, ::import_kvpb::OpenEngineResponse>(std::bind(&WithStreamedUnaryMethod_OpenEngine<BaseClass>::StreamedOpenEngine, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_OpenEngine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OpenEngine(::grpc::ServerContext* context, const ::import_kvpb::OpenEngineRequest* request, ::import_kvpb::OpenEngineResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOpenEngine(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::import_kvpb::OpenEngineRequest,::import_kvpb::OpenEngineResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseEngine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CloseEngine() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::import_kvpb::CloseEngineRequest, ::import_kvpb::CloseEngineResponse>(std::bind(&WithStreamedUnaryMethod_CloseEngine<BaseClass>::StreamedCloseEngine, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CloseEngine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseEngine(::grpc::ServerContext* context, const ::import_kvpb::CloseEngineRequest* request, ::import_kvpb::CloseEngineResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseEngine(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::import_kvpb::CloseEngineRequest,::import_kvpb::CloseEngineResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ImportEngine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ImportEngine() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::import_kvpb::ImportEngineRequest, ::import_kvpb::ImportEngineResponse>(std::bind(&WithStreamedUnaryMethod_ImportEngine<BaseClass>::StreamedImportEngine, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ImportEngine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ImportEngine(::grpc::ServerContext* context, const ::import_kvpb::ImportEngineRequest* request, ::import_kvpb::ImportEngineResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedImportEngine(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::import_kvpb::ImportEngineRequest,::import_kvpb::ImportEngineResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CleanupEngine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CleanupEngine() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::import_kvpb::CleanupEngineRequest, ::import_kvpb::CleanupEngineResponse>(std::bind(&WithStreamedUnaryMethod_CleanupEngine<BaseClass>::StreamedCleanupEngine, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CleanupEngine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CleanupEngine(::grpc::ServerContext* context, const ::import_kvpb::CleanupEngineRequest* request, ::import_kvpb::CleanupEngineResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCleanupEngine(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::import_kvpb::CleanupEngineRequest,::import_kvpb::CleanupEngineResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CompactCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CompactCluster() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::import_kvpb::CompactClusterRequest, ::import_kvpb::CompactClusterResponse>(std::bind(&WithStreamedUnaryMethod_CompactCluster<BaseClass>::StreamedCompactCluster, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CompactCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CompactCluster(::grpc::ServerContext* context, const ::import_kvpb::CompactClusterRequest* request, ::import_kvpb::CompactClusterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCompactCluster(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::import_kvpb::CompactClusterRequest,::import_kvpb::CompactClusterResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SwitchMode<WithStreamedUnaryMethod_OpenEngine<WithStreamedUnaryMethod_CloseEngine<WithStreamedUnaryMethod_ImportEngine<WithStreamedUnaryMethod_CleanupEngine<WithStreamedUnaryMethod_CompactCluster<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SwitchMode<WithStreamedUnaryMethod_OpenEngine<WithStreamedUnaryMethod_CloseEngine<WithStreamedUnaryMethod_ImportEngine<WithStreamedUnaryMethod_CleanupEngine<WithStreamedUnaryMethod_CompactCluster<Service > > > > > > StreamedService;
};

}  // namespace import_kvpb


#endif  // GRPC_import_5fkvpb_2eproto__INCLUDED
