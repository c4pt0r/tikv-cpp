// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: errorpb.proto

#ifndef PROTOBUF_INCLUDED_errorpb_2eproto
#define PROTOBUF_INCLUDED_errorpb_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metapb.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_errorpb_2eproto 

namespace protobuf_errorpb_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_errorpb_2eproto
namespace errorpb {
class Error;
class ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class KeyNotInRegion;
class KeyNotInRegionDefaultTypeInternal;
extern KeyNotInRegionDefaultTypeInternal _KeyNotInRegion_default_instance_;
class NotLeader;
class NotLeaderDefaultTypeInternal;
extern NotLeaderDefaultTypeInternal _NotLeader_default_instance_;
class RaftEntryTooLarge;
class RaftEntryTooLargeDefaultTypeInternal;
extern RaftEntryTooLargeDefaultTypeInternal _RaftEntryTooLarge_default_instance_;
class RegionNotFound;
class RegionNotFoundDefaultTypeInternal;
extern RegionNotFoundDefaultTypeInternal _RegionNotFound_default_instance_;
class ServerIsBusy;
class ServerIsBusyDefaultTypeInternal;
extern ServerIsBusyDefaultTypeInternal _ServerIsBusy_default_instance_;
class StaleCommand;
class StaleCommandDefaultTypeInternal;
extern StaleCommandDefaultTypeInternal _StaleCommand_default_instance_;
class StaleEpoch;
class StaleEpochDefaultTypeInternal;
extern StaleEpochDefaultTypeInternal _StaleEpoch_default_instance_;
class StoreNotMatch;
class StoreNotMatchDefaultTypeInternal;
extern StoreNotMatchDefaultTypeInternal _StoreNotMatch_default_instance_;
}  // namespace errorpb
namespace google {
namespace protobuf {
template<> ::errorpb::Error* Arena::CreateMaybeMessage<::errorpb::Error>(Arena*);
template<> ::errorpb::KeyNotInRegion* Arena::CreateMaybeMessage<::errorpb::KeyNotInRegion>(Arena*);
template<> ::errorpb::NotLeader* Arena::CreateMaybeMessage<::errorpb::NotLeader>(Arena*);
template<> ::errorpb::RaftEntryTooLarge* Arena::CreateMaybeMessage<::errorpb::RaftEntryTooLarge>(Arena*);
template<> ::errorpb::RegionNotFound* Arena::CreateMaybeMessage<::errorpb::RegionNotFound>(Arena*);
template<> ::errorpb::ServerIsBusy* Arena::CreateMaybeMessage<::errorpb::ServerIsBusy>(Arena*);
template<> ::errorpb::StaleCommand* Arena::CreateMaybeMessage<::errorpb::StaleCommand>(Arena*);
template<> ::errorpb::StaleEpoch* Arena::CreateMaybeMessage<::errorpb::StaleEpoch>(Arena*);
template<> ::errorpb::StoreNotMatch* Arena::CreateMaybeMessage<::errorpb::StoreNotMatch>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace errorpb {

// ===================================================================

class NotLeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:errorpb.NotLeader) */ {
 public:
  NotLeader();
  virtual ~NotLeader();

  NotLeader(const NotLeader& from);

  inline NotLeader& operator=(const NotLeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotLeader(NotLeader&& from) noexcept
    : NotLeader() {
    *this = ::std::move(from);
  }

  inline NotLeader& operator=(NotLeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotLeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotLeader* internal_default_instance() {
    return reinterpret_cast<const NotLeader*>(
               &_NotLeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NotLeader* other);
  friend void swap(NotLeader& a, NotLeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotLeader* New() const final {
    return CreateMaybeMessage<NotLeader>(NULL);
  }

  NotLeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotLeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotLeader& from);
  void MergeFrom(const NotLeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotLeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .metapb.Peer leader = 2;
  bool has_leader() const;
  void clear_leader();
  static const int kLeaderFieldNumber = 2;
  private:
  const ::metapb::Peer& _internal_leader() const;
  public:
  const ::metapb::Peer& leader() const;
  ::metapb::Peer* release_leader();
  ::metapb::Peer* mutable_leader();
  void set_allocated_leader(::metapb::Peer* leader);

  // uint64 region_id = 1;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  ::google::protobuf::uint64 region_id() const;
  void set_region_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:errorpb.NotLeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metapb::Peer* leader_;
  ::google::protobuf::uint64 region_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_errorpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StoreNotMatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:errorpb.StoreNotMatch) */ {
 public:
  StoreNotMatch();
  virtual ~StoreNotMatch();

  StoreNotMatch(const StoreNotMatch& from);

  inline StoreNotMatch& operator=(const StoreNotMatch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StoreNotMatch(StoreNotMatch&& from) noexcept
    : StoreNotMatch() {
    *this = ::std::move(from);
  }

  inline StoreNotMatch& operator=(StoreNotMatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreNotMatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoreNotMatch* internal_default_instance() {
    return reinterpret_cast<const StoreNotMatch*>(
               &_StoreNotMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(StoreNotMatch* other);
  friend void swap(StoreNotMatch& a, StoreNotMatch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StoreNotMatch* New() const final {
    return CreateMaybeMessage<StoreNotMatch>(NULL);
  }

  StoreNotMatch* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StoreNotMatch>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StoreNotMatch& from);
  void MergeFrom(const StoreNotMatch& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreNotMatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:errorpb.StoreNotMatch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_errorpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegionNotFound : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:errorpb.RegionNotFound) */ {
 public:
  RegionNotFound();
  virtual ~RegionNotFound();

  RegionNotFound(const RegionNotFound& from);

  inline RegionNotFound& operator=(const RegionNotFound& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegionNotFound(RegionNotFound&& from) noexcept
    : RegionNotFound() {
    *this = ::std::move(from);
  }

  inline RegionNotFound& operator=(RegionNotFound&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionNotFound& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegionNotFound* internal_default_instance() {
    return reinterpret_cast<const RegionNotFound*>(
               &_RegionNotFound_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RegionNotFound* other);
  friend void swap(RegionNotFound& a, RegionNotFound& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegionNotFound* New() const final {
    return CreateMaybeMessage<RegionNotFound>(NULL);
  }

  RegionNotFound* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegionNotFound>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegionNotFound& from);
  void MergeFrom(const RegionNotFound& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionNotFound* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 region_id = 1;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  ::google::protobuf::uint64 region_id() const;
  void set_region_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:errorpb.RegionNotFound)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 region_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_errorpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KeyNotInRegion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:errorpb.KeyNotInRegion) */ {
 public:
  KeyNotInRegion();
  virtual ~KeyNotInRegion();

  KeyNotInRegion(const KeyNotInRegion& from);

  inline KeyNotInRegion& operator=(const KeyNotInRegion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeyNotInRegion(KeyNotInRegion&& from) noexcept
    : KeyNotInRegion() {
    *this = ::std::move(from);
  }

  inline KeyNotInRegion& operator=(KeyNotInRegion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyNotInRegion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyNotInRegion* internal_default_instance() {
    return reinterpret_cast<const KeyNotInRegion*>(
               &_KeyNotInRegion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(KeyNotInRegion* other);
  friend void swap(KeyNotInRegion& a, KeyNotInRegion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeyNotInRegion* New() const final {
    return CreateMaybeMessage<KeyNotInRegion>(NULL);
  }

  KeyNotInRegion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KeyNotInRegion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KeyNotInRegion& from);
  void MergeFrom(const KeyNotInRegion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyNotInRegion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // bytes start_key = 3;
  void clear_start_key();
  static const int kStartKeyFieldNumber = 3;
  const ::std::string& start_key() const;
  void set_start_key(const ::std::string& value);
  #if LANG_CXX11
  void set_start_key(::std::string&& value);
  #endif
  void set_start_key(const char* value);
  void set_start_key(const void* value, size_t size);
  ::std::string* mutable_start_key();
  ::std::string* release_start_key();
  void set_allocated_start_key(::std::string* start_key);

  // bytes end_key = 4;
  void clear_end_key();
  static const int kEndKeyFieldNumber = 4;
  const ::std::string& end_key() const;
  void set_end_key(const ::std::string& value);
  #if LANG_CXX11
  void set_end_key(::std::string&& value);
  #endif
  void set_end_key(const char* value);
  void set_end_key(const void* value, size_t size);
  ::std::string* mutable_end_key();
  ::std::string* release_end_key();
  void set_allocated_end_key(::std::string* end_key);

  // uint64 region_id = 2;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 2;
  ::google::protobuf::uint64 region_id() const;
  void set_region_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:errorpb.KeyNotInRegion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr start_key_;
  ::google::protobuf::internal::ArenaStringPtr end_key_;
  ::google::protobuf::uint64 region_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_errorpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StaleEpoch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:errorpb.StaleEpoch) */ {
 public:
  StaleEpoch();
  virtual ~StaleEpoch();

  StaleEpoch(const StaleEpoch& from);

  inline StaleEpoch& operator=(const StaleEpoch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StaleEpoch(StaleEpoch&& from) noexcept
    : StaleEpoch() {
    *this = ::std::move(from);
  }

  inline StaleEpoch& operator=(StaleEpoch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StaleEpoch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StaleEpoch* internal_default_instance() {
    return reinterpret_cast<const StaleEpoch*>(
               &_StaleEpoch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(StaleEpoch* other);
  friend void swap(StaleEpoch& a, StaleEpoch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StaleEpoch* New() const final {
    return CreateMaybeMessage<StaleEpoch>(NULL);
  }

  StaleEpoch* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StaleEpoch>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StaleEpoch& from);
  void MergeFrom(const StaleEpoch& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StaleEpoch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .metapb.Region new_regions = 1;
  int new_regions_size() const;
  void clear_new_regions();
  static const int kNewRegionsFieldNumber = 1;
  ::metapb::Region* mutable_new_regions(int index);
  ::google::protobuf::RepeatedPtrField< ::metapb::Region >*
      mutable_new_regions();
  const ::metapb::Region& new_regions(int index) const;
  ::metapb::Region* add_new_regions();
  const ::google::protobuf::RepeatedPtrField< ::metapb::Region >&
      new_regions() const;

  // @@protoc_insertion_point(class_scope:errorpb.StaleEpoch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::metapb::Region > new_regions_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_errorpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerIsBusy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:errorpb.ServerIsBusy) */ {
 public:
  ServerIsBusy();
  virtual ~ServerIsBusy();

  ServerIsBusy(const ServerIsBusy& from);

  inline ServerIsBusy& operator=(const ServerIsBusy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerIsBusy(ServerIsBusy&& from) noexcept
    : ServerIsBusy() {
    *this = ::std::move(from);
  }

  inline ServerIsBusy& operator=(ServerIsBusy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerIsBusy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerIsBusy* internal_default_instance() {
    return reinterpret_cast<const ServerIsBusy*>(
               &_ServerIsBusy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ServerIsBusy* other);
  friend void swap(ServerIsBusy& a, ServerIsBusy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerIsBusy* New() const final {
    return CreateMaybeMessage<ServerIsBusy>(NULL);
  }

  ServerIsBusy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerIsBusy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerIsBusy& from);
  void MergeFrom(const ServerIsBusy& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerIsBusy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string reason = 1;
  void clear_reason();
  static const int kReasonFieldNumber = 1;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // uint64 backoff_ms = 2;
  void clear_backoff_ms();
  static const int kBackoffMsFieldNumber = 2;
  ::google::protobuf::uint64 backoff_ms() const;
  void set_backoff_ms(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:errorpb.ServerIsBusy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::uint64 backoff_ms_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_errorpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StaleCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:errorpb.StaleCommand) */ {
 public:
  StaleCommand();
  virtual ~StaleCommand();

  StaleCommand(const StaleCommand& from);

  inline StaleCommand& operator=(const StaleCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StaleCommand(StaleCommand&& from) noexcept
    : StaleCommand() {
    *this = ::std::move(from);
  }

  inline StaleCommand& operator=(StaleCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StaleCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StaleCommand* internal_default_instance() {
    return reinterpret_cast<const StaleCommand*>(
               &_StaleCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(StaleCommand* other);
  friend void swap(StaleCommand& a, StaleCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StaleCommand* New() const final {
    return CreateMaybeMessage<StaleCommand>(NULL);
  }

  StaleCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StaleCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StaleCommand& from);
  void MergeFrom(const StaleCommand& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StaleCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:errorpb.StaleCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_errorpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RaftEntryTooLarge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:errorpb.RaftEntryTooLarge) */ {
 public:
  RaftEntryTooLarge();
  virtual ~RaftEntryTooLarge();

  RaftEntryTooLarge(const RaftEntryTooLarge& from);

  inline RaftEntryTooLarge& operator=(const RaftEntryTooLarge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RaftEntryTooLarge(RaftEntryTooLarge&& from) noexcept
    : RaftEntryTooLarge() {
    *this = ::std::move(from);
  }

  inline RaftEntryTooLarge& operator=(RaftEntryTooLarge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftEntryTooLarge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RaftEntryTooLarge* internal_default_instance() {
    return reinterpret_cast<const RaftEntryTooLarge*>(
               &_RaftEntryTooLarge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(RaftEntryTooLarge* other);
  friend void swap(RaftEntryTooLarge& a, RaftEntryTooLarge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RaftEntryTooLarge* New() const final {
    return CreateMaybeMessage<RaftEntryTooLarge>(NULL);
  }

  RaftEntryTooLarge* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RaftEntryTooLarge>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RaftEntryTooLarge& from);
  void MergeFrom(const RaftEntryTooLarge& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftEntryTooLarge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 region_id = 1;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  ::google::protobuf::uint64 region_id() const;
  void set_region_id(::google::protobuf::uint64 value);

  // uint64 entry_size = 2;
  void clear_entry_size();
  static const int kEntrySizeFieldNumber = 2;
  ::google::protobuf::uint64 entry_size() const;
  void set_entry_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:errorpb.RaftEntryTooLarge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 region_id_;
  ::google::protobuf::uint64 entry_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_errorpb_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:errorpb.Error) */ {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(Error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Error* other);
  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const final {
    return CreateMaybeMessage<Error>(NULL);
  }

  Error* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .errorpb.NotLeader not_leader = 2;
  bool has_not_leader() const;
  void clear_not_leader();
  static const int kNotLeaderFieldNumber = 2;
  private:
  const ::errorpb::NotLeader& _internal_not_leader() const;
  public:
  const ::errorpb::NotLeader& not_leader() const;
  ::errorpb::NotLeader* release_not_leader();
  ::errorpb::NotLeader* mutable_not_leader();
  void set_allocated_not_leader(::errorpb::NotLeader* not_leader);

  // .errorpb.RegionNotFound region_not_found = 3;
  bool has_region_not_found() const;
  void clear_region_not_found();
  static const int kRegionNotFoundFieldNumber = 3;
  private:
  const ::errorpb::RegionNotFound& _internal_region_not_found() const;
  public:
  const ::errorpb::RegionNotFound& region_not_found() const;
  ::errorpb::RegionNotFound* release_region_not_found();
  ::errorpb::RegionNotFound* mutable_region_not_found();
  void set_allocated_region_not_found(::errorpb::RegionNotFound* region_not_found);

  // .errorpb.KeyNotInRegion key_not_in_region = 4;
  bool has_key_not_in_region() const;
  void clear_key_not_in_region();
  static const int kKeyNotInRegionFieldNumber = 4;
  private:
  const ::errorpb::KeyNotInRegion& _internal_key_not_in_region() const;
  public:
  const ::errorpb::KeyNotInRegion& key_not_in_region() const;
  ::errorpb::KeyNotInRegion* release_key_not_in_region();
  ::errorpb::KeyNotInRegion* mutable_key_not_in_region();
  void set_allocated_key_not_in_region(::errorpb::KeyNotInRegion* key_not_in_region);

  // .errorpb.StaleEpoch stale_epoch = 5;
  bool has_stale_epoch() const;
  void clear_stale_epoch();
  static const int kStaleEpochFieldNumber = 5;
  private:
  const ::errorpb::StaleEpoch& _internal_stale_epoch() const;
  public:
  const ::errorpb::StaleEpoch& stale_epoch() const;
  ::errorpb::StaleEpoch* release_stale_epoch();
  ::errorpb::StaleEpoch* mutable_stale_epoch();
  void set_allocated_stale_epoch(::errorpb::StaleEpoch* stale_epoch);

  // .errorpb.ServerIsBusy server_is_busy = 6;
  bool has_server_is_busy() const;
  void clear_server_is_busy();
  static const int kServerIsBusyFieldNumber = 6;
  private:
  const ::errorpb::ServerIsBusy& _internal_server_is_busy() const;
  public:
  const ::errorpb::ServerIsBusy& server_is_busy() const;
  ::errorpb::ServerIsBusy* release_server_is_busy();
  ::errorpb::ServerIsBusy* mutable_server_is_busy();
  void set_allocated_server_is_busy(::errorpb::ServerIsBusy* server_is_busy);

  // .errorpb.StaleCommand stale_command = 7;
  bool has_stale_command() const;
  void clear_stale_command();
  static const int kStaleCommandFieldNumber = 7;
  private:
  const ::errorpb::StaleCommand& _internal_stale_command() const;
  public:
  const ::errorpb::StaleCommand& stale_command() const;
  ::errorpb::StaleCommand* release_stale_command();
  ::errorpb::StaleCommand* mutable_stale_command();
  void set_allocated_stale_command(::errorpb::StaleCommand* stale_command);

  // .errorpb.StoreNotMatch store_not_match = 8;
  bool has_store_not_match() const;
  void clear_store_not_match();
  static const int kStoreNotMatchFieldNumber = 8;
  private:
  const ::errorpb::StoreNotMatch& _internal_store_not_match() const;
  public:
  const ::errorpb::StoreNotMatch& store_not_match() const;
  ::errorpb::StoreNotMatch* release_store_not_match();
  ::errorpb::StoreNotMatch* mutable_store_not_match();
  void set_allocated_store_not_match(::errorpb::StoreNotMatch* store_not_match);

  // .errorpb.RaftEntryTooLarge raft_entry_too_large = 9;
  bool has_raft_entry_too_large() const;
  void clear_raft_entry_too_large();
  static const int kRaftEntryTooLargeFieldNumber = 9;
  private:
  const ::errorpb::RaftEntryTooLarge& _internal_raft_entry_too_large() const;
  public:
  const ::errorpb::RaftEntryTooLarge& raft_entry_too_large() const;
  ::errorpb::RaftEntryTooLarge* release_raft_entry_too_large();
  ::errorpb::RaftEntryTooLarge* mutable_raft_entry_too_large();
  void set_allocated_raft_entry_too_large(::errorpb::RaftEntryTooLarge* raft_entry_too_large);

  // @@protoc_insertion_point(class_scope:errorpb.Error)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::errorpb::NotLeader* not_leader_;
  ::errorpb::RegionNotFound* region_not_found_;
  ::errorpb::KeyNotInRegion* key_not_in_region_;
  ::errorpb::StaleEpoch* stale_epoch_;
  ::errorpb::ServerIsBusy* server_is_busy_;
  ::errorpb::StaleCommand* stale_command_;
  ::errorpb::StoreNotMatch* store_not_match_;
  ::errorpb::RaftEntryTooLarge* raft_entry_too_large_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_errorpb_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NotLeader

// uint64 region_id = 1;
inline void NotLeader::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NotLeader::region_id() const {
  // @@protoc_insertion_point(field_get:errorpb.NotLeader.region_id)
  return region_id_;
}
inline void NotLeader::set_region_id(::google::protobuf::uint64 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:errorpb.NotLeader.region_id)
}

// .metapb.Peer leader = 2;
inline bool NotLeader::has_leader() const {
  return this != internal_default_instance() && leader_ != NULL;
}
inline const ::metapb::Peer& NotLeader::_internal_leader() const {
  return *leader_;
}
inline const ::metapb::Peer& NotLeader::leader() const {
  const ::metapb::Peer* p = leader_;
  // @@protoc_insertion_point(field_get:errorpb.NotLeader.leader)
  return p != NULL ? *p : *reinterpret_cast<const ::metapb::Peer*>(
      &::metapb::_Peer_default_instance_);
}
inline ::metapb::Peer* NotLeader::release_leader() {
  // @@protoc_insertion_point(field_release:errorpb.NotLeader.leader)
  
  ::metapb::Peer* temp = leader_;
  leader_ = NULL;
  return temp;
}
inline ::metapb::Peer* NotLeader::mutable_leader() {
  
  if (leader_ == NULL) {
    auto* p = CreateMaybeMessage<::metapb::Peer>(GetArenaNoVirtual());
    leader_ = p;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.NotLeader.leader)
  return leader_;
}
inline void NotLeader::set_allocated_leader(::metapb::Peer* leader) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(leader_);
  }
  if (leader) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      leader = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leader, submessage_arena);
    }
    
  } else {
    
  }
  leader_ = leader;
  // @@protoc_insertion_point(field_set_allocated:errorpb.NotLeader.leader)
}

// -------------------------------------------------------------------

// StoreNotMatch

// -------------------------------------------------------------------

// RegionNotFound

// uint64 region_id = 1;
inline void RegionNotFound::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RegionNotFound::region_id() const {
  // @@protoc_insertion_point(field_get:errorpb.RegionNotFound.region_id)
  return region_id_;
}
inline void RegionNotFound::set_region_id(::google::protobuf::uint64 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:errorpb.RegionNotFound.region_id)
}

// -------------------------------------------------------------------

// KeyNotInRegion

// bytes key = 1;
inline void KeyNotInRegion::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyNotInRegion::key() const {
  // @@protoc_insertion_point(field_get:errorpb.KeyNotInRegion.key)
  return key_.GetNoArena();
}
inline void KeyNotInRegion::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:errorpb.KeyNotInRegion.key)
}
#if LANG_CXX11
inline void KeyNotInRegion::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:errorpb.KeyNotInRegion.key)
}
#endif
inline void KeyNotInRegion::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:errorpb.KeyNotInRegion.key)
}
inline void KeyNotInRegion::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:errorpb.KeyNotInRegion.key)
}
inline ::std::string* KeyNotInRegion::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:errorpb.KeyNotInRegion.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyNotInRegion::release_key() {
  // @@protoc_insertion_point(field_release:errorpb.KeyNotInRegion.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyNotInRegion::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:errorpb.KeyNotInRegion.key)
}

// uint64 region_id = 2;
inline void KeyNotInRegion::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 KeyNotInRegion::region_id() const {
  // @@protoc_insertion_point(field_get:errorpb.KeyNotInRegion.region_id)
  return region_id_;
}
inline void KeyNotInRegion::set_region_id(::google::protobuf::uint64 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:errorpb.KeyNotInRegion.region_id)
}

// bytes start_key = 3;
inline void KeyNotInRegion::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyNotInRegion::start_key() const {
  // @@protoc_insertion_point(field_get:errorpb.KeyNotInRegion.start_key)
  return start_key_.GetNoArena();
}
inline void KeyNotInRegion::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:errorpb.KeyNotInRegion.start_key)
}
#if LANG_CXX11
inline void KeyNotInRegion::set_start_key(::std::string&& value) {
  
  start_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:errorpb.KeyNotInRegion.start_key)
}
#endif
inline void KeyNotInRegion::set_start_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:errorpb.KeyNotInRegion.start_key)
}
inline void KeyNotInRegion::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:errorpb.KeyNotInRegion.start_key)
}
inline ::std::string* KeyNotInRegion::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:errorpb.KeyNotInRegion.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyNotInRegion::release_start_key() {
  // @@protoc_insertion_point(field_release:errorpb.KeyNotInRegion.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyNotInRegion::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:errorpb.KeyNotInRegion.start_key)
}

// bytes end_key = 4;
inline void KeyNotInRegion::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyNotInRegion::end_key() const {
  // @@protoc_insertion_point(field_get:errorpb.KeyNotInRegion.end_key)
  return end_key_.GetNoArena();
}
inline void KeyNotInRegion::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:errorpb.KeyNotInRegion.end_key)
}
#if LANG_CXX11
inline void KeyNotInRegion::set_end_key(::std::string&& value) {
  
  end_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:errorpb.KeyNotInRegion.end_key)
}
#endif
inline void KeyNotInRegion::set_end_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:errorpb.KeyNotInRegion.end_key)
}
inline void KeyNotInRegion::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:errorpb.KeyNotInRegion.end_key)
}
inline ::std::string* KeyNotInRegion::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:errorpb.KeyNotInRegion.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyNotInRegion::release_end_key() {
  // @@protoc_insertion_point(field_release:errorpb.KeyNotInRegion.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyNotInRegion::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:errorpb.KeyNotInRegion.end_key)
}

// -------------------------------------------------------------------

// StaleEpoch

// repeated .metapb.Region new_regions = 1;
inline int StaleEpoch::new_regions_size() const {
  return new_regions_.size();
}
inline ::metapb::Region* StaleEpoch::mutable_new_regions(int index) {
  // @@protoc_insertion_point(field_mutable:errorpb.StaleEpoch.new_regions)
  return new_regions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::metapb::Region >*
StaleEpoch::mutable_new_regions() {
  // @@protoc_insertion_point(field_mutable_list:errorpb.StaleEpoch.new_regions)
  return &new_regions_;
}
inline const ::metapb::Region& StaleEpoch::new_regions(int index) const {
  // @@protoc_insertion_point(field_get:errorpb.StaleEpoch.new_regions)
  return new_regions_.Get(index);
}
inline ::metapb::Region* StaleEpoch::add_new_regions() {
  // @@protoc_insertion_point(field_add:errorpb.StaleEpoch.new_regions)
  return new_regions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::metapb::Region >&
StaleEpoch::new_regions() const {
  // @@protoc_insertion_point(field_list:errorpb.StaleEpoch.new_regions)
  return new_regions_;
}

// -------------------------------------------------------------------

// ServerIsBusy

// string reason = 1;
inline void ServerIsBusy::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerIsBusy::reason() const {
  // @@protoc_insertion_point(field_get:errorpb.ServerIsBusy.reason)
  return reason_.GetNoArena();
}
inline void ServerIsBusy::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:errorpb.ServerIsBusy.reason)
}
#if LANG_CXX11
inline void ServerIsBusy::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:errorpb.ServerIsBusy.reason)
}
#endif
inline void ServerIsBusy::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:errorpb.ServerIsBusy.reason)
}
inline void ServerIsBusy::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:errorpb.ServerIsBusy.reason)
}
inline ::std::string* ServerIsBusy::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:errorpb.ServerIsBusy.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerIsBusy::release_reason() {
  // @@protoc_insertion_point(field_release:errorpb.ServerIsBusy.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerIsBusy::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:errorpb.ServerIsBusy.reason)
}

// uint64 backoff_ms = 2;
inline void ServerIsBusy::clear_backoff_ms() {
  backoff_ms_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ServerIsBusy::backoff_ms() const {
  // @@protoc_insertion_point(field_get:errorpb.ServerIsBusy.backoff_ms)
  return backoff_ms_;
}
inline void ServerIsBusy::set_backoff_ms(::google::protobuf::uint64 value) {
  
  backoff_ms_ = value;
  // @@protoc_insertion_point(field_set:errorpb.ServerIsBusy.backoff_ms)
}

// -------------------------------------------------------------------

// StaleCommand

// -------------------------------------------------------------------

// RaftEntryTooLarge

// uint64 region_id = 1;
inline void RaftEntryTooLarge::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftEntryTooLarge::region_id() const {
  // @@protoc_insertion_point(field_get:errorpb.RaftEntryTooLarge.region_id)
  return region_id_;
}
inline void RaftEntryTooLarge::set_region_id(::google::protobuf::uint64 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:errorpb.RaftEntryTooLarge.region_id)
}

// uint64 entry_size = 2;
inline void RaftEntryTooLarge::clear_entry_size() {
  entry_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftEntryTooLarge::entry_size() const {
  // @@protoc_insertion_point(field_get:errorpb.RaftEntryTooLarge.entry_size)
  return entry_size_;
}
inline void RaftEntryTooLarge::set_entry_size(::google::protobuf::uint64 value) {
  
  entry_size_ = value;
  // @@protoc_insertion_point(field_set:errorpb.RaftEntryTooLarge.entry_size)
}

// -------------------------------------------------------------------

// Error

// string message = 1;
inline void Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:errorpb.Error.message)
  return message_.GetNoArena();
}
inline void Error::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:errorpb.Error.message)
}
#if LANG_CXX11
inline void Error::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:errorpb.Error.message)
}
#endif
inline void Error::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:errorpb.Error.message)
}
inline void Error::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:errorpb.Error.message)
}
inline ::std::string* Error::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:errorpb.Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:errorpb.Error.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.message)
}

// .errorpb.NotLeader not_leader = 2;
inline bool Error::has_not_leader() const {
  return this != internal_default_instance() && not_leader_ != NULL;
}
inline void Error::clear_not_leader() {
  if (GetArenaNoVirtual() == NULL && not_leader_ != NULL) {
    delete not_leader_;
  }
  not_leader_ = NULL;
}
inline const ::errorpb::NotLeader& Error::_internal_not_leader() const {
  return *not_leader_;
}
inline const ::errorpb::NotLeader& Error::not_leader() const {
  const ::errorpb::NotLeader* p = not_leader_;
  // @@protoc_insertion_point(field_get:errorpb.Error.not_leader)
  return p != NULL ? *p : *reinterpret_cast<const ::errorpb::NotLeader*>(
      &::errorpb::_NotLeader_default_instance_);
}
inline ::errorpb::NotLeader* Error::release_not_leader() {
  // @@protoc_insertion_point(field_release:errorpb.Error.not_leader)
  
  ::errorpb::NotLeader* temp = not_leader_;
  not_leader_ = NULL;
  return temp;
}
inline ::errorpb::NotLeader* Error::mutable_not_leader() {
  
  if (not_leader_ == NULL) {
    auto* p = CreateMaybeMessage<::errorpb::NotLeader>(GetArenaNoVirtual());
    not_leader_ = p;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.not_leader)
  return not_leader_;
}
inline void Error::set_allocated_not_leader(::errorpb::NotLeader* not_leader) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete not_leader_;
  }
  if (not_leader) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      not_leader = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, not_leader, submessage_arena);
    }
    
  } else {
    
  }
  not_leader_ = not_leader;
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.not_leader)
}

// .errorpb.RegionNotFound region_not_found = 3;
inline bool Error::has_region_not_found() const {
  return this != internal_default_instance() && region_not_found_ != NULL;
}
inline void Error::clear_region_not_found() {
  if (GetArenaNoVirtual() == NULL && region_not_found_ != NULL) {
    delete region_not_found_;
  }
  region_not_found_ = NULL;
}
inline const ::errorpb::RegionNotFound& Error::_internal_region_not_found() const {
  return *region_not_found_;
}
inline const ::errorpb::RegionNotFound& Error::region_not_found() const {
  const ::errorpb::RegionNotFound* p = region_not_found_;
  // @@protoc_insertion_point(field_get:errorpb.Error.region_not_found)
  return p != NULL ? *p : *reinterpret_cast<const ::errorpb::RegionNotFound*>(
      &::errorpb::_RegionNotFound_default_instance_);
}
inline ::errorpb::RegionNotFound* Error::release_region_not_found() {
  // @@protoc_insertion_point(field_release:errorpb.Error.region_not_found)
  
  ::errorpb::RegionNotFound* temp = region_not_found_;
  region_not_found_ = NULL;
  return temp;
}
inline ::errorpb::RegionNotFound* Error::mutable_region_not_found() {
  
  if (region_not_found_ == NULL) {
    auto* p = CreateMaybeMessage<::errorpb::RegionNotFound>(GetArenaNoVirtual());
    region_not_found_ = p;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.region_not_found)
  return region_not_found_;
}
inline void Error::set_allocated_region_not_found(::errorpb::RegionNotFound* region_not_found) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete region_not_found_;
  }
  if (region_not_found) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      region_not_found = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, region_not_found, submessage_arena);
    }
    
  } else {
    
  }
  region_not_found_ = region_not_found;
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.region_not_found)
}

// .errorpb.KeyNotInRegion key_not_in_region = 4;
inline bool Error::has_key_not_in_region() const {
  return this != internal_default_instance() && key_not_in_region_ != NULL;
}
inline void Error::clear_key_not_in_region() {
  if (GetArenaNoVirtual() == NULL && key_not_in_region_ != NULL) {
    delete key_not_in_region_;
  }
  key_not_in_region_ = NULL;
}
inline const ::errorpb::KeyNotInRegion& Error::_internal_key_not_in_region() const {
  return *key_not_in_region_;
}
inline const ::errorpb::KeyNotInRegion& Error::key_not_in_region() const {
  const ::errorpb::KeyNotInRegion* p = key_not_in_region_;
  // @@protoc_insertion_point(field_get:errorpb.Error.key_not_in_region)
  return p != NULL ? *p : *reinterpret_cast<const ::errorpb::KeyNotInRegion*>(
      &::errorpb::_KeyNotInRegion_default_instance_);
}
inline ::errorpb::KeyNotInRegion* Error::release_key_not_in_region() {
  // @@protoc_insertion_point(field_release:errorpb.Error.key_not_in_region)
  
  ::errorpb::KeyNotInRegion* temp = key_not_in_region_;
  key_not_in_region_ = NULL;
  return temp;
}
inline ::errorpb::KeyNotInRegion* Error::mutable_key_not_in_region() {
  
  if (key_not_in_region_ == NULL) {
    auto* p = CreateMaybeMessage<::errorpb::KeyNotInRegion>(GetArenaNoVirtual());
    key_not_in_region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.key_not_in_region)
  return key_not_in_region_;
}
inline void Error::set_allocated_key_not_in_region(::errorpb::KeyNotInRegion* key_not_in_region) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete key_not_in_region_;
  }
  if (key_not_in_region) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      key_not_in_region = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, key_not_in_region, submessage_arena);
    }
    
  } else {
    
  }
  key_not_in_region_ = key_not_in_region;
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.key_not_in_region)
}

// .errorpb.StaleEpoch stale_epoch = 5;
inline bool Error::has_stale_epoch() const {
  return this != internal_default_instance() && stale_epoch_ != NULL;
}
inline void Error::clear_stale_epoch() {
  if (GetArenaNoVirtual() == NULL && stale_epoch_ != NULL) {
    delete stale_epoch_;
  }
  stale_epoch_ = NULL;
}
inline const ::errorpb::StaleEpoch& Error::_internal_stale_epoch() const {
  return *stale_epoch_;
}
inline const ::errorpb::StaleEpoch& Error::stale_epoch() const {
  const ::errorpb::StaleEpoch* p = stale_epoch_;
  // @@protoc_insertion_point(field_get:errorpb.Error.stale_epoch)
  return p != NULL ? *p : *reinterpret_cast<const ::errorpb::StaleEpoch*>(
      &::errorpb::_StaleEpoch_default_instance_);
}
inline ::errorpb::StaleEpoch* Error::release_stale_epoch() {
  // @@protoc_insertion_point(field_release:errorpb.Error.stale_epoch)
  
  ::errorpb::StaleEpoch* temp = stale_epoch_;
  stale_epoch_ = NULL;
  return temp;
}
inline ::errorpb::StaleEpoch* Error::mutable_stale_epoch() {
  
  if (stale_epoch_ == NULL) {
    auto* p = CreateMaybeMessage<::errorpb::StaleEpoch>(GetArenaNoVirtual());
    stale_epoch_ = p;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.stale_epoch)
  return stale_epoch_;
}
inline void Error::set_allocated_stale_epoch(::errorpb::StaleEpoch* stale_epoch) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stale_epoch_;
  }
  if (stale_epoch) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stale_epoch = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stale_epoch, submessage_arena);
    }
    
  } else {
    
  }
  stale_epoch_ = stale_epoch;
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.stale_epoch)
}

// .errorpb.ServerIsBusy server_is_busy = 6;
inline bool Error::has_server_is_busy() const {
  return this != internal_default_instance() && server_is_busy_ != NULL;
}
inline void Error::clear_server_is_busy() {
  if (GetArenaNoVirtual() == NULL && server_is_busy_ != NULL) {
    delete server_is_busy_;
  }
  server_is_busy_ = NULL;
}
inline const ::errorpb::ServerIsBusy& Error::_internal_server_is_busy() const {
  return *server_is_busy_;
}
inline const ::errorpb::ServerIsBusy& Error::server_is_busy() const {
  const ::errorpb::ServerIsBusy* p = server_is_busy_;
  // @@protoc_insertion_point(field_get:errorpb.Error.server_is_busy)
  return p != NULL ? *p : *reinterpret_cast<const ::errorpb::ServerIsBusy*>(
      &::errorpb::_ServerIsBusy_default_instance_);
}
inline ::errorpb::ServerIsBusy* Error::release_server_is_busy() {
  // @@protoc_insertion_point(field_release:errorpb.Error.server_is_busy)
  
  ::errorpb::ServerIsBusy* temp = server_is_busy_;
  server_is_busy_ = NULL;
  return temp;
}
inline ::errorpb::ServerIsBusy* Error::mutable_server_is_busy() {
  
  if (server_is_busy_ == NULL) {
    auto* p = CreateMaybeMessage<::errorpb::ServerIsBusy>(GetArenaNoVirtual());
    server_is_busy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.server_is_busy)
  return server_is_busy_;
}
inline void Error::set_allocated_server_is_busy(::errorpb::ServerIsBusy* server_is_busy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete server_is_busy_;
  }
  if (server_is_busy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      server_is_busy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, server_is_busy, submessage_arena);
    }
    
  } else {
    
  }
  server_is_busy_ = server_is_busy;
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.server_is_busy)
}

// .errorpb.StaleCommand stale_command = 7;
inline bool Error::has_stale_command() const {
  return this != internal_default_instance() && stale_command_ != NULL;
}
inline void Error::clear_stale_command() {
  if (GetArenaNoVirtual() == NULL && stale_command_ != NULL) {
    delete stale_command_;
  }
  stale_command_ = NULL;
}
inline const ::errorpb::StaleCommand& Error::_internal_stale_command() const {
  return *stale_command_;
}
inline const ::errorpb::StaleCommand& Error::stale_command() const {
  const ::errorpb::StaleCommand* p = stale_command_;
  // @@protoc_insertion_point(field_get:errorpb.Error.stale_command)
  return p != NULL ? *p : *reinterpret_cast<const ::errorpb::StaleCommand*>(
      &::errorpb::_StaleCommand_default_instance_);
}
inline ::errorpb::StaleCommand* Error::release_stale_command() {
  // @@protoc_insertion_point(field_release:errorpb.Error.stale_command)
  
  ::errorpb::StaleCommand* temp = stale_command_;
  stale_command_ = NULL;
  return temp;
}
inline ::errorpb::StaleCommand* Error::mutable_stale_command() {
  
  if (stale_command_ == NULL) {
    auto* p = CreateMaybeMessage<::errorpb::StaleCommand>(GetArenaNoVirtual());
    stale_command_ = p;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.stale_command)
  return stale_command_;
}
inline void Error::set_allocated_stale_command(::errorpb::StaleCommand* stale_command) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stale_command_;
  }
  if (stale_command) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stale_command = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stale_command, submessage_arena);
    }
    
  } else {
    
  }
  stale_command_ = stale_command;
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.stale_command)
}

// .errorpb.StoreNotMatch store_not_match = 8;
inline bool Error::has_store_not_match() const {
  return this != internal_default_instance() && store_not_match_ != NULL;
}
inline void Error::clear_store_not_match() {
  if (GetArenaNoVirtual() == NULL && store_not_match_ != NULL) {
    delete store_not_match_;
  }
  store_not_match_ = NULL;
}
inline const ::errorpb::StoreNotMatch& Error::_internal_store_not_match() const {
  return *store_not_match_;
}
inline const ::errorpb::StoreNotMatch& Error::store_not_match() const {
  const ::errorpb::StoreNotMatch* p = store_not_match_;
  // @@protoc_insertion_point(field_get:errorpb.Error.store_not_match)
  return p != NULL ? *p : *reinterpret_cast<const ::errorpb::StoreNotMatch*>(
      &::errorpb::_StoreNotMatch_default_instance_);
}
inline ::errorpb::StoreNotMatch* Error::release_store_not_match() {
  // @@protoc_insertion_point(field_release:errorpb.Error.store_not_match)
  
  ::errorpb::StoreNotMatch* temp = store_not_match_;
  store_not_match_ = NULL;
  return temp;
}
inline ::errorpb::StoreNotMatch* Error::mutable_store_not_match() {
  
  if (store_not_match_ == NULL) {
    auto* p = CreateMaybeMessage<::errorpb::StoreNotMatch>(GetArenaNoVirtual());
    store_not_match_ = p;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.store_not_match)
  return store_not_match_;
}
inline void Error::set_allocated_store_not_match(::errorpb::StoreNotMatch* store_not_match) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete store_not_match_;
  }
  if (store_not_match) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      store_not_match = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, store_not_match, submessage_arena);
    }
    
  } else {
    
  }
  store_not_match_ = store_not_match;
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.store_not_match)
}

// .errorpb.RaftEntryTooLarge raft_entry_too_large = 9;
inline bool Error::has_raft_entry_too_large() const {
  return this != internal_default_instance() && raft_entry_too_large_ != NULL;
}
inline void Error::clear_raft_entry_too_large() {
  if (GetArenaNoVirtual() == NULL && raft_entry_too_large_ != NULL) {
    delete raft_entry_too_large_;
  }
  raft_entry_too_large_ = NULL;
}
inline const ::errorpb::RaftEntryTooLarge& Error::_internal_raft_entry_too_large() const {
  return *raft_entry_too_large_;
}
inline const ::errorpb::RaftEntryTooLarge& Error::raft_entry_too_large() const {
  const ::errorpb::RaftEntryTooLarge* p = raft_entry_too_large_;
  // @@protoc_insertion_point(field_get:errorpb.Error.raft_entry_too_large)
  return p != NULL ? *p : *reinterpret_cast<const ::errorpb::RaftEntryTooLarge*>(
      &::errorpb::_RaftEntryTooLarge_default_instance_);
}
inline ::errorpb::RaftEntryTooLarge* Error::release_raft_entry_too_large() {
  // @@protoc_insertion_point(field_release:errorpb.Error.raft_entry_too_large)
  
  ::errorpb::RaftEntryTooLarge* temp = raft_entry_too_large_;
  raft_entry_too_large_ = NULL;
  return temp;
}
inline ::errorpb::RaftEntryTooLarge* Error::mutable_raft_entry_too_large() {
  
  if (raft_entry_too_large_ == NULL) {
    auto* p = CreateMaybeMessage<::errorpb::RaftEntryTooLarge>(GetArenaNoVirtual());
    raft_entry_too_large_ = p;
  }
  // @@protoc_insertion_point(field_mutable:errorpb.Error.raft_entry_too_large)
  return raft_entry_too_large_;
}
inline void Error::set_allocated_raft_entry_too_large(::errorpb::RaftEntryTooLarge* raft_entry_too_large) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete raft_entry_too_large_;
  }
  if (raft_entry_too_large) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      raft_entry_too_large = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, raft_entry_too_large, submessage_arena);
    }
    
  } else {
    
  }
  raft_entry_too_large_ = raft_entry_too_large;
  // @@protoc_insertion_point(field_set_allocated:errorpb.Error.raft_entry_too_large)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace errorpb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_errorpb_2eproto
